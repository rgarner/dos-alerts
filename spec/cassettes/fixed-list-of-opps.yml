---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/10025
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.3p62 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '39263'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:56:01 GMT
      Dm-Request-Id:
      - '07797510cafaaa20'
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:56:01 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlQoQ.iTp2JBU1ul1ESUJO1runFXP_Xdk;
        Expires=Thu, 23-Jul-2020 09:56:01 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - '07797510cafaaa20'
      X-B3-Traceid:
      - '07797510cafaaa20'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - bd308e44-2307-4373-522c-c6e9c4f2dcb1
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 7b0f68e9739bedcf2b240d30dd13a85b.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - CqgVF3eDqwXVwvP_j8xZi8N_Z7-y_i1eIph-AKyGcNtYTui3DNyZEg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:56:01 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/9969
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.3p62 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '30203'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:58:45 GMT
      Dm-Request-Id:
      - c0e72d867847a5bb
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:58:45 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRRQ.OaGCLgfayd1rKgzUqnH1tk0hy94;
        Expires=Thu, 23-Jul-2020 09:58:45 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - c0e72d867847a5bb
      X-B3-Traceid:
      - c0e72d867847a5bb
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 9b0e19ae-2867-4c10-4678-b3fd430fad0e
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 ce1d51670567993d20733122565db596.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - VIE50-C1
      X-Amz-Cf-Id:
      - GIfmYLoJ1OwLFRmy0mG88uSoMRP9tDql2ypKs5ysTDvnXS_MC79hcw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:58:45 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/9935
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.3p62 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '31050'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:58:46 GMT
      Dm-Request-Id:
      - f2df4ba550feb6be
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:58:46 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRRg.gaaGpiUu6MN983hG5K-16MsfmnE;
        Expires=Thu, 23-Jul-2020 09:58:46 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - f2df4ba550feb6be
      X-B3-Traceid:
      - f2df4ba550feb6be
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b3bf0233-8b21-4256-71b4-39748f87bfaa
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 60b130d1fc70d3593e6c3e738e3f4416.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - VIE50-C1
      X-Amz-Cf-Id:
      - UPTtPlDTovAEHhGFxFTUkB9hlnXfA9q1KmPC29dUMd6sD10ZY9YTFw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:58:46 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11438
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.3p62 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29630'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:58:46 GMT
      Dm-Request-Id:
      - 8b89ab171529468c
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:58:46 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRRg.gaaGpiUu6MN983hG5K-16MsfmnE;
        Expires=Thu, 23-Jul-2020 09:58:46 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 8b89ab171529468c
      X-B3-Traceid:
      - 8b89ab171529468c
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - bbad466b-370c-4ea9-7b73-ae278e3c3817
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 9a736972b021a4b2382c29923f73ce8b.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - VIE50-C1
      X-Amz-Cf-Id:
      - UoL7qp1QWnaGAJDN-Uycmm8fZZHvcj5oPwLxEMSldHd1saQt0FDVRg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        CjwhRE9DVFlQRSBodG1sPgo8aHRtbCBsYW5nPSJlbiIgY2xhc3M9ImdvdnVrLXRlbXBsYXRlICI+CiAgPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4KICAgIDx0aXRsZT4KICBFbmQgdXNlciBDb21wdXRlIGVuZ2luZWVyIC0gRGlnaXRhbCBNYXJrZXRwbGFjZQo8L3RpdGxlPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCB2aWV3cG9ydC1maXQ9Y292ZXIiPgogICAgPG1ldGEgbmFtZT0idGhlbWUtY29sb3IiIGNvbnRlbnQ9IiMwYjBjMGMiIC8+IAogICAgCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+CgogICAgCiAgICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgc2l6ZXM9IjE2eDE2IDMyeDMyIDQ4eDQ4IiBocmVmPSIvc3RhdGljL2ltYWdlcy9mYXZpY29uLmljbyIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPgogICAgICA8bGluayByZWw9Im1hc2staWNvbiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZ292dWstbWFzay1pY29uLnN2ZyIgY29sb3I9IiMwYjBjMGMiPiAKICAgICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTgweDE4MCIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZ292dWstYXBwbGUtdG91Y2gtaWNvbi0xODB4MTgwLnBuZyI+CiAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE2N3gxNjciIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdnVrLWFwcGxlLXRvdWNoLWljb24tMTY3eDE2Ny5wbmciPgogICAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSIxNTJ4MTUyIiBocmVmPSIvc3RhdGljL2ltYWdlcy9nb3Z1ay1hcHBsZS10b3VjaC1pY29uLTE1MngxNTIucG5nIj4KICAgICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBocmVmPSIvc3RhdGljL2ltYWdlcy9nb3Z1ay1hcHBsZS10b3VjaC1pY29uLnBuZyI+CiAgICAKCiAgICAKICAKCgoKCgoKCgogIAogIDxtZXRhIG5hbWU9Imdvb2dsZS1zaXRlLXZlcmlmaWNhdGlvbiIgY29udGVudD0iVEtHU0dabmZIcHgxLWxLT3RoSTE3QU50d2s3ZnozRjRTYnI3N0kwcHBPMCI+CgogIDxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvYXBwbGljYXRpb24uY3NzPzc1MDdhOTA5ZWRjNmQ3ODUzOTJlNmQwZWU3OWJmOWNjIiAvPgogIAoKICAgIAogICAgCiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Ii9zdGF0aWMvaW1hZ2VzL2dvdnVrLW9wZW5ncmFwaC1pbWFnZS5wbmciPgogIDwvaGVhZD4KICA8Ym9keSBjbGFzcz0iZ292dWstdGVtcGxhdGVfX2JvZHkgIj4KICAgIDxzY3JpcHQ+ZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSAoKGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lKSA/IGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lICsgJyBqcy1lbmFibGVkJyA6ICdqcy1lbmFibGVkJyk7PC9zY3JpcHQ+CiAgICAKCiAgICAKICAgICAgPGEgaHJlZj0iI21haW4tY29udGVudCIgY2xhc3M9ImdvdnVrLXNraXAtbGluayI+U2tpcCB0byBtYWluIGNvbnRlbnQ8L2E+CiAgICAKCiAgICAKICAKICAKCgoKCjxkaXYgaWQ9ImRtLWNvb2tpZS1iYW5uZXIiIGNsYXNzPSJkbS1jb29raWUtYmFubmVyIGdvdnVrLXdpZHRoLWNvbnRhaW5lciIgZGF0YS1tb2R1bGU9ImRtLWNvb2tpZS1iYW5uZXIiIHJvbGU9InJlZ2lvbiIgYXJpYS1kZXNjcmliZWRieT0iZG0tY29va2llLWJhbm5lcl9faGVhZGluZyI+CiAgPGRpdiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9fd3JhcHBlciI+CiAgICA8aDIgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXJfX2hlYWRpbmcgZ292dWstaGVhZGluZy1tIiBpZD0iZG0tY29va2llLWJhbm5lcl9faGVhZGluZyI+CiAgICAgIENhbiB3ZSBzdG9yZSBhbmFseXRpY3MgY29va2llcyBvbiB5b3VyIGRldmljZT8KICAgIDwvaDI+CiAgICA8cCBjbGFzcz0iZ292dWstYm9keSI+CiAgICAgIEFuYWx5dGljcyBjb29raWVzIGhlbHAgdXMgdW5kZXJzdGFuZCBob3cgb3VyIHdlYnNpdGUgaXMgYmVpbmcgdXNlZC4KICAgIDwvcD4KICAgIDxkaXYgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXJfX2J1dHRvbnMiPgogICAgICA8YnV0dG9uIGNsYXNzPSJnb3Z1ay1idXR0b24gZG0tY29va2llLWJhbm5lcl9fYnV0dG9uIGRtLWNvb2tpZS1iYW5uZXJfX2J1dHRvbi0tYWNjZXB0IiB0eXBlPSJzdWJtaXQiIGRhdGEtYWNjZXB0LWNvb2tpZXM9InRydWUiIGFyaWEtZGVzY3JpYmVkYnk9ImRtLWNvb2tpZS1iYW5uZXJfX2hlYWRpbmciPgogICAgICAgIFllczxzcGFuIGNsYXNzPSJnb3Z1ay12aXN1YWxseS1oaWRkZW4iPiwgRGlnaXRhbCBNYXJrZXRwbGFjZSBjYW4gc3RvcmUgYW5hbHl0aWNzIGNvb2tpZXMgb24geW91ciBkZXZpY2U8L3NwYW4+CiAgICAgIDwvYnV0dG9uPgogICAgICA8YnV0dG9uIGNsYXNzPSJnb3Z1ay1idXR0b24gZG0tY29va2llLWJhbm5lcl9fYnV0dG9uIGRtLWNvb2tpZS1iYW5uZXJfX2J1dHRvbi0tcmVqZWN0IiB0eXBlPSJzdWJtaXQiIGRhdGEtYWNjZXB0LWNvb2tpZXM9ImZhbHNlIiBhcmlhLWRlc2NyaWJlZGJ5PSJkbS1jb29raWUtYmFubmVyX19oZWFkaW5nIj4KICAgICAgICBObzxzcGFuIGNsYXNzPSJnb3Z1ay12aXN1YWxseS1oaWRkZW4iPiwgRGlnaXRhbCBNYXJrZXRwbGFjZSBjYW5ub3Qgc3RvcmUgYW5hbHl0aWNzIGNvb2tpZXMgb24geW91ciBkZXZpY2U8L3NwYW4+CiAgICAgIDwvYnV0dG9uPgogICAgICA8YSBjbGFzcz0iZ292dWstbGluayBkbS1jb29raWUtYmFubmVyX19saW5rIiBocmVmPSIvY29va2llcyI+SG93IERpZ2l0YWwgTWFya2V0cGxhY2UgdXNlcyBjb29raWVzPC9hPgogICAgPC9kaXY+CiAgPC9kaXY+CgogIDxkaXYgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXJfX2NvbmZpcm1hdGlvbiIgdGFiaW5kZXg9Ii0xIj4KICAgIDxwIGNsYXNzPSJkbS1jb29raWUtYmFubmVyX19jb25maXJtYXRpb24tbWVzc2FnZSBnb3Z1ay1ib2R5Ij4KICAgICAgWW91IGNhbiA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL3VzZXIvY29va2llLXNldHRpbmdzIj5jaGFuZ2UgeW91ciBjb29raWUgc2V0dGluZ3M8L2E+IGF0IGFueSB0aW1lLgogICAgPC9wPgogICAgPGJ1dHRvbiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9faGlkZS1idXR0b24gZ292dWstbGluayIgZGF0YS1oaWRlLWNvb2tpZS1iYW5uZXI9InRydWUiIHJvbGU9ImxpbmsiPkhpZGU8L2J1dHRvbj4KICA8L2Rpdj4KPC9kaXY+CgogIAoKCgoKCiAgCiAgCgoKCiAgCgo8aGVhZGVyIGNsYXNzPSJnb3Z1ay1oZWFkZXIgIiByb2xlPSJiYW5uZXIiIGRhdGEtbW9kdWxlPSJoZWFkZXIiPgogIDxkaXYgY2xhc3M9ImdvdnVrLWhlYWRlcl9fY29udGFpbmVyIGdvdnVrLXdpZHRoLWNvbnRhaW5lciI+CgogICAgPGRpdiBjbGFzcz0iZ292dWstaGVhZGVyX19sb2dvIj4KICAgICAgPGEgaHJlZj0iLyIgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbGluayBnb3Z1ay1oZWFkZXJfX2xpbmstLWhvbWVwYWdlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iZ292dWstaGVhZGVyX19sb2dvdHlwZSI+CiAgICAgICAgICAKICAgICAgICAgIDxzdmcKICAgICAgICAgICAgcm9sZT0icHJlc2VudGF0aW9uIgogICAgICAgICAgICBmb2N1c2FibGU9ImZhbHNlIgogICAgICAgICAgICBjbGFzcz0iZ292dWstaGVhZGVyX19sb2dvdHlwZS1jcm93biIKICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICB2aWV3Ym94PSIwIDAgMTMyIDk3IgogICAgICAgICAgICBoZWlnaHQ9IjMyIgogICAgICAgICAgICB3aWR0aD0iMzYiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgZmlsbD0iY3VycmVudENvbG9yIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiCiAgICAgICAgICAgICAgZD0iTTI1IDMwLjJjMy41IDEuNSA3LjctLjIgOS4xLTMuNyAxLjUtMy42LS4yLTcuOC0zLjktOS4yLTMuNi0xLjQtNy42LjMtOS4xIDMuOS0xLjQgMy41LjMgNy41IDMuOSA5ek05IDM5LjVjMy42IDEuNSA3LjgtLjIgOS4yLTMuNyAxLjUtMy42LS4yLTcuOC0zLjktOS4xLTMuNi0xLjUtNy42LjItOS4xIDMuOC0xLjQgMy41LjMgNy41IDMuOCA5ek00LjQgNTcuMmMzLjUgMS41IDcuNy0uMiA5LjEtMy44IDEuNS0zLjYtLjItNy43LTMuOS05LjEtMy41LTEuNS03LjYuMy05LjEgMy44LTEuNCAzLjUuMyA3LjYgMy45IDkuMXptMzguMy0yMS40YzMuNSAxLjUgNy43LS4yIDkuMS0zLjggMS41LTMuNi0uMi03LjctMy45LTkuMS0zLjYtMS41LTcuNi4zLTkuMSAzLjgtMS4zIDMuNi40IDcuNyAzLjkgOS4xem02NC40LTUuNmMtMy42IDEuNS03LjgtLjItOS4xLTMuNy0xLjUtMy42LjItNy44IDMuOC05LjIgMy42LTEuNCA3LjcuMyA5LjIgMy45IDEuMyAzLjUtLjQgNy41LTMuOSA5em0xNS45IDkuM2MtMy42IDEuNS03LjctLjItOS4xLTMuNy0xLjUtMy42LjItNy44IDMuNy05LjEgMy42LTEuNSA3LjcuMiA5LjIgMy44IDEuNSAzLjUtLjMgNy41LTMuOCA5em00LjcgMTcuN2MtMy42IDEuNS03LjgtLjItOS4yLTMuOC0xLjUtMy42LjItNy43IDMuOS05LjEgMy42LTEuNSA3LjcuMyA5LjIgMy44IDEuMyAzLjUtLjQgNy42LTMuOSA5LjF6TTg5LjMgMzUuOGMtMy42IDEuNS03LjgtLjItOS4yLTMuOC0xLjQtMy42LjItNy43IDMuOS05LjEgMy42LTEuNSA3LjcuMyA5LjIgMy44IDEuNCAzLjYtLjMgNy43LTMuOSA5LjF6TTY5LjcgMTcuN2w4LjkgNC43VjkuM2wtOC45IDIuOGMtLjItLjMtLjUtLjYtLjktLjlMNzIuNCAwSDU5LjZsMy41IDExLjJjLS4zLjMtLjYuNS0uOS45bC04LjgtMi44djEzLjFsOC44LTQuN2MuMy4zLjYuNy45LjlsLTUgMTUuNHYuMWMtLjIuOC0uNCAxLjYtLjQgMi40IDAgNC4xIDMuMSA3LjUgNyA4LjFoLjJjLjMgMCAuNy4xIDEgLjEuNCAwIC43IDAgMS0uMWguMmM0LS42IDcuMS00LjEgNy4xLTguMSAwLS44LS4xLTEuNy0uNC0yLjRWMzRsLTUuMS0xNS40Yy40LS4yLjctLjYgMS0uOXpNNjYgOTIuOGMxNi45IDAgMzIuOCAxLjEgNDcuMSAzLjIgNC0xNi45IDguOS0yNi43IDE0LTMzLjVsLTkuNi0zLjRjMSA0LjkgMS4xIDcuMiAwIDEwLjItMS41LTEuNC0zLTQuMy00LjItOC43TDEwOC42IDc2YzIuOC0yIDUtMy4yIDcuNS0zLjMtNC40IDkuNC0xMCAxMS45LTEzLjYgMTEuMi00LjMtLjgtNi4zLTQuNi01LjYtNy45IDEtNC43IDUuNy01LjkgOC0uNSA0LjMtOC43LTMtMTEuNC03LjYtOC44IDcuMS03LjIgNy45LTEzLjUgMi4xLTIxLjEtOCA2LjEtOC4xIDEyLjMtNC41IDIwLjgtNC43LTUuNC0xMi4xLTIuNS05LjUgNi4yIDMuNC01LjIgNy45LTIgNy4yIDMuMS0uNiA0LjMtNi40IDcuOC0xMy41IDcuMi0xMC4zLS45LTEwLjktOC0xMS4yLTEzLjggMi41LS41IDcuMSAxLjggMTEgNy4zTDgwLjIgNjBjLTQuMSA0LjQtOCA1LjMtMTIuMyA1LjQgMS40LTQuNCA4LTExLjYgOC0xMS42SDU1LjVzNi40IDcuMiA3LjkgMTEuNmMtNC4yLS4xLTgtMS0xMi4zLTUuNGwxLjQgMTYuNGMzLjktNS41IDguNS03LjcgMTAuOS03LjMtLjMgNS44LS45IDEyLjgtMTEuMSAxMy44LTcuMi42LTEyLjktMi45LTEzLjUtNy4yLS43LTUgMy44LTguMyA3LjEtMy4xIDIuNy04LjctNC42LTExLjYtOS40LTYuMiAzLjctOC41IDMuNi0xNC43LTQuNi0yMC44LTUuOCA3LjYtNSAxMy45IDIuMiAyMS4xLTQuNy0yLjYtMTEuOS4xLTcuNyA4LjggMi4zLTUuNSA3LjEtNC4yIDguMS41LjcgMy4zLTEuMyA3LjEtNS43IDcuOS0zLjUuNy05LTEuOC0xMy41LTExLjIgMi41LjEgNC43IDEuMyA3LjUgMy4zbC00LjctMTUuNGMtMS4yIDQuNC0yLjcgNy4yLTQuMyA4LjctMS4xLTMtLjktNS4zIDAtMTAuMmwtOS41IDMuNGM1IDYuOSA5LjkgMTYuNyAxNCAzMy41IDE0LjgtMi4xIDMwLjgtMy4yIDQ3LjctMy4yeiIKICAgICAgICAgICAgPjwvcGF0aD4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbWFnZSBzcmM9Ii9hc3NldHMvaW1hZ2VzL2dvdnVrLWxvZ290eXBlLWNyb3duLnBuZyIgeGxpbms6aHJlZj0iIiBjbGFzcz0iZ292dWstaGVhZGVyX19sb2dvdHlwZS1jcm93bi1mYWxsYmFjay1pbWFnZSIgd2lkdGg9IjM2IiBoZWlnaHQ9IjMyIj48L2ltYWdlPgogICAgICAgICAgPC9zdmc+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iZ292dWstaGVhZGVyX19sb2dvdHlwZS10ZXh0Ij4KICAgICAgICAgICAgR09WLlVLCiAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX3Byb2R1Y3QtbmFtZSI+CiAgICAgICAgICBEaWdpdGFsIE1hcmtldHBsYWNlCiAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgICA8L2E+CiAgICA8L2Rpdj4KICAgIAogICAgPGRpdiBjbGFzcz0iZ292dWstaGVhZGVyX19jb250ZW50Ij4KCiAgICAKCiAgICAKICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiByb2xlPSJidXR0b24iIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX21lbnUtYnV0dG9uIGpzLWhlYWRlci10b2dnbGUiIGFyaWEtY29udHJvbHM9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IlNob3cgb3IgaGlkZSBUb3AgTGV2ZWwgTmF2aWdhdGlvbiI+TWVudTwvYnV0dG9uPgogICAgPG5hdj4KICAgICAgPHVsIGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iZ292dWstaGVhZGVyX19uYXZpZ2F0aW9uICIgYXJpYS1sYWJlbD0iVG9wIExldmVsIE5hdmlnYXRpb24iPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstaGVhZGVyX19uYXZpZ2F0aW9uLWl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9idXlpbmctYW5kLXNlbGxpbmctb24tdGhlLWRpZ2l0YWwtbWFya2V0cGxhY2UiPgogICAgICAgICAgICAgICAgR3VpZGFuY2UKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbmF2aWdhdGlvbi1pdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstaGVhZGVyX19saW5rIiBocmVmPSIvaGVscCI+CiAgICAgICAgICAgICAgICBIZWxwCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX25hdmlnYXRpb24taXRlbSI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbGluayIgaHJlZj0iL3VzZXIvbG9naW4iPgogICAgICAgICAgICAgICAgTG9nIGluCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgCiAgICAgIDwvdWw+CiAgICA8L25hdj4KICAgIAogICAgPC9kaXY+CiAgICAKICA8L2Rpdj4KPC9oZWFkZXI+CgoKICAgIAogICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay13aWR0aC1jb250YWluZXIiPgogICAgICAgIAogIAogICAgPGRpdiBjbGFzcz0iZ292dWstcGhhc2UtYmFubmVyIj4KICA8cCBjbGFzcz0iZ292dWstcGhhc2UtYmFubmVyX19jb250ZW50Ij48c3Ryb25nIGNsYXNzPSJnb3Z1ay10YWcgZ292dWstcGhhc2UtYmFubmVyX19jb250ZW50X190YWcgIj4KICBiZXRhCjwvc3Ryb25nPjxzcGFuIGNsYXNzPSJnb3Z1ay1waGFzZS1iYW5uZXJfX3RleHQiPgogICAgICBIZWxwIHVzIGltcHJvdmUgdGhlIERpZ2l0YWwgTWFya2V0cGxhY2UgLSA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2hlbHAiPnNlbmQgeW91ciBmZWVkYmFjazwvYT4KICAgIDwvc3Bhbj4KICA8L3A+CjwvZGl2PgogIAogIAo8ZGl2IGNsYXNzPSJnb3Z1ay1icmVhZGNydW1icyI+CiAgPG9sIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGlzdCI+CiAgCiAgICAKICAgIDxsaSBjbGFzcz0iZ292dWstYnJlYWRjcnVtYnNfX2xpc3QtaXRlbSI+CiAgICAgIDxhIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGluayIgaHJlZj0iLyI+RGlnaXRhbCBNYXJrZXRwbGFjZTwvYT4KICAgIDwvbGk+CiAgICAKICAKICAgIAogICAgPGxpIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGlzdC1pdGVtIj4KICAgICAgPGEgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcyI+U3VwcGxpZXIgb3Bwb3J0dW5pdGllczwvYT4KICAgIDwvbGk+CiAgICAKICAKICA8L29sPgo8L2Rpdj4KCgogICAgICAgIDxtYWluIGNsYXNzPSJnb3Z1ay1tYWluLXdyYXBwZXIgIiBpZD0ibWFpbi1jb250ZW50IiByb2xlPSJtYWluIj4KICAgICAgICAgIAogIAogICAgCiAgICAgIAogICAgCiAgCiAgCiAgICAKICAKICAKCgo8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1jb2x1bW4tZnVsbCI+CiAgICAKICAgIDxzZWN0aW9uCiAgICBkYXRhLW1vZHVsZT0iZG0tYmFubmVyIgogICAgcm9sZT0icmVnaW9uIgogICAgYXJpYS1sYWJlbD0iQXdhcmRlZCB0byBMdWNpZCBTdXBwb3J0IFNlcnZpY2VzIEx0ZCIKICAgIGNsYXNzPSJkbS1iYW5uZXIiCj4KICAgIDxoMgogICAgICAgIGNsYXNzPSJkbS1iYW5uZXJfX3RpdGxlIGRtLWJhbm5lcl9fdGl0bGUtLWxhcmdlIgogICAgPgogICAgICAgIEF3YXJkZWQgdG8gTHVjaWQgU3VwcG9ydCBTZXJ2aWNlcyBMdGQKICAgIDwvaDI+CiAgICAgICAgPGRpdiBjbGFzcz0iZG0tYmFubmVyX19ib2R5Ij4KICAgICAgICAgICAgCiAgICAgIFN0YXJ0IGRhdGU6IFRodXJzZGF5IDI3IEZlYnJ1YXJ5IDIwMjA8YnIgLz4KICAgICAgVmFsdWU6ICZwb3VuZDs5MCwwMDA8YnIvPgogICAgICBDb21wYW55IHNpemU6IFNNRQogICAgCiAgICAgICAgPC9kaXY+CiAgICAKPC9zZWN0aW9uPgogIDwvZGl2Pgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1jb2x1bW4tdHdvLXRoaXJkcyI+CiAgICA8c3BhbiBjbGFzcz0iZ292dWstY2FwdGlvbi1sIj5EZXBhcnRtZW50IGZvciBEaWdpdGFsLCBDdWx0dXJlLCBNZWRpYSAmYW1wOyBTcG9ydDwvc3Bhbj4KICAgIDxoMSBjbGFzcz0iZ292dWstaGVhZGluZy1sIj5FbmQgdXNlciBDb21wdXRlIGVuZ2luZWVyPC9oMT4KICAgIDxzcGFuIGRhdGEtbG90PSJkaWdpdGFsLXNwZWNpYWxpc3RzIj48L3NwYW4+CiAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1yb3cgZ292dWstIS1tYXJnaW4tYm90dG9tLTkiPgogIDxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtY29sdW1uLW9uZS10aGlyZCBhcHAtc3RhdC1ibG9jayIgaWQ9ImluY29tcGxldGUtYXBwbGljYXRpb25zIj4KICAgPGgyPgogICAgICA8c3BhbiBjbGFzcz0iZ292dWstIS1mb250LXNpemUtMzYgZ292dWstIS1kaXNwbGF5LWJsb2NrIj4zPC9zcGFuPgogICAgICA8c3Bhbj5JbmNvbXBsZXRlIGFwcGxpY2F0aW9uczwvc3Bhbj4KICAgPC9oMj4KICAgPHAgY2xhc3M9ImdvdnVrLWJvZHkgZ292dWstIS1mb250LXNpemUtMTYiPjMgU01FLCAwIGxhcmdlPC9wPgo8L2Rpdj4KPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1jb2x1bW4tb25lLXRoaXJkIGFwcC1zdGF0LWJsb2NrIiBpZD0iY29tcGxldGVkLWFwcGxpY2F0aW9ucyI+CiAgIDxoMj4KICAgICAgPHNwYW4gY2xhc3M9ImdvdnVrLSEtZm9udC1zaXplLTM2IGdvdnVrLSEtZGlzcGxheS1ibG9jayI+Njwvc3Bhbj4KICAgICAgPHNwYW4+Q29tcGxldGVkIGFwcGxpY2F0aW9uczwvc3Bhbj4KICAgPC9oMj4KICAgPHAgY2xhc3M9ImdvdnVrLWJvZHkgZ292dWstIS1mb250LXNpemUtMTYiPjYgU01FLCAwIGxhcmdlPC9wPgo8L2Rpdj4KCjwvZGl2PgoKPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtY29sdW1uLWZ1bGwiPgogICAgCgo8aDIgY2xhc3M9ImdvdnVrLXZpc3VhbGx5LWhpZGRlbiI+SW1wb3J0YW50IGRhdGVzPC9oMj4KCgoKICAKCiAgCgogIAo8ZGwgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QtLXRvcC1ib3JkZXIgZ292dWstIS1tYXJnaW4tYm90dG9tLTgiIGlkPSJvcHBvcnR1bml0eS1pbXBvcnRhbnQtZGF0ZXMiPgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBQdWJsaXNoZWQKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBNb25kYXkgMjMgRGVjZW1iZXIgMjAxOQogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBEZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9ucwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFdlZG5lc2RheSAyNSBEZWNlbWJlciAyMDE5IGF0IDExOjU5cG0gR01UCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIENsb3NpbmcgZGF0ZSBmb3IgYXBwbGljYXRpb25zCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgTW9uZGF5IDMwIERlY2VtYmVyIDIwMTkgYXQgMTE6NTlwbSBHTVQKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCgogIDxoMiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0xIiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+T3ZlcnZpZXc8L2gyPgogIAogIAoKCiAgCgogIAoKICAKCiAgCgogIAoKICAKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFNwZWNpYWxpc3Qgcm9sZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIERhdGEgZW5naW5lZXIKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgU3VtbWFyeSBvZiB0aGUgd29yawogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRoZSBEZXBhcnRtZW50IGZvciBEaWdpdGFsLCBDdWx0dXJlLCBNZWRpYSAmYW1wOyBTcG9ydCBpcyBsb29raW5nIGZvciBhbiBleHBlcmllbmNlZCBFVUMgZW5naW5lZXIgdG8gaGVscCBzdXBwb3J0IHRoZSBkZXBhcnRtZW50IGRlbGl2ZXIgaXRzIGFtYml0aW91cyBJVCBUcmFuc2Zvcm1hdGlvbiBwcm9ncmFtbWUgaW4gMjAyMC4gVGhlIHByb2dyYW1tZSBicm9hZGx5IGxvb2tzIHRvIHJlbmV3IGV4c2lzdGluZyBpbmZyYXN0cnVjdHVyZSwgZGV2aWNlcyBhbmQgc2VydmljZXMsIGFjcm9zcyBhIHVzZXIgYmFzZSBvZiBjLjE0MDAuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIExhdGVzdCBzdGFydCBkYXRlCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgTW9uZGF5IDEzIEphbnVhcnkgMjAyMAogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBFeHBlY3RlZCBjb250cmFjdCBsZW5ndGgKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICAxMiBtb250aHMKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgTG9jYXRpb24KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBMb25kb24KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgT3JnYW5pc2F0aW9uIHRoZSB3b3JrIGlzIGZvcgogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIERlcGFydG1lbnQgZm9yIERpZ2l0YWwsIEN1bHR1cmUsIE1lZGlhICZhbXA7IFNwb3J0CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIE1heGltdW0gZGF5IHJhdGUKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBAwqMzNTAgc3ViamVjdCB0byBleHBlcmllbmNlCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCjwvZGw+CgogIDxoMiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0yIiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+QWJvdXQgdGhlIHdvcms8L2gyPgogIAogIAoKCiAgCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgRWFybHkgbWFya2V0IGVuZ2FnZW1lbnQKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBuL2EKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgV2hvIHRoZSBzcGVjaWFsaXN0IHdpbGwgd29yayB3aXRoCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgUm9sZSByZXBvcnRzIHRvIHRoZSBIZWFkLCBJVCwgYW5kIHdpbGwgd29yayBhY3Jvc3MgdGhlIElUIHRlYW0sIHdvcmtpbmcgY2xvc2VseSB3aXRoIFdvcmtzdHJlYW0vIERlbGl2ZXJ5IGxlYWRzLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBXaGF0IHRoZSBzcGVjaWFsaXN0IHdpbGwgd29yayBvbgogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIEJ1aWxkL1ByZXAgYWxsIGRldmljZXMgdG8gYmUgcm9sbGVkIG91dCA8YnI+RGVwbG95bWVudCBvZiBsYXB0b3BzIGFuZCBNb2JpbGUgcGhvbmVzIHRvIGVuZCB1c2VycyA8YnI+RWFybHkgbGlmZSBzdXBwb3J0IC8gQmFzaWMgZW5kIHVzZXIgdHJhaW5pbmcvb3JpZW50YXRpb248YnI+R2VuZXJhbGx5IHN1cHBvcnQgYWxsIG1pZ3JhdGlvbiBhY3Rpdml0aWVzCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCjwvZGw+CgogIDxoMiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0zIiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+V29yayBzZXR1cDwvaDI+CiAgCiAgCgoKICAKCiAgCgogIAo8ZGwgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QtLXRvcC1ib3JkZXIgZ292dWstIS1tYXJnaW4tYm90dG9tLTgiPgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBBZGRyZXNzIHdoZXJlIHRoZSB3b3JrIHdpbGwgdGFrZSBwbGFjZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDEwMCBQYXJsaWFtZW50IFN0cmVldAogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBXb3JraW5nIGFycmFuZ2VtZW50cwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFdvcmsgd2lsbCBiZSBjdXN0b21lciBpbnRlcmFjdGluZyBhbmQgd2lsbCByZXF1aXJlIGEgcHJlc2VuY2Ugb25zaXRlIDUgZGF5cyBhIHdlZWssIHRoaXMgbWF5IHZhcnkgYmFzZWQgb24gYWN0dWFsIGFjdGl2aXR5IGFuZCB3aGVyZSBmYWNlIHRvIGZhY2UgaW50ZXJhY3Rpb24gaXMgcmVxdWlyZWQKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgU2VjdXJpdHkgY2xlYXJhbmNlCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgTXVzdCBob2xkIGEgdmFsaWQgU0MgY2xlYXJhbmNlCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCjwvZGw+CgogIDxoMiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy00IiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+QWRkaXRpb25hbCBpbmZvcm1hdGlvbjwvaDI+CiAgCiAgCgoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgQWRkaXRpb25hbCB0ZXJtcyBhbmQgY29uZGl0aW9ucwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIHN0YW5kYXJkIGNvbnRyYWN0IFQmYW1wO0NzCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCjwvZGw+CgogIDxoMiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy01IiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+U2tpbGxzIGFuZCBleHBlcmllbmNlPC9oMj4KICAKICA8cCBjbGFzcz0iZ292dWstYm9keSBnb3Z1ay0hLW1hcmdpbi10b3AtMyI+QnV5ZXJzIHdpbGwgdXNlIHRoZSBlc3NlbnRpYWwgYW5kIG5pY2UtdG8taGF2ZSBza2lsbHMgYW5kIGV4cGVyaWVuY2UgdG8gaGVscCB0aGVtIGV2YWx1YXRlIHN1cHBsaWVyc+KAmSB0ZWNobmljYWwgY29tcGV0ZW5jZS48L3A+CiAgCiAgCiAgCgoKICAKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEVzc2VudGlhbCBza2lsbHMgYW5kIGV4cGVyaWVuY2UKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICA8dWwgY2xhc3M9ImdvdnVrLWxpc3QgZ292dWstbGlzdC0tYnVsbGV0Ij4KICAgICAgICAgIDxsaT5Xb3Jrc3BhY2UgT25lIChVRU0pIGV4cGVyaWVuY2U8L2xpPgogICAgICAgICAgPGxpPldpbmRvd3MgMTAgQnVpbGQsIGRlcGxveSAmYW1wOyBzdXBwb3J0PC9saT4KICAgICAgICAgIDxsaT5NYWMgT1MgQnVpbGQgJmFtcDsgZGVwbG95ICZhbXA7IHN1cHBvcnQ8L2xpPgogICAgICAgICAgPGxpPk11c3QgaG9sZCBWYWxpZCBTQyBjbGVhcmFuY2U8L2xpPgogICAgICAgICAgPGxpPlVuZGVyc3RhbmRpbmcgb2YgU3VwcG9ydCBtb2RlbHMgYW5kIHdvcmtmbG93czwvbGk+CiAgICAgICAgICA8bGk+U2VydmljZSBOT1cgZXhwZXJpZW5jZTwvbGk+CiAgICAgICAgPC91bD4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgTmljZS10by1oYXZlIHNraWxscyBhbmQgZXhwZXJpZW5jZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIEV4cGVyaWVuY2Ugb2YgV29ya2luZyBXaXRoIE5DU0MgRVVDIGd1aWRlbGluZXMKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCiAgPGgyIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTYiIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0gYXBwLXN1bW1hcnktbGlzdC1oZWFkaW5nIj5Ib3cgc3VwcGxpZXJzIHdpbGwgYmUgZXZhbHVhdGVkPC9oMj4KICAKICA8cCBjbGFzcz0iZ292dWstYm9keSBnb3Z1ay0hLW1hcmdpbi10b3AtMyI+QWxsIHN1cHBsaWVycyB3aWxsIGJlIGFza2VkIHRvIHByb3ZpZGUgYSB3b3JrIGhpc3RvcnkuPC9wPgogIAogIAoKCiAgCgogIAoKICAKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEhvdyBtYW55IHNwZWNpYWxpc3RzIHRvIGV2YWx1YXRlCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgMwogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBDdWx0dXJhbCBmaXQgY3JpdGVyaWEKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICA8dWwgY2xhc3M9ImdvdnVrLWxpc3QgZ292dWstbGlzdC0tYnVsbGV0Ij4KICAgICAgICAgIDxsaT5Xb3JrIGFzIGEgdGVhbSB3aXRoIG91ciBvcmdhbmlzYXRpb24gYW5kIG90aGVyIHN1cHBsaWVyczwvbGk+CiAgICAgICAgICA8bGk+QmUgdHJhbnNwYXJlbnQgYW5kIGNvbGxhYm9yYXRpdmUgd2hlbiBtYWtpbmcgZGVjaXNpb25zPC9saT4KICAgICAgICAgIDxsaT5IYXZlIGEgbm8tYmxhbWUgY3VsdHVyZSBhbmQgZW5jb3VyYWdlIHBlb3BsZSB0byBsZWFybiBmcm9tIHRoZWlyIG1pc3Rha2VzPC9saT4KICAgICAgICAgIDxsaT5UYWtlIHJlc3BvbnNpYmlsaXR5IGZvciB0aGVpciB3b3JrPC9saT4KICAgICAgICAgIDxsaT5TaGFyZSBrbm93bGVkZ2UgYW5kIGV4cGVyaWVuY2Ugd2l0aCBvdGhlciB0ZWFtIG1lbWJlcnM8L2xpPgogICAgICAgICAgPGxpPkNoYWxsZW5nZSB0aGUgc3RhdHVzIHF1bzwvbGk+CiAgICAgICAgICA8bGk+QmUgY29tZm9ydGFibGUgc3RhbmRpbmcgdXAgZm9yIHRoZWlyIGRpc2NpcGxpbmU8L2xpPgogICAgICAgICAgPGxpPkNhbiB3b3JrIHdpdGggY2xpZW50cyB3aXRoIGxvdyB0ZWNobmljYWwgZXhwZXJ0aXNlPC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBBZGRpdGlvbmFsIGFzc2Vzc21lbnQgbWV0aG9kcwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDx1bCBjbGFzcz0iZ292dWstbGlzdCBnb3Z1ay1saXN0LS1idWxsZXQiPgogICAgICAgICAgPGxpPlJlZmVyZW5jZTwvbGk+CiAgICAgICAgICA8bGk+SW50ZXJ2aWV3PC9saT4KICAgICAgICAgIDxsaT5TY2VuYXJpbyBvciB0ZXN0PC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBFdmFsdWF0aW9uIHdlaWdodGluZwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0wIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS0xIj5UZWNobmljYWwgY29tcGV0ZW5jZTwvcD4KICAgICAgICA8ZGl2PjYwJTwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0zIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS0xIj5DdWx0dXJhbCBmaXQ8L3A+CiAgICAgICAgPGRpdj4xMCU8L2Rpdj4KICAgICAgICA8cCBjbGFzcz0iZ292dWstYm9keSBnb3Z1ay0hLW1hcmdpbi10b3AtMyBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tMSI+UHJpY2U8L3A+CiAgICAgICAgPGRpdj4zMCU8L2Rpdj4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCiAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1jb2x1bW4tZnVsbCI+CiAgICAKCgoKPGgyIGlkPSJjbGFyaWZpY2F0aW9uLXF1ZXN0aW9ucyIgY2xhc3M9ImdvdnVrLWhlYWRpbmctbSBhcHAtc3VtbWFyeS1saXN0LWhlYWRpbmciPlF1ZXN0aW9ucyBhc2tlZCBieSBzdXBwbGllcnM8L2gyPgoKCgoKICAKCiAgCgogIAoKICAKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIDEuIERvZXMgdGhlIMKjMzUwIGluY2x1ZGUgQWdlbmN5IGZlZSYjMzk7cz8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICB0aGUgcHVibGlzaGVkIGRheSByYXRlIGluY2x1ZGVzIGFueSBhc3NvY2lhdGVkIGFnZW5jeSBmZWVzIGJ1dCBleGNsdWRlcyBWQVQuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIDIuIElzIHRoZXJlIGFuIGluY3VtYmVudCBmb3IgdGhpcyBvcHBvcnR1bml0eT8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBUaGlzIGlzIGEgbmV3IHJvbGUgaW4gdGhlIHRlYW0gYW5kIHRoZXJlIGlzIG5vIGN1cnJlbnQgaW5jdW1iZW50CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIDMuIEluIG9yIG91dCBvZiBJUjM1PwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRoaXMgaXMgYSBuZXcgcm9sZSB0byBoZWxwIHN1cHBvcnQgdGhlIGRlbGl2ZXJ5IG9mIHRoZSBJVCB0cmFuc2Zvcm1hdGlvbiBwcm9ncmFtbWUgIGFsbCB0YXggcXVlcmllcyBhcmUgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBuYW1lZCBzcG9uc29yLiBEQ01TIGhhcyBjb21wbGV0ZWQgaXRzIGR1ZSBkaWxpZ2VuY2Ugb24gdGhlIHJvbGUgYW5kIGhhcyBkZWVtZWQgaXQgb3V0c2lkZSBvZiBzY29wZSBvZiBJUjM1LgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICA0LiBUaGUgYnVkZ2V0IHNlZW1zIGxvdywgZXNwZWNpYWxseSBmb3IgU0MgY2xlYXJlZCBjYW5kaWRhdGVzLiBBcmUgeW91IGFibGUgdG8gaW5jcmVhc2UgdGhpcz8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBUaGUgcmVxdWlyZW1lbnQgY2xlYXJseSBzdGF0ZXMgdGhlIGJ1ZGdldCBhbmQgdGhpcyBpcyBpbiBsaW5lIHdpdGggdGhlIFNGSUEgcmF0ZSBjYXJkLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICA1LiBXaGF0IGlzIHRoZSBzY2hlZHVsZSBmb3Igc2hvcnRsaXN0aW5nIGFuZCBpbnRlcnZpZXcgZm9yIHRoaXMgcm9sZT8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBDYW5kaWRhdGVzIHdpbGwgYmUgc2hvcnRsaXN0ZWQgYW5kIG5vdGlmaWVkIG9uIHRoZSAybmQgSmFudWFyeSwgd2l0aCBpbnRlcnZpZXdzIHNjaGVkdWxlZCBmcm9tIHRoZSAzcmQgSmFudWFyeS4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCgoKICA8L2Rpdj4KPC9kaXY+CgoKCgoKICAgICAgICA8L21haW4+CiAgICAgIDwvZGl2PgogICAgCgogICAgCiAgPGZvb3RlciBjbGFzcz0iZ292dWstZm9vdGVyICIgcm9sZT0iY29udGVudGluZm8iPgogIDxkaXYgY2xhc3M9ImdvdnVrLXdpZHRoLWNvbnRhaW5lciAiPgogICAgCiAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbmF2aWdhdGlvbiI+CiAgICAgICAgCiAgICAgICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX3NlY3Rpb24iPgogICAgICAgICAgICA8aDIgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faGVhZGluZyBnb3Z1ay1oZWFkaW5nLW0iPkFib3V0IERpZ2l0YWwgTWFya2V0cGxhY2U8L2gyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdCAiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iL2hlbHAiPgogICAgICAgICAgICAgICAgICAgICAgICBDb250YWN0CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1tYXJrZXRwbGFjZS1idXllcnMtZ3VpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICBTZXJ2aWNlcyB5b3UgY2FuIGJ1eQogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtbWFya2V0cGxhY2Utc3VwcGxpZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgU2VydmljZXMgeW91IGNhbiBzZWxsCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2Nyb3duLWNvbW1lcmNpYWwtc2VydmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IENyb3duIENvbW1lcmNpYWwgU2VydmljZXMKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9nb3Zlcm5tZW50L29yZ2FuaXNhdGlvbnMvZ292ZXJubWVudC1kaWdpdGFsLXNlcnZpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICBBYm91dCBHb3Zlcm5tZW50IERpZ2l0YWwgU2VydmljZXMKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Ii9nLWNsb3VkL3N1cHBsaWVycyI+CiAgICAgICAgICAgICAgICAgICAgICAgIEctQ2xvdWQgc3VwcGxpZXIgQSB0byBaCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAKICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgPGRpdiBjbGFzcz0iZ292dWstZm9vdGVyX19zZWN0aW9uIj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2hlYWRpbmcgZ292dWstaGVhZGluZy1tIj5HdWlkYW5jZSBmb3IgdXNpbmcgRGlnaXRhbCBNYXJrZXRwbGFjZTwvaDI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIAogICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0ICI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZy1jbG91ZC1zdXBwbGllcnMtZ3VpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBseWluZyB0byBzZWxsIG9uIHRoZSBHLUNsb3VkIGZyYW1ld29yawogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzLXN1cHBsaWVycy1ndWlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFwcGx5aW5nIHRvIHNlbGwgb24gdGhlIERPUyBmcmFtZXdvcmsKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9ob3ctdG8tc2VsbC15b3VyLWRpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzLXNlcnZpY2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgUmVzcG9uZGluZyB0byBidXllciByZXF1aXJlbWVudHMgb24gdGhlIERPUyBmcmFtZXdvcmsKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9nLWNsb3VkLWJ1eWVycy1ndWlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEJ1eWluZyBvbiB0aGUgRy1DbG91ZCBmcmFtZXdvcmsKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1idXllcnMtZ3VpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICBCdXlpbmcgb24gdGhlIERPUyBmcmFtZXdvcmsKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS90aGUtY3Jvd24taG9zdGluZy1kYXRhLWNlbnRyZXMtZnJhbWV3b3JrLW9uLXRoZS1kaWdpdGFsLW1hcmtldHBsYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQnV5aW5nIG9uIHRoZSBDcm93biBIb3N0aW5nIGZyYW1ld29yawogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgCiAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgPC9kaXY+CiAgICAgIDxociBjbGFzcz0iZ292dWstZm9vdGVyX19zZWN0aW9uLWJyZWFrIj4KICAgIAogICAgPGRpdiBjbGFzcz0iZ292dWstZm9vdGVyX19tZXRhIj4KICAgICAgPGRpdiBjbGFzcz0iZ292dWstZm9vdGVyX19tZXRhLWl0ZW0gZ292dWstZm9vdGVyX19tZXRhLWl0ZW0tLWdyb3ciPgogICAgICAgIAogICAgICAgICAgPGgyIGNsYXNzPSJnb3Z1ay12aXN1YWxseS1oaWRkZW4iPlN1cHBvcnQgbGlua3M8L2gyPgogICAgICAgICAgCiAgICAgICAgICAgIDx1bCBjbGFzcz0iZ292dWstZm9vdGVyX19pbmxpbmUtbGlzdCI+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faW5saW5lLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Ii90ZXJtcy1hbmQtY29uZGl0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgVGVybXMgYW5kIGNvbmRpdGlvbnMKICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19pbmxpbmUtbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iL2Nvb2tpZXMiPgogICAgICAgICAgICAgICAgICAgIENvb2tpZXMKICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19pbmxpbmUtbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iL3ByaXZhY3ktbm90aWNlIj4KICAgICAgICAgICAgICAgICAgICBQcml2YWN5IG5vdGljZQogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIAogICAgICAgICAgICA8L3VsPgogICAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ292dWstZm9vdGVyX19tZXRhLWN1c3RvbSI+CiAgICAgICAgICAgICAgQnVpbHQgYnkgdGhlIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9nb3Zlcm5tZW50L29yZ2FuaXNhdGlvbnMvZ292ZXJubWVudC1kaWdpdGFsLXNlcnZpY2UiIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiPkdvdmVybm1lbnQgRGlnaXRhbCBTZXJ2aWNlPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIAogICAgICAgIAogICAgICAgIDxzdmcKICAgICAgICAgIHJvbGU9InByZXNlbnRhdGlvbiIKICAgICAgICAgIGZvY3VzYWJsZT0iZmFsc2UiCiAgICAgICAgICBjbGFzcz0iZ292dWstZm9vdGVyX19saWNlbmNlLWxvZ28iCiAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICB2aWV3Ym94PSIwIDAgNDgzLjIgMTk1LjciCiAgICAgICAgICBoZWlnaHQ9IjE3IgogICAgICAgICAgd2lkdGg9IjQxIgogICAgICAgID4KICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgIGZpbGw9ImN1cnJlbnRDb2xvciIKICAgICAgICAgICAgZD0iTTQyMS41IDE0Mi44Vi4xbC01MC43IDMyLjN2MTYxLjFoMTEyLjR2LTUwLjd6bS0xMjIuMy05LjZBNDcuMTIgNDcuMTIgMCAwIDEgMjIxIDk3LjhjMC0yNiAyMS4xLTQ3LjEgNDcuMS00Ny4xIDE2LjcgMCAzMS40IDguNyAzOS43IDIxLjhsNDIuNy0yNy4yQTk3LjYzIDk3LjYzIDAgMCAwIDI2OC4xIDBjLTM2LjUgMC02OC4zIDIwLjEtODUuMSA0OS43QTk4IDk4IDAgMCAwIDk3LjggMEM0My45IDAgMCA0My45IDAgOTcuOHM0My45IDk3LjggOTcuOCA5Ny44YzM2LjUgMCA2OC4zLTIwLjEgODUuMS00OS43YTk3Ljc2IDk3Ljc2IDAgMCAwIDE0OS42IDI1LjRsMTkuNCAyMi4yaDN2LTg3LjhoLTgwbDI0LjMgMjcuNXpNOTcuOCAxNDVjLTI2IDAtNDcuMS0yMS4xLTQ3LjEtNDcuMXMyMS4xLTQ3LjEgNDcuMS00Ny4xIDQ3LjIgMjEgNDcuMiA0N1MxMjMuOCAxNDUgOTcuOCAxNDUiCiAgICAgICAgICAvPgogICAgICAgIDwvc3ZnPgogICAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpY2VuY2UtZGVzY3JpcHRpb24iPgogICAgICAgICAgQWxsIGNvbnRlbnQgaXMgYXZhaWxhYmxlIHVuZGVyIHRoZQogICAgICAgICAgPGEKICAgICAgICAgICAgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIKICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cubmF0aW9uYWxhcmNoaXZlcy5nb3YudWsvZG9jL29wZW4tZ292ZXJubWVudC1saWNlbmNlL3ZlcnNpb24vMy8iCiAgICAgICAgICAgIHJlbD0ibGljZW5zZSIKICAgICAgICAgID5PcGVuIEdvdmVybm1lbnQgTGljZW5jZSB2My4wPC9hPiwgZXhjZXB0IHdoZXJlIG90aGVyd2lzZSBzdGF0ZWQKICAgICAgICA8L3NwYW4+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX21ldGEtaXRlbSI+CiAgICAgICAgPGEKICAgICAgICAgIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsgZ292dWstZm9vdGVyX19jb3B5cmlnaHQtbG9nbyIKICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3Lm5hdGlvbmFsYXJjaGl2ZXMuZ292LnVrL2luZm9ybWF0aW9uLW1hbmFnZW1lbnQvcmUtdXNpbmctcHVibGljLXNlY3Rvci1pbmZvcm1hdGlvbi91ay1nb3Zlcm5tZW50LWxpY2Vuc2luZy1mcmFtZXdvcmsvY3Jvd24tY29weXJpZ2h0LyIKICAgICAgICA+wqkgQ3Jvd24gY29weXJpZ2h0PC9hPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L2Zvb3Rlcj4KCgogICAgCiAgPHNjcmlwdCBzcmM9Ii9zdGF0aWMvamF2YXNjcmlwdHMvYXBwbGljYXRpb24uanM/MDY0YzNiZjdkNTllYzk3MjE1OTE4ZTU1M2IzMGUyNDkiPjwvc2NyaXB0PgogIAoKICA8L2JvZHk+CjwvaHRtbD4=
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:58:47 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities?q=&statusOpenClosed=open
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '50825'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:16 GMT
      Dm-Request-Id:
      - 7f0849065bd41650
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:16 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZA.ytvUGd-StUam3qB80VVh7CmGOBY;
        Expires=Thu, 23-Jul-2020 09:59:16 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 7f0849065bd41650
      X-B3-Traceid:
      - 7f0849065bd41650
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 4570f70b-1f13-4d44-4784-2e604573b6fb
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 2d8c1be3a836cdc603d84dd4ca5e1234.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - p1UV45cz4lk_Kjn7Ljh57rW19tQxkAhVOPNqYvGwjeh8Po-M63iXvA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:16 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12757
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZA.ytvUGd-StUam3qB80VVh7CmGOBY
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36169'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:17 GMT
      Dm-Request-Id:
      - 02bfb57af0cd1512
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:17 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZQ.98L5k7mTGNOtg_J2U6xYiJboWAM;
        Expires=Thu, 23-Jul-2020 09:59:17 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 02bfb57af0cd1512
      X-B3-Traceid:
      - 02bfb57af0cd1512
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 57c48108-11d2-48af-4ce3-0aeefbd088fa
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 271d531da7ba45d7dadd2b5c9f93148d.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - oH0mxmQ0U-THBOBFfva1DLBS3I7b7A2PrHWQfM85-JYcTWgRmCHelA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        CjwhRE9DVFlQRSBodG1sPgo8aHRtbCBsYW5nPSJlbiIgY2xhc3M9ImdvdnVrLXRlbXBsYXRlICI+CiAgPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4KICAgIDx0aXRsZT4KICBGQ08gQ29uc3VsYXIgSW50ZWxsaWdlbnQgQ2xpZW50IEZ1bmN0aW9uIC0gVGVjaG5pY2FsIEFyY2hpdGVjdHVyZSAmYW1wOyBCdXNpbmVzcyBBbmFseXNpcyAtIERpZ2l0YWwgTWFya2V0cGxhY2UKPC90aXRsZT4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSwgdmlld3BvcnQtZml0PWNvdmVyIj4KICAgIDxtZXRhIG5hbWU9InRoZW1lLWNvbG9yIiBjb250ZW50PSIjMGIwYzBjIiAvPiAKICAgIAogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIiAvPgoKICAgIAogICAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIHNpemVzPSIxNngxNiAzMngzMiA0OHg0OCIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZmF2aWNvbi5pY28iIHR5cGU9ImltYWdlL3gtaWNvbiIgLz4KICAgICAgPGxpbmsgcmVsPSJtYXNrLWljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdnVrLW1hc2staWNvbi5zdmciIGNvbG9yPSIjMGIwYzBjIj4gCiAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE4MHgxODAiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdnVrLWFwcGxlLXRvdWNoLWljb24tMTgweDE4MC5wbmciPgogICAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSIxNjd4MTY3IiBocmVmPSIvc3RhdGljL2ltYWdlcy9nb3Z1ay1hcHBsZS10b3VjaC1pY29uLTE2N3gxNjcucG5nIj4KICAgICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTUyeDE1MiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZ292dWstYXBwbGUtdG91Y2gtaWNvbi0xNTJ4MTUyLnBuZyI+CiAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZ292dWstYXBwbGUtdG91Y2gtaWNvbi5wbmciPgogICAgCgogICAgCiAgCgoKCgoKCgoKICAKICA8bWV0YSBuYW1lPSJnb29nbGUtc2l0ZS12ZXJpZmljYXRpb24iIGNvbnRlbnQ9IlRLR1NHWm5mSHB4MS1sS090aEkxN0FOdHdrN2Z6M0Y0U2JyNzdJMHBwTzAiPgoKICA8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2FwcGxpY2F0aW9uLmNzcz83NTA3YTkwOWVkYzZkNzg1MzkyZTZkMGVlNzliZjljYyIgLz4KICAKCiAgICAKICAgIAogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSIvc3RhdGljL2ltYWdlcy9nb3Z1ay1vcGVuZ3JhcGgtaW1hZ2UucG5nIj4KICA8L2hlYWQ+CiAgPGJvZHkgY2xhc3M9ImdvdnVrLXRlbXBsYXRlX19ib2R5ICI+CiAgICA8c2NyaXB0PmRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gKChkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSkgPyBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSArICcganMtZW5hYmxlZCcgOiAnanMtZW5hYmxlZCcpOzwvc2NyaXB0PgogICAgCgogICAgCiAgICAgIDxhIGhyZWY9IiNtYWluLWNvbnRlbnQiIGNsYXNzPSJnb3Z1ay1za2lwLWxpbmsiPlNraXAgdG8gbWFpbiBjb250ZW50PC9hPgogICAgCgogICAgCiAgCiAgCgoKCgo8ZGl2IGlkPSJkbS1jb29raWUtYmFubmVyIiBjbGFzcz0iZG0tY29va2llLWJhbm5lciBnb3Z1ay13aWR0aC1jb250YWluZXIiIGRhdGEtbW9kdWxlPSJkbS1jb29raWUtYmFubmVyIiByb2xlPSJyZWdpb24iIGFyaWEtZGVzY3JpYmVkYnk9ImRtLWNvb2tpZS1iYW5uZXJfX2hlYWRpbmciPgogIDxkaXYgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXJfX3dyYXBwZXIiPgogICAgPGgyIGNsYXNzPSJkbS1jb29raWUtYmFubmVyX19oZWFkaW5nIGdvdnVrLWhlYWRpbmctbSIgaWQ9ImRtLWNvb2tpZS1iYW5uZXJfX2hlYWRpbmciPgogICAgICBDYW4gd2Ugc3RvcmUgYW5hbHl0aWNzIGNvb2tpZXMgb24geW91ciBkZXZpY2U/CiAgICA8L2gyPgogICAgPHAgY2xhc3M9ImdvdnVrLWJvZHkiPgogICAgICBBbmFseXRpY3MgY29va2llcyBoZWxwIHVzIHVuZGVyc3RhbmQgaG93IG91ciB3ZWJzaXRlIGlzIGJlaW5nIHVzZWQuCiAgICA8L3A+CiAgICA8ZGl2IGNsYXNzPSJkbS1jb29raWUtYmFubmVyX19idXR0b25zIj4KICAgICAgPGJ1dHRvbiBjbGFzcz0iZ292dWstYnV0dG9uIGRtLWNvb2tpZS1iYW5uZXJfX2J1dHRvbiBkbS1jb29raWUtYmFubmVyX19idXR0b24tLWFjY2VwdCIgdHlwZT0ic3VibWl0IiBkYXRhLWFjY2VwdC1jb29raWVzPSJ0cnVlIiBhcmlhLWRlc2NyaWJlZGJ5PSJkbS1jb29raWUtYmFubmVyX19oZWFkaW5nIj4KICAgICAgICBZZXM8c3BhbiBjbGFzcz0iZ292dWstdmlzdWFsbHktaGlkZGVuIj4sIERpZ2l0YWwgTWFya2V0cGxhY2UgY2FuIHN0b3JlIGFuYWx5dGljcyBjb29raWVzIG9uIHlvdXIgZGV2aWNlPC9zcGFuPgogICAgICA8L2J1dHRvbj4KICAgICAgPGJ1dHRvbiBjbGFzcz0iZ292dWstYnV0dG9uIGRtLWNvb2tpZS1iYW5uZXJfX2J1dHRvbiBkbS1jb29raWUtYmFubmVyX19idXR0b24tLXJlamVjdCIgdHlwZT0ic3VibWl0IiBkYXRhLWFjY2VwdC1jb29raWVzPSJmYWxzZSIgYXJpYS1kZXNjcmliZWRieT0iZG0tY29va2llLWJhbm5lcl9faGVhZGluZyI+CiAgICAgICAgTm88c3BhbiBjbGFzcz0iZ292dWstdmlzdWFsbHktaGlkZGVuIj4sIERpZ2l0YWwgTWFya2V0cGxhY2UgY2Fubm90IHN0b3JlIGFuYWx5dGljcyBjb29raWVzIG9uIHlvdXIgZGV2aWNlPC9zcGFuPgogICAgICA8L2J1dHRvbj4KICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsgZG0tY29va2llLWJhbm5lcl9fbGluayIgaHJlZj0iL2Nvb2tpZXMiPkhvdyBEaWdpdGFsIE1hcmtldHBsYWNlIHVzZXMgY29va2llczwvYT4KICAgIDwvZGl2PgogIDwvZGl2PgoKICA8ZGl2IGNsYXNzPSJkbS1jb29raWUtYmFubmVyX19jb25maXJtYXRpb24iIHRhYmluZGV4PSItMSI+CiAgICA8cCBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9fY29uZmlybWF0aW9uLW1lc3NhZ2UgZ292dWstYm9keSI+CiAgICAgIFlvdSBjYW4gPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii91c2VyL2Nvb2tpZS1zZXR0aW5ncyI+Y2hhbmdlIHlvdXIgY29va2llIHNldHRpbmdzPC9hPiBhdCBhbnkgdGltZS4KICAgIDwvcD4KICAgIDxidXR0b24gY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXJfX2hpZGUtYnV0dG9uIGdvdnVrLWxpbmsiIGRhdGEtaGlkZS1jb29raWUtYmFubmVyPSJ0cnVlIiByb2xlPSJsaW5rIj5IaWRlPC9idXR0b24+CiAgPC9kaXY+CjwvZGl2PgoKICAKCgoKCgogIAogIAoKCgogIAoKPGhlYWRlciBjbGFzcz0iZ292dWstaGVhZGVyICIgcm9sZT0iYmFubmVyIiBkYXRhLW1vZHVsZT0iaGVhZGVyIj4KICA8ZGl2IGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2NvbnRhaW5lciBnb3Z1ay13aWR0aC1jb250YWluZXIiPgoKICAgIDxkaXYgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbG9nbyI+CiAgICAgIDxhIGhyZWY9Ii8iIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xpbmsgZ292dWstaGVhZGVyX19saW5rLS1ob21lcGFnZSI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImdvdnVrLWhlYWRlcl9fbG9nb3R5cGUiPgogICAgICAgICAgCiAgICAgICAgICA8c3ZnCiAgICAgICAgICAgIHJvbGU9InByZXNlbnRhdGlvbiIKICAgICAgICAgICAgZm9jdXNhYmxlPSJmYWxzZSIKICAgICAgICAgICAgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbG9nb3R5cGUtY3Jvd24iCiAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgdmlld2JveD0iMCAwIDEzMiA5NyIKICAgICAgICAgICAgaGVpZ2h0PSIzMiIKICAgICAgICAgICAgd2lkdGg9IjM2IgogICAgICAgICAgPgogICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgIGZpbGw9ImN1cnJlbnRDb2xvciIgZmlsbC1ydWxlPSJldmVub2RkIgogICAgICAgICAgICAgIGQ9Ik0yNSAzMC4yYzMuNSAxLjUgNy43LS4yIDkuMS0zLjcgMS41LTMuNi0uMi03LjgtMy45LTkuMi0zLjYtMS40LTcuNi4zLTkuMSAzLjktMS40IDMuNS4zIDcuNSAzLjkgOXpNOSAzOS41YzMuNiAxLjUgNy44LS4yIDkuMi0zLjcgMS41LTMuNi0uMi03LjgtMy45LTkuMS0zLjYtMS41LTcuNi4yLTkuMSAzLjgtMS40IDMuNS4zIDcuNSAzLjggOXpNNC40IDU3LjJjMy41IDEuNSA3LjctLjIgOS4xLTMuOCAxLjUtMy42LS4yLTcuNy0zLjktOS4xLTMuNS0xLjUtNy42LjMtOS4xIDMuOC0xLjQgMy41LjMgNy42IDMuOSA5LjF6bTM4LjMtMjEuNGMzLjUgMS41IDcuNy0uMiA5LjEtMy44IDEuNS0zLjYtLjItNy43LTMuOS05LjEtMy42LTEuNS03LjYuMy05LjEgMy44LTEuMyAzLjYuNCA3LjcgMy45IDkuMXptNjQuNC01LjZjLTMuNiAxLjUtNy44LS4yLTkuMS0zLjctMS41LTMuNi4yLTcuOCAzLjgtOS4yIDMuNi0xLjQgNy43LjMgOS4yIDMuOSAxLjMgMy41LS40IDcuNS0zLjkgOXptMTUuOSA5LjNjLTMuNiAxLjUtNy43LS4yLTkuMS0zLjctMS41LTMuNi4yLTcuOCAzLjctOS4xIDMuNi0xLjUgNy43LjIgOS4yIDMuOCAxLjUgMy41LS4zIDcuNS0zLjggOXptNC43IDE3LjdjLTMuNiAxLjUtNy44LS4yLTkuMi0zLjgtMS41LTMuNi4yLTcuNyAzLjktOS4xIDMuNi0xLjUgNy43LjMgOS4yIDMuOCAxLjMgMy41LS40IDcuNi0zLjkgOS4xek04OS4zIDM1LjhjLTMuNiAxLjUtNy44LS4yLTkuMi0zLjgtMS40LTMuNi4yLTcuNyAzLjktOS4xIDMuNi0xLjUgNy43LjMgOS4yIDMuOCAxLjQgMy42LS4zIDcuNy0zLjkgOS4xek02OS43IDE3LjdsOC45IDQuN1Y5LjNsLTguOSAyLjhjLS4yLS4zLS41LS42LS45LS45TDcyLjQgMEg1OS42bDMuNSAxMS4yYy0uMy4zLS42LjUtLjkuOWwtOC44LTIuOHYxMy4xbDguOC00LjdjLjMuMy42LjcuOS45bC01IDE1LjR2LjFjLS4yLjgtLjQgMS42LS40IDIuNCAwIDQuMSAzLjEgNy41IDcgOC4xaC4yYy4zIDAgLjcuMSAxIC4xLjQgMCAuNyAwIDEtLjFoLjJjNC0uNiA3LjEtNC4xIDcuMS04LjEgMC0uOC0uMS0xLjctLjQtMi40VjM0bC01LjEtMTUuNGMuNC0uMi43LS42IDEtLjl6TTY2IDkyLjhjMTYuOSAwIDMyLjggMS4xIDQ3LjEgMy4yIDQtMTYuOSA4LjktMjYuNyAxNC0zMy41bC05LjYtMy40YzEgNC45IDEuMSA3LjIgMCAxMC4yLTEuNS0xLjQtMy00LjMtNC4yLTguN0wxMDguNiA3NmMyLjgtMiA1LTMuMiA3LjUtMy4zLTQuNCA5LjQtMTAgMTEuOS0xMy42IDExLjItNC4zLS44LTYuMy00LjYtNS42LTcuOSAxLTQuNyA1LjctNS45IDgtLjUgNC4zLTguNy0zLTExLjQtNy42LTguOCA3LjEtNy4yIDcuOS0xMy41IDIuMS0yMS4xLTggNi4xLTguMSAxMi4zLTQuNSAyMC44LTQuNy01LjQtMTIuMS0yLjUtOS41IDYuMiAzLjQtNS4yIDcuOS0yIDcuMiAzLjEtLjYgNC4zLTYuNCA3LjgtMTMuNSA3LjItMTAuMy0uOS0xMC45LTgtMTEuMi0xMy44IDIuNS0uNSA3LjEgMS44IDExIDcuM0w4MC4yIDYwYy00LjEgNC40LTggNS4zLTEyLjMgNS40IDEuNC00LjQgOC0xMS42IDgtMTEuNkg1NS41czYuNCA3LjIgNy45IDExLjZjLTQuMi0uMS04LTEtMTIuMy01LjRsMS40IDE2LjRjMy45LTUuNSA4LjUtNy43IDEwLjktNy4zLS4zIDUuOC0uOSAxMi44LTExLjEgMTMuOC03LjIuNi0xMi45LTIuOS0xMy41LTcuMi0uNy01IDMuOC04LjMgNy4xLTMuMSAyLjctOC43LTQuNi0xMS42LTkuNC02LjIgMy43LTguNSAzLjYtMTQuNy00LjYtMjAuOC01LjggNy42LTUgMTMuOSAyLjIgMjEuMS00LjctMi42LTExLjkuMS03LjcgOC44IDIuMy01LjUgNy4xLTQuMiA4LjEuNS43IDMuMy0xLjMgNy4xLTUuNyA3LjktMy41LjctOS0xLjgtMTMuNS0xMS4yIDIuNS4xIDQuNyAxLjMgNy41IDMuM2wtNC43LTE1LjRjLTEuMiA0LjQtMi43IDcuMi00LjMgOC43LTEuMS0zLS45LTUuMyAwLTEwLjJsLTkuNSAzLjRjNSA2LjkgOS45IDE2LjcgMTQgMzMuNSAxNC44LTIuMSAzMC44LTMuMiA0Ny43LTMuMnoiCiAgICAgICAgICAgID48L3BhdGg+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW1hZ2Ugc3JjPSIvYXNzZXRzL2ltYWdlcy9nb3Z1ay1sb2dvdHlwZS1jcm93bi5wbmciIHhsaW5rOmhyZWY9IiIgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbG9nb3R5cGUtY3Jvd24tZmFsbGJhY2staW1hZ2UiIHdpZHRoPSIzNiIgaGVpZ2h0PSIzMiI+PC9pbWFnZT4KICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImdvdnVrLWhlYWRlcl9fbG9nb3R5cGUtdGV4dCI+CiAgICAgICAgICAgIEdPVi5VSwogICAgICAgICAgPC9zcGFuPgogICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iZ292dWstaGVhZGVyX19wcm9kdWN0LW5hbWUiPgogICAgICAgICAgRGlnaXRhbCBNYXJrZXRwbGFjZQogICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgPC9hPgogICAgPC9kaXY+CiAgICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLWhlYWRlcl9fY29udGVudCI+CgogICAgCgogICAgCiAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgcm9sZT0iYnV0dG9uIiBjbGFzcz0iZ292dWstaGVhZGVyX19tZW51LWJ1dHRvbiBqcy1oZWFkZXItdG9nZ2xlIiBhcmlhLWNvbnRyb2xzPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJTaG93IG9yIGhpZGUgVG9wIExldmVsIE5hdmlnYXRpb24iPk1lbnU8L2J1dHRvbj4KICAgIDxuYXY+CiAgICAgIDx1bCBpZD0ibmF2aWdhdGlvbiIgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbmF2aWdhdGlvbiAiIGFyaWEtbGFiZWw9IlRvcCBMZXZlbCBOYXZpZ2F0aW9uIj4KICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbmF2aWdhdGlvbi1pdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstaGVhZGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvYnV5aW5nLWFuZC1zZWxsaW5nLW9uLXRoZS1kaWdpdGFsLW1hcmtldHBsYWNlIj4KICAgICAgICAgICAgICAgIEd1aWRhbmNlCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX25hdmlnYXRpb24taXRlbSI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbGluayIgaHJlZj0iL2hlbHAiPgogICAgICAgICAgICAgICAgSGVscAogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstaGVhZGVyX19uYXZpZ2F0aW9uLWl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xpbmsiIGhyZWY9Ii91c2VyL2xvZ2luIj4KICAgICAgICAgICAgICAgIExvZyBpbgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgIAogICAgICA8L3VsPgogICAgPC9uYXY+CiAgICAKICAgIDwvZGl2PgogICAgCiAgPC9kaXY+CjwvaGVhZGVyPgoKCiAgICAKICAgICAgPGRpdiBjbGFzcz0iZ292dWstd2lkdGgtY29udGFpbmVyIj4KICAgICAgICAKICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXBoYXNlLWJhbm5lciI+CiAgPHAgY2xhc3M9ImdvdnVrLXBoYXNlLWJhbm5lcl9fY29udGVudCI+PHN0cm9uZyBjbGFzcz0iZ292dWstdGFnIGdvdnVrLXBoYXNlLWJhbm5lcl9fY29udGVudF9fdGFnICI+CiAgYmV0YQo8L3N0cm9uZz48c3BhbiBjbGFzcz0iZ292dWstcGhhc2UtYmFubmVyX190ZXh0Ij4KICAgICAgSGVscCB1cyBpbXByb3ZlIHRoZSBEaWdpdGFsIE1hcmtldHBsYWNlIC0gPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9oZWxwIj5zZW5kIHlvdXIgZmVlZGJhY2s8L2E+CiAgICA8L3NwYW4+CiAgPC9wPgo8L2Rpdj4KICAKICAKPGRpdiBjbGFzcz0iZ292dWstYnJlYWRjcnVtYnMiPgogIDxvbCBjbGFzcz0iZ292dWstYnJlYWRjcnVtYnNfX2xpc3QiPgogIAogICAgCiAgICA8bGkgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saXN0LWl0ZW0iPgogICAgICA8YSBjbGFzcz0iZ292dWstYnJlYWRjcnVtYnNfX2xpbmsiIGhyZWY9Ii8iPkRpZ2l0YWwgTWFya2V0cGxhY2U8L2E+CiAgICA8L2xpPgogICAgCiAgCiAgICAKICAgIDxsaSBjbGFzcz0iZ292dWstYnJlYWRjcnVtYnNfX2xpc3QtaXRlbSI+CiAgICAgIDxhIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGluayIgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXMiPlN1cHBsaWVyIG9wcG9ydHVuaXRpZXM8L2E+CiAgICA8L2xpPgogICAgCiAgCiAgPC9vbD4KPC9kaXY+CgoKICAgICAgICA8bWFpbiBjbGFzcz0iZ292dWstbWFpbi13cmFwcGVyICIgaWQ9Im1haW4tY29udGVudCIgcm9sZT0ibWFpbiI+CiAgICAgICAgICAKICAKICAgIAogICAgICAKICAgIAogIAogIAogICAgCiAgCiAgCgoKCjxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLWNvbHVtbi10d28tdGhpcmRzIj4KICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1jYXB0aW9uLWwiPkZvcmVpZ24gYW5kIENvbW1vbndlYWx0aCBPZmZpY2UgKEZDTyk8L3NwYW4+CiAgICA8aDEgY2xhc3M9ImdvdnVrLWhlYWRpbmctbCI+RkNPIENvbnN1bGFyIEludGVsbGlnZW50IENsaWVudCBGdW5jdGlvbiAtIFRlY2huaWNhbCBBcmNoaXRlY3R1cmUgJmFtcDsgQnVzaW5lc3MgQW5hbHlzaXM8L2gxPgogICAgPHNwYW4gZGF0YS1sb3Q9ImRpZ2l0YWwtb3V0Y29tZXMiPjwvc3Bhbj4KICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLXJvdyBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOSI+CiAgPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1jb2x1bW4tb25lLXRoaXJkIGFwcC1zdGF0LWJsb2NrIiBpZD0iaW5jb21wbGV0ZS1hcHBsaWNhdGlvbnMiPgogICA8aDI+CiAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay0hLWZvbnQtc2l6ZS0zNiBnb3Z1ay0hLWRpc3BsYXktYmxvY2siPjE8L3NwYW4+CiAgICAgIDxzcGFuPkluY29tcGxldGUgYXBwbGljYXRpb248L3NwYW4+CiAgIDwvaDI+CiAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtZm9udC1zaXplLTE2Ij4xIFNNRSwgMCBsYXJnZTwvcD4KPC9kaXY+CjxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtY29sdW1uLW9uZS10aGlyZCBhcHAtc3RhdC1ibG9jayIgaWQ9ImNvbXBsZXRlZC1hcHBsaWNhdGlvbnMiPgogICA8aDI+CiAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay0hLWZvbnQtc2l6ZS0zNiBnb3Z1ay0hLWRpc3BsYXktYmxvY2siPjA8L3NwYW4+CiAgICAgIDxzcGFuPkNvbXBsZXRlZCBhcHBsaWNhdGlvbnM8L3NwYW4+CiAgIDwvaDI+CiAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtZm9udC1zaXplLTE2Ij48L3A+CjwvZGl2PgoKPC9kaXY+Cgo8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1jb2x1bW4tZnVsbCI+CiAgICAKCjxoMiBjbGFzcz0iZ292dWstdmlzdWFsbHktaGlkZGVuIj5JbXBvcnRhbnQgZGF0ZXM8L2gyPgoKCgogIAoKICAKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCIgaWQ9Im9wcG9ydHVuaXR5LWltcG9ydGFudC1kYXRlcyI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFB1Ymxpc2hlZAogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRodXJzZGF5IDIzIEp1bHkgMjAyMAogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBEZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9ucwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRodXJzZGF5IDMwIEp1bHkgMjAyMCBhdCAxMTo1OXBtIEdNVAogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBDbG9zaW5nIGRhdGUgZm9yIGFwcGxpY2F0aW9ucwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRodXJzZGF5IDYgQXVndXN0IDIwMjAgYXQgMTE6NTlwbSBHTVQKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCgogIDxoMiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0xIiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+T3ZlcnZpZXc8L2gyPgogIAogIAoKCiAgCgogIAoKICAKCiAgCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgU3VtbWFyeSBvZiB0aGUgd29yawogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFNldCB1cCBhbmQgZW1iZWQgRkNPIENvbnN1bGFyJiMzOTtzIEFyY2hpdGVjdHVyZSBGdW5jdGlvbiwgcHJlcGFyZSBhIHByb2dyYW1tZSBidXNpbmVzcyBjYXNlIHRvIHRyYW5zZm9ybSB0aGUgQ29uc3VsYXIgdGVjaG5pY2FsIGFyY2hpdGVjdHVyZSB0byBzdXBwb3J0IG9ubGluZSBzZXJ2aWNlcy4gTWFuYWdlIHRoZSB0cmFuc2Zvcm1hdGlvbiBwcm9ncmFtbWUsIGluY2x1ZGluZyB0aGUgcm9sbG91dCBvZiBtaXNzaW9uIGNyaXRpY2FsIHByb2R1Y3RzLiA8YnI+PGJyPkRlc2lnbiBhbmQgZGVsaXZlcnkgb2YgZGlnaXRhbCBzZXJ2aWNlcyBvbiBHT1YuVUsgaXMgb3V0IG9mIHNjb3BlLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBMYXRlc3Qgc3RhcnQgZGF0ZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIE1vbmRheSAxNCBTZXB0ZW1iZXIgMjAyMAogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBFeHBlY3RlZCBjb250cmFjdCBsZW5ndGgKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICAxIHllYXIgd2l0aCB0aGUgb3B0aW9uIHRvIGV4dGVuZCBieSAxIHllYXIuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIExvY2F0aW9uCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgTG9uZG9uCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIE9yZ2FuaXNhdGlvbiB0aGUgd29yayBpcyBmb3IKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBGb3JlaWduIGFuZCBDb21tb253ZWFsdGggT2ZmaWNlIChGQ08pCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEJ1ZGdldCByYW5nZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFN0YXRlbWVudCBvZiBXb3JrIDEgJmFtcDsgMiAodXAgdG8gZW5kIERlY2VtYmVyIDIwMjApIC0gTWF4aW11bSBvZiDCozcwMCwwMDA8YnI+PGJyPlRvdGFsIGNvbnRyYWN0IHZhbHVlIC0gdXAgdG8gwqMyLDUwMCwwMDA8YnI+PGJyPlBheW1lbnQgQXBwcm9hY2g6IEZpeGVkIFByaWNlICsgVCZhbXA7TSwgZWFjaCBTdGF0ZW1lbnQgb2YgV29yayB3aWxsIGFncmVlIGFwcHJvcHJpYXRlIG1lY2hhbmlzbS4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCiAgPGgyIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTIiIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0gYXBwLXN1bW1hcnktbGlzdC1oZWFkaW5nIj5BYm91dCB0aGUgd29yazwvaDI+CiAgCiAgCgoKICAKCiAgCgogIAoKICAKCiAgCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgV2h5IHRoZSB3b3JrIGlzIGJlaW5nIGRvbmUKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBPbmUgb2YgdGhlIEZDT+KAmXMgdGhyZWUgZm9yZWlnbiBwb2xpY3kgcHJpb3JpdGllcyBpcyB0byBzdXBwb3J0IEJyaXRpc2ggbmF0aW9uYWxzIGFyb3VuZCB0aGUgd29ybGQgdGhyb3VnaCBtb2Rlcm4gYW5kIGVmZmljaWVudCBjb25zdWxhciBzZXJ2aWNlcy4gPGJyPjxicj5Db25zdWxhciBpcyBkZWxpdmVyaW5nIG1vcmUgc2VydmljZXMgb25saW5lIHRvIGFsbG93IGN1c3RvbWVycyB0byBhY2Nlc3Mgb3VyIHNlcnZpY2VzIHJlbW90ZWx5IHdpdGhvdXQgdmlzaXRpbmcgYSBDb25zdWxhdGUuIFRoZSB0ZWNobmljYWwgYXJjaGl0ZWN0dXJlIHVuZGVycGlubmluZyB0aGVzZSBzZXJ2aWNlcyBoYXMgZ3Jvd24gb3JnYW5pY2FsbHkgd2l0aCBkYXRhIHN0b3JlZCBpbiBkaXNwYXJhdGUgSVQgc3lzdGVtcyBhbmQgYXBwbGljYXRpb25zLiA8YnI+PGJyPkNvbnN1bGFyIHJlcXVpcmVzIGEgVGVjaG5pY2FsIEFyY2hpdGVjdHVyZSBGdW5jdGlvbiB0bzogZGVzaWduIGFuZCBzdXBwb3J0IGEgc3VzdGFpbmFibGUgYXJjaGl0ZWN0dXJlIHNvIHRoYXQgb3VyIHRlY2hub2xvZ3kgYmV0dGVyIHN1cHBvcnRzIHRoZSBlbmQtdG8tZW5kIGN1c3RvbWVyIGpvdXJuZXk7IHByb2R1Y2UgYSBwcm9ncmFtbWUgYnVzaW5lc3MgY2FzZSBieSBEZWNlbWJlcjsgYW5kIGluIHBhcmFsbGVsIHJvbGwgb3V0IG5ldyBidXNpbmVzcyBjcml0aWNhbCBwcm9kdWN0cyBhbmQgc2VydmljZXMgYnkgSmFudWFyeS4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgUHJvYmxlbSB0byBiZSBzb2x2ZWQKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBJdCBpcyBlbnZpc2FnZWQgdGhhdCB0aGUgc3VwcGxpZXIgd2lsbCBuZWVkIHRvOjxicj48YnI+4oCiIFNldCB1cCBhbmQgZW1iZWQgdGhlIGFyY2hpdGVjdHVyZSBmdW5jdGlvbiB3aXRoaW4gQ29uc3VsYXIsIGRlZmluaW5nIHByb2Nlc3NlcywgZ292ZXJuYW5jZSBhbmQgYXJjaGl0ZWN0dXJlIHRvb2xpbmcgYW5kIG1haW50YWluIGJ1c2luZXNzLCBkYXRhLCBhcHBsaWNhdGlvbiwgaW5mcmFzdHJ1Y3R1cmUsIHNlY3VyaXR5IGFuZCBzZXJ2aWNlIGRvbWFpbnM7PGJyPjxicj7igKIgU3VwcG9ydCBhbmQgbGVhZCBpbiBkZXZlbG9waW5nIGEgdGVjaG5pY2FsIG9wZXJhdGluZyBtb2RlbCwgc3Rha2Vob2xkZXIgZW5nYWdlbWVudCBhbmQgZGVsaXZlcnkgc3RyYXRlZ3ksIGFuZCBnb3Zlcm5hbmNlIGFsaWduZWQgdG8gdGhlIGRyYWZ0IHRlY2huaWNhbCByb2FkbWFwOzxicj48YnI+4oCiIFN1cHBvcnQgaW4gdGhlIHByb2R1Y3Rpb24gb2YgYSBwcm9ncmFtbWUgYnVzaW5lc3MgY2FzZSBmb3IgdGhlIHRyYW5zZm9ybWF0aW9uIHByb2dyYW1tZTs8YnI+PGJyPuKAoiBBbmFseXNlIHJlcXVpcmVtZW50cyB0byByZS1wcm9jdXJlIHN5c3RlbXMgZW5hYmxpbmcgcHJvb2Ygb2YgY29uY2VwdHMgdG8gc3VwcG9ydCBvcHRpb25zIGV2YWx1YXRpb247IGFuZDxicj48YnI+4oCiIFN1cHBvcnQgYnVzaW5lc3MgdHJhbnNmb3JtYXRpb24gYW5kIHJvbGwtb3V0IG9mIGJ1c2luZXNzIGNyaXRpY2FsIHByb2R1Y3RzIG9yIHNlcnZpY2VzIHRvIHRoZSBuZXR3b3JrLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBXaG8gdGhlIHVzZXJzIGFyZSBhbmQgd2hhdCB0aGV5IG5lZWQgdG8gZG8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBBcyBhIENvbnN1bGFyIE9mZmljZXIgb3ZlcnNlYXMsIEkgbmVlZCB0byBoYXZlIGEgaG9saXN0aWMgdmlldyBvZiBhIGNvbnN1bGFyIGNhc2UgcmVnYXJkbGVzcyBvZiBjb250YWN0IG1ldGhvZCDigJMgYnkgcGhvbmUsIGVtYWlsIG9yIHNvY2lhbCBtZWRpYTxicj48YnI+QXMgYSBNYW5hZ2VyLCBJIG5lZWQgdG8gbWFrZSBkZWNpc2lvbnMgdGhyb3VnaCByZWFsIHRpbWUgZGF0YS48YnI+PGJyPkFzIGEgVGVjaG5vbG9neSAmYW1wOyBUcmFuc2Zvcm1hdGlvbiBsZWFkLCBJIG5lZWQgdG8gZW5zdXJlIHRoYXQgb3VyIHRlY2huaWNhbCBhcmNoaXRlY3R1cmUgaXMgc3VzdGFpbmFibGUgYW5kIHN1cHBvcnRzIHRoZSBlbmQgdG8gZW5kIHVzZXIgam91cm5leS48YnI+PGJyPkFzIGEgU2VuaW9yIE1hbmFnZXIsIEkgbmVlZCB0byBlbnN1cmUgdGhhdCB3ZSBtYWtlIHRoZSByaWdodCBkaWdpdGFsIGludmVzdG1lbnQgZGVjaXNpb25zIGFuZCB0aGF0IHdlIGNhbiBwcm92aWRlIGFjY3VyYXRlIGRhdGEgYWJvdXQgaG93IHRvIHN1cHBvcnQgQnJpdGlzaCBuYXRpb25hbHMgYWJyb2FkLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBFYXJseSBtYXJrZXQgZW5nYWdlbWVudAogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIE4vQQogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBBbnkgd29yayB0aGF04oCZcyBhbHJlYWR5IGJlZW4gZG9uZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIEFuIGluZGljYXRpdmUgdGFyZ2V0IHRlY2huaWNhbCBhcmNoaXRlY3R1cmUgYW5kIElUIG9wZXJhdGluZyBtb2RlbCBoYXZlIGJlZW4gcHJvZHVjZWQsIGNvbnNpc3Rpbmcgb2YgYSBoeWJyaWQgb2YgU2FhUyBwcm9kdWN0cyBhbmQgYmVzcG9rZSBkZXZlbG9wbWVudC4gU3lzdGVtcyB3aXRoaW4gdGhlIG9wZXJhdGluZyBtb2RlbCBiYXNlZCBvbiBhbiBBV1MgcGxhdGZvcm0gaW5jbHVkZSBDUk0sIEV2ZW50IE1lc3NhZ2luZyBTZXJ2aWNlLCBDYXNlIE1hbmFnZW1lbnQgYW5kIHZhcmlvdXMgYnVzaW5lc3Mgc3lzdGVtcy4gVGhlIHRhcmdldCBhcmNoaXRlY3R1cmUgaW5jbHVkZXMgQVBJcywgbWVzc2FnaW5nIGludGVncmF0aW9uIGFuZCBhIFVJIHRvIHByb3ZpZGUgYSBjb25zaXN0ZW50IGxvb2sgYW5kIGZlZWwgZm9yIHVzZXJzIChzdGFmZikuIDxicj48YnI+RGlzY292ZXJpZXMgaGF2ZSBhbHJlYWR5IGJlZW4gdW5kZXJ0YWtlbiB0byBjYXB0dXJlIHVzZXIgbmVlZHMgZm9yIGRpZmZlcmVudCBDb25zdWxhciBjYXNlIHR5cGVzIGFuZCBzZXBhcmF0ZWx5LCBhIGZ1dHVyZSB0ZWxlcGhvbnkgYW5kIGNvbnRhY3QgY2VudHJlIHNvbHV0aW9uLjxicj48YnI+VGhlIHRlYW0gd2lsbCBuZWVkIHRvIGNvbnNvbGlkYXRlIHRoaXMgd29yayB0byBkZXNpZ24gdGhlIGZ1dHVyZSB0ZWNobmljYWwgYXJjaGl0ZWN0dXJlLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBFeGlzdGluZyB0ZWFtCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgQ29uc3VsYXImIzM5O3MgVGVjaG5pY2FsIEFyY2hpdGVjdCwgQ29uc3VsYXIgSGVhZCBvZiBUZWNobm9sb2d5IGFuZCBUcmFuc2Zvcm1hdGlvbiAoc3RyYXRlZ2ljKSBhbmQgU2VuaW9yIERlbGl2ZXJ5IE1hbmFnZXIgKGZvciBkZWxpdmVyeSBhc3BlY3RzKSAgd2lsbCBiZSB5b3VyIGtleSBwb2ludHMgb2YgY29udGFjdC4gPGJyPjxicj5XaXRoaW4gRkNPLCB5b3Ugd2lsbCBiZSB3b3JraW5nIHdpdGggYSByYW5nZSBvZiBwb2xpY3ksIHRlY2hub2xvZ3kgYW5kIGRpZ2l0YWwgbGVhZHMgYWNyb3NzIENvbnN1bGFyLCB0aGUgRGlnaXRhbCBUcmFuc2Zvcm1hdGlvbiBVbml0LCBGQ08gYW5kIG92ZXJzZWFzIG5ldHdvcmsuIFlvdSB3aWxsIGFsc28gd29yayB3aXRoIGV4aXN0aW5nIHN1cHBsaWVycyBvZiB2YXJpb3VzIGNvbnN1bGFyIGFwcGxpY2F0aW9ucyBhbmQgc3Rha2Vob2xkZXJzIGluIHRoZSBGQ08gaW5jbHVkaW5nIElUIHN0cmF0ZWd5IGxlYWRzIGFuZCBGQ08gbGl2ZSBzdXBwb3J0IGFuZCByZXByZXNlbnQgdGhlIHByb2dyYW1tZSBhdCB0ZWNobmljYWwgYW5kIHNlbmlvciBnb3Zlcm5hbmNlIG1lZXRpbmdzLiA8YnI+PGJyPllvdSBtYXkgYWxzbyBiZSByZXF1aXJlZCB0byBmYWNpbGl0YXRlIGRlbW9zIHdvcmtpbmcgd2l0aCBleHRlcm5hbCBzdXBwbGllcnMuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEN1cnJlbnQgcGhhc2UKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBEaXNjb3ZlcnkKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCiAgPGgyIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTMiIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0gYXBwLXN1bW1hcnktbGlzdC1oZWFkaW5nIj5Xb3JrIHNldHVwPC9oMj4KICAKICAKCgogIAoKICAKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEFkZHJlc3Mgd2hlcmUgdGhlIHdvcmsgd2lsbCB0YWtlIHBsYWNlCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgSW4gbm9ybWFsIGNpcmN1bXN0YW5jZXMgdGhlIHN1cHBsaWVyIHdpbGwgYmUgcmVxdWlyZWQgdG8gd29yayBpbiBMb25kb24sIGFuZCBvY2Nhc2lvbmFsbHkgTWlsdG9uIEtleW5lcywgd2hlbiBjb2xsYWJvcmF0aXZlIHdvcmtpbmcgaXMgcmVxdWlyZWQuIFZpcnR1YWwgd29ya2luZyB3aWxsIGJlIGVuY291cmFnZWQgZm9yIG5vbi1jb2xsYWJvcmF0aXZlIGFjdGl2aXR5LiA8YnI+RHVyaW5nIHRoZSBDT1ZJRC0xOSBwZXJpb2QsIHdlIGhhdmUgYmVlbiByZW1vdGUgd29ya2luZyBtYWtpbmcgcmVndWxhciBjb250YWN0IGJldHdlZW4gdGVhbXMgdmlhIE1pY3Jvc29mdCBUZWFtcy4gRGVwZW5kaW5nIG9uIHRoZSBldm9sdmluZyBwYW5kZW1pYyBzaXR1YXRpb24sIHdvcmtpbmcgcmVtb3RlbHkvd29ya2luZyBmcm9tIGhvbWUgZm9yIGEgc3VzdGFpbmVkIHBlcmlvZCBvZiB0aW1lIG1pZ2h0IGJlIHJlcXVpcmVkIGF0IHNob3J0IG5vdGljZS4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgV29ya2luZyBhcnJhbmdlbWVudHMKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBUaGUgc3VwcGxpZXIgc2hvdWxkIGRldGVybWluZSBob3cgYmVzdCB0byBtYW5hZ2Ugd29ya2luZyBhcnJhbmdlbWVudHMgdG8gYWNoaWV2ZSB0aGUgYmVzdCBvdXRjb21lLiBJbiBidXNpbmVzcyBhcyB1c3VhbCBjaXJjdW1zdGFuY2VzIHdlIHdvdWxkIGV4cGVjdCB5b3UgdG8gYmUgYWJsZSB0byB3b3JrIGluIHRoZSBGQ08gYXQgbGVhc3QgdHdvIGRheXMgYSB3ZWVrIGFuZCBhdHRlbmQgZmFjZS10by1mYWNlIG1lZXRpbmdzIC0gYWxsIGN1cnJlbnRseSBoZWxkIG9uIE1TIFRlYW1zLiBUaGUgdGVhbSBzaG91bGQgYmUgZWFzaWx5IHJlYWNoYWJsZSBieSBwaG9uZSBvciBzZWN1cmUgZW1haWwuIFRoZSByZXNvdXJjZSBzaG91bGQ6IGJlIGNvbGxhYm9yYXRpdmUsIHJlc3BvbnNpdmUgYW5kIHdvcmsgZWZmZWN0aXZlbHkgd2l0aCBleGlzdGluZyBzdXBwbGllcnMgYW5kIGJlIGNvbWZvcnRhYmxlIHRhbGtpbmcgdG8gbm9uLXRlY2huaWNhbCBzdGFmZiBhbmQgc2VuaW9yIG1hbmFnZW1lbnQgdHJhbnNsYXRpbmcgcmVxdWlyZW1lbnRzIGludG8gdGVjaG5pY2FsIHRlcm1zLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBTZWN1cml0eSBjbGVhcmFuY2UKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBBbGwgc3RhZmYgd29ya2luZyBvbiBGQ08gcHJlbWlzZXMgYW5kIElUIG5ldHdvcmsgbXVzdCBiZSBhdCBsZWFzdCBTQyBjbGVhcmVkIG9yIGNhcGFibGUgb2YgYmVpbmcgY2xlYXJlZCB0byBTQy4gQmlkZGVycyBtdXN0IGNvbmZpcm0gY2xlYXJhbmNlIG9mIG5vbWluYXRlZCByZXNvdXJjZXMuIElmIHJlcXVpcmVkLCBGQ08gd2lsbCBpbml0aWF0ZSBTQyBjbGVhcmFuY2VzLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKICA8aDIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtNCIgY2xhc3M9ImdvdnVrLWhlYWRpbmctbSBhcHAtc3VtbWFyeS1saXN0LWhlYWRpbmciPkFkZGl0aW9uYWwgaW5mb3JtYXRpb248L2gyPgogIAogIAoKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEFkZGl0aW9uYWwgdGVybXMgYW5kIGNvbmRpdGlvbnMKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBBbnkgZGF0YSBpbiByZWxhdGlvbiB0byB3b3JrIHBhY2thZ2VzIG11c3QgYmUga2VwdCBpbiB0aGUgVUsuPGJyPjxicj5JU08gOTAwMSwgSVNPIDI3MDAxIGNlcnRpZmljYXRpb24gbXVzdCBiZSBoZWxkIGJ5IHRoZSBzdXBwbGllciBieSB0aGUgU2VydmljZSBDb21tZW5jZW1lbnQgZGF0ZS4gRXZpZGVuY2Ugb2YgY2VydGlmaWNhdGlvbiBzaGFsbCBiZSByZXF1aXJlZC4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCiAgPGgyIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTUiIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0gYXBwLXN1bW1hcnktbGlzdC1oZWFkaW5nIj5Ta2lsbHMgYW5kIGV4cGVyaWVuY2U8L2gyPgogIAogIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0zIj5CdXllcnMgd2lsbCB1c2UgdGhlIGVzc2VudGlhbCBhbmQgbmljZS10by1oYXZlIHNraWxscyBhbmQgZXhwZXJpZW5jZSB0byBoZWxwIHRoZW0gZXZhbHVhdGUgc3VwcGxpZXJz4oCZIHRlY2huaWNhbCBjb21wZXRlbmNlLjwvcD4KICAKICAKICAKCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgRXNzZW50aWFsIHNraWxscyBhbmQgZXhwZXJpZW5jZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDx1bCBjbGFzcz0iZ292dWstbGlzdCBnb3Z1ay1saXN0LS1idWxsZXQiPgogICAgICAgICAgPGxpPlByb3ZlbiB0cmFjayByZWNvcmQgb2Ygc3VjY2Vzc2Z1bGx5IGxlYWRpbmcgYW5kIHJlZGVzaWduaW5nIGxlZ2FjeSBJVCBhcmNoaXRlY3R1cmUgYXMgcGFydCBvZiBhIGxhcmdlIGRpZ2l0YWwgdHJhbnNmb3JtYXRpb24gcHJvZ3JhbW1lIHVzaW5nIEFnaWxlIGFuZCBQcmluY2UgMiBtZXRob2RvbG9neSBhbmQgdXNlci1jZW50cmVkIGRlc2lnbjwvbGk+CiAgICAgICAgICA8bGk+RGVtb25zdHJhYmxlIGV4cGVyaWVuY2Ugb2Ygd29ya2luZyBhbmQgdW5kZXJzdGFuZGluZyBoeWJyaWQgbGFuZHNjYXBlcyAoU2FhUyBhbmQgYmVzcG9rZSBzb2x1dGlvbnMpIHdpdGggYSBwYXJ0aWN1bGFyIGZvY3VzIG9uIGRlc2lnbmluZyBoeWJyaWQgYXJjaGl0ZWN0dXJlIHVzaW5nIEFXUyB0ZWNobm9sb2dpZXM8L2xpPgogICAgICAgICAgPGxpPkRlbW9uc3RyYWJsZSBleHBlcmllbmNlIG9mIHdvcmtpbmcgd2l0aCB0cmFuc2FjdGlvbmFsIHNlcnZpY2VzLCBBUElzLCBhbmQgbWljcm8tc2VydmljZSBkcml2ZW4gYXBwbGljYXRpb25zPC9saT4KICAgICAgICAgIDxsaT5EZW1vbnN0cmFibGUgZXhwZXJpZW5jZSBvZiBlZmZlY3RpdmUgY29sbGFib3JhdGlvbiBiZXR3ZWVuIG11bHRpcGxlIHByb2R1Y3QgdmVuZG9ycyBhbmQgdGhlIGJ1c2luZXNzIHRvIGFsaWduIHN0cmF0ZWdpYywgcG9saWN5IGFuZCB0ZWNobmljYWwgb2JqZWN0aXZlczwvbGk+CiAgICAgICAgICA8bGk+UHJvdmVuIHRyYWNrIHJlY29yZCBvZiBlZmZlY3RpdmVseSBkb3ZldGFpbGluZyBidXNpbmVzcywgZGF0YSwgc2VjdXJpdHksIHRlY2hub2xvZ3kgYW5kIHNlcnZpY2UgbWFuYWdlbWVudCBhcmNoaXRlY3R1cmU8L2xpPgogICAgICAgICAgPGxpPlByb3ZlbiB0cmFjayByZWNvcmQgb2YgZGV2ZWxvcGluZyBhbmQgbWFpbnRhaW5pbmcgZGF0YSBhbmQgc2VjdXJpdHkgYXJjaGl0ZWN0dXJlIHN0cmF0ZWdpZXMgd2l0aGluIGEgaHlicmlkIGVudmlyb25tZW50IGFuZCBtYW5hZ2luZyBkYXRhIHJpc2tzIGluIHRoZSBjb250ZXh0IG9mIEdEUFI8L2xpPgogICAgICAgICAgPGxpPlByb3ZlbiB0cmFjayByZWNvcmQgb2YgZGV2ZWxvcG1lbnQgYW5kIGNvbnRyaWJ1dGlvbiB0byBGaXZlIENhc2UgYnVzaW5lc3MgY2FzZXM8L2xpPgogICAgICAgICAgPGxpPkRlbW9uc3RyYWJsZSBleHBlcmllbmNlIG9mIGluaXRpYXRpbmcgYW5kIHNwZWNpZnlpbmcgcmVxdWlyZW1lbnRzLCByZXZpZXdpbmcgdXNlciBleHBlcmllbmNlIGFuZCBwcm9qZWN0IG1hbmFnaW5nIHNtYWxsIElUIGFuZCBkaWdpdGFsIHByb2N1cmVtZW50cyB0byBkZWxpdmVyIHZhbHVlIGZvciBtb25leSB3aXRoaW4gc2hvcnQgdGltZSBmcmFtZXM8L2xpPgogICAgICAgICAgPGxpPkRlbW9uc3RyYWJsZSBleHBlcmllbmNlIG9mIHdvcmtpbmcgd2l0aCBhbmQgdW5kZXJzdGFuZGluZyBBV1MgZW52aXJvbm1lbnRzLCBpbmNsdWRpbmcgcmUtcGxhdGZvcm1pbmcgc2VydmljZXMgb250byBBV1M8L2xpPgogICAgICAgICAgPGxpPkV4cGVyaWVuY2Ugb2YgcHJlcGFyaW5nIHByb2plY3QgYW5kIHByb2dyYW1tZSBkb2N1bWVudGF0aW9uLCBhbmQgcHJvdmlkaW5nIHRpbWVseSwgaGlnaCBxdWFsaXR5IGFuZCBhY2N1cmF0ZSByZXBvcnRzIHRvIHRoZSBTUk8sIHByb2plY3QgYm9hcmRzIGFuZCBvdGhlciBrZXkgc3Rha2Vob2xkZXJzIGFuZCBwcmVwYXJpbmcgcGFwZXJzIGZvciBwcm9ncmFtbWUgbWVldGluZ3M8L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIE5pY2UtdG8taGF2ZSBza2lsbHMgYW5kIGV4cGVyaWVuY2UKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICA8dWwgY2xhc3M9ImdvdnVrLWxpc3QgZ292dWstbGlzdC0tYnVsbGV0Ij4KICAgICAgICAgIDxsaT5FeHBlcmllbmNlIG9mIGxlYWRpbmcgcHVibGljIHNlY3RvciBkaWdpdGFsIGFuZCB0ZWNobm9sb2d5IHRyYW5zZm9ybWF0aW9uIHByb2dyYW1tZXM8L2xpPgogICAgICAgICAgPGxpPkV4cGVyaWVuY2Ugb2Ygd29ya2luZyB3aXRoIG9yZ2FuaXNhdGlvbnMgdGhhdCBoYXZlIGNvbXBhcmFibGUgZ2xvYmFsIHNjb3BlIGFuZCBhIGdlb2dyYXBoaWNhbGx5IHNwcmVhZCB3b3JrZm9yY2U8L2xpPgogICAgICAgICAgPGxpPlByb3ZpZGUgZXZpZGVuY2Ugb2YgYXJjaGl0ZWN0dXJlIHRlYW0gbWVtYmVycyBob2xkaW5nIEFXUyBQcm9mZXNzaW9uYWwgQ2VydGlmaWNhdGlvbnM8L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCjwvZGw+CgogIDxoMiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy02IiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+SG93IHN1cHBsaWVycyB3aWxsIGJlIGV2YWx1YXRlZDwvaDI+CiAgCiAgPHAgY2xhc3M9ImdvdnVrLWJvZHkgZ292dWstIS1tYXJnaW4tdG9wLTMiPkFsbCBzdXBwbGllcnMgd2lsbCBiZSBhc2tlZCB0byBwcm92aWRlIGEgd3JpdHRlbiBwcm9wb3NhbC48L3A+CiAgCiAgCgoKICAKCiAgCgogIAoKICAKCiAgCgogIAo8ZGwgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QtLXRvcC1ib3JkZXIgZ292dWstIS1tYXJnaW4tYm90dG9tLTgiPgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBIb3cgbWFueSBzdXBwbGllcnMgdG8gZXZhbHVhdGUKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICA0CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFByb3Bvc2FsIGNyaXRlcmlhCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgPHVsIGNsYXNzPSJnb3Z1ay1saXN0IGdvdnVrLWxpc3QtLWJ1bGxldCI+CiAgICAgICAgICA8bGk+VGVjaG5pY2FsIFNvbHV0aW9uPC9saT4KICAgICAgICAgIDxsaT5BcHByb2FjaCBhbmQgTWV0aG9kb2xvZ3k8L2xpPgogICAgICAgICAgPGxpPkhvdyB0aGUgYXBwcm9hY2ggb3Igc29sdXRpb24gbWVldHMgdXNlciBuZWVkczwvbGk+CiAgICAgICAgICA8bGk+SG93IHRoZSBhcHByb2FjaCBvciBzb2x1dGlvbiBtZWV0cyBGQ08mIzM5O3MgZ29hbDwvbGk+CiAgICAgICAgICA8bGk+RXN0aW1hdGVkIHRpbWUgZnJhbWVzIGZvciB0aGUgd29yazwvbGk+CiAgICAgICAgICA8bGk+SG93IHlvdSYjMzk7dmUgaWRlbnRpZmllZCByaXNrcyBhbmQgZGVwZW5kZW5jaWVzIGFuZCBvZmZlcmVkIGFwcHJvYWNoZXMgdG8gbWFuYWdlIHRoZW08L2xpPgogICAgICAgICAgPGxpPlRlYW0gU3RydWN0dXJlPC9saT4KICAgICAgICAgIDxsaT5WYWx1ZSBmb3IgTW9uZXk8L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEN1bHR1cmFsIGZpdCBjcml0ZXJpYQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDx1bCBjbGFzcz0iZ292dWstbGlzdCBnb3Z1ay1saXN0LS1idWxsZXQiPgogICAgICAgICAgPGxpPkV2aWRlbmNlIG9mIGV4Y2VsbGVudCBvcmFsIGNvbW11bmljYXRpb25zIHNraWxscyBhbmQgYWJpbGl0eSB0byBkaXNzZWN0IGFuZCBkZWxpdmVyIGNvbXBsZXggYW5kIHRlY2huaWNhbCBpbmZvcm1hdGlvbiBhbmQgbWFraW5nIGxhbmd1YWdlIHNpbXBsZSBhbmQgYWNjZXNzaWJsZSBmb3Igbm9uLXRlY2huaWNhbCBhdWRpZW5jZXM8L2xpPgogICAgICAgICAgPGxpPkV4cGVyaWVuY2Ugb2Ygc3VjY2Vzc2Z1bGx5IHRyYW5zZmVycmluZyB0ZWNobmljYWwga25vd2xlZGdlIHRvIHBlcm1hbmVudCBzdGFmZiB3aXRoaW4gdGhlIGNsaWVudCBvcmdhbmlzYXRpb248L2xpPgogICAgICAgICAgPGxpPkV4cGVyaWVuY2Ugb2YgY2hhbXBpb25pbmcgdGhlIHZhbHVlIG9mIHVzZXIgcmVzZWFyY2gsIHVzZXItY2VudHJlZCBkZXNpZ24sIGFuZCBldmlkZW5jZS1iYXNlZCBkZWNpc2lvbiBtYWtpbmc8L2xpPgogICAgICAgICAgPGxpPkhhdmUgYSBjdWx0dXJlIG9mIHRyYW5zcGFyZW5jeSBhbmQgbm8tYmxhbWUsIGVuY291cmFnaW5nIGFsbCB0byBmYWlsIGZhc3QgYW5kIGxlYXJuIGZyb20gbWlzdGFrZXMsIGFuZCBjaGFsbGVuZ2UgdGhlIHN0YXR1cyBxdW88L2xpPgogICAgICAgICAgPGxpPlRyYWNrIHJlY29yZCBvZiB3b3JraW5nIGluIG11bHRpZGlzY2lwbGluYXJ5IHRlYW1zIGFuZCBtdWx0aS1zdXBwbGllciBlbnZpcm9ubWVudHM8L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFBheW1lbnQgYXBwcm9hY2gKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBGaXhlZCBwcmljZQogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBBZGRpdGlvbmFsIGFzc2Vzc21lbnQgbWV0aG9kcwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDx1bCBjbGFzcz0iZ292dWstbGlzdCBnb3Z1ay1saXN0LS1idWxsZXQiPgogICAgICAgICAgPGxpPkNhc2Ugc3R1ZHk8L2xpPgogICAgICAgICAgPGxpPlJlZmVyZW5jZTwvbGk+CiAgICAgICAgICA8bGk+UHJlc2VudGF0aW9uPC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBFdmFsdWF0aW9uIHdlaWdodGluZwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0wIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS0xIj5UZWNobmljYWwgY29tcGV0ZW5jZTwvcD4KICAgICAgICA8ZGl2PjY1JTwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0zIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS0xIj5DdWx0dXJhbCBmaXQ8L3A+CiAgICAgICAgPGRpdj41JTwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0zIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS0xIj5QcmljZTwvcD4KICAgICAgICA8ZGl2PjMwJTwvZGl2PgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLWNvbHVtbi1mdWxsIj4KICAgIAoKCiAgPGgyIGlkPSJxdWVzdGlvbi1hbmQtYW5zd2VyLXNlc3Npb24iIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0iPlF1ZXN0aW9uIGFuZCBhbnN3ZXIgc2Vzc2lvbjwvaDI+CiAgPGEgY2xhc3M9ImdvdnVrLWxpbmsgZ292dWstIS1kaXNwbGF5LWlubGluZS1ibG9jayBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tNiIgaHJlZj0iL3N1cHBsaWVycy9vcHBvcnR1bml0aWVzLzEyNzU3L3F1ZXN0aW9uLWFuZC1hbnN3ZXItc2Vzc2lvbiI+CiAgICAKICAgICAgTG9nIGluIHRvIHZpZXcgcXVlc3Rpb24gYW5kIGFuc3dlciBzZXNzaW9uIGRldGFpbHMKICAgIAogIDwvYT4KCgo8aDIgaWQ9ImNsYXJpZmljYXRpb24tcXVlc3Rpb25zIiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+UXVlc3Rpb25zIGFza2VkIGJ5IHN1cHBsaWVyczwvaDI+CiAKPHAgY2xhc3M9InN1bW1hcnktaXRlbS1uby1jb250ZW50Ij5ObyBxdWVzdGlvbnMgaGF2ZSBiZWVuIGFuc3dlcmVkIHlldDwvcD4KCgoKICA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL3N1cHBsaWVycy9vcHBvcnR1bml0aWVzLzEyNzU3L2Fzay1hLXF1ZXN0aW9uIj4KICAgIAogICAgICBMb2cgaW4gdG8gYXNrIGEgcXVlc3Rpb24KICAgIAogIDwvYT4KCiAgPC9kaXY+CjwvZGl2PgoKCiAgPGJyLz48IS0tIDwtIHJlbW92ZSBvbmNlIGdyaWQgYW5kIGJvZHkgZWxlbWVudHMgaGF2ZSBiZWVuIGNvbnZlcnRlZCB0byBnb3Z1ayBmcm9udGVuZCAtLT4KICA8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLXJvdyI+CiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLWNvbHVtbi10d28tdGhpcmRzIj4KICAgICAgPGZvcm0gYWN0aW9uPSIvc3VwcGxpZXJzL29wcG9ydHVuaXRpZXMvMTI3NTcvcmVzcG9uc2VzL3N0YXJ0IiBtZXRob2Q9ImdldCI+CiAgICAgICAgCiAgCiAgICAKICAKCjxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iZ292dWstYnV0dG9uIj4KICBBcHBseSBmb3IgdGhpcyBvcHBvcnR1bml0eQo8L2J1dHRvbj4KICAgICAgPC9mb3JtPgogICAgPC9kaXY+CiAgPC9kaXY+CgoKCgogICAgICAgIDwvbWFpbj4KICAgICAgPC9kaXY+CiAgICAKCiAgICAKICA8Zm9vdGVyIGNsYXNzPSJnb3Z1ay1mb290ZXIgIiByb2xlPSJjb250ZW50aW5mbyI+CiAgPGRpdiBjbGFzcz0iZ292dWstd2lkdGgtY29udGFpbmVyICI+CiAgICAKICAgICAgPGRpdiBjbGFzcz0iZ292dWstZm9vdGVyX19uYXZpZ2F0aW9uIj4KICAgICAgICAKICAgICAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fc2VjdGlvbiI+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iZ292dWstZm9vdGVyX19oZWFkaW5nIGdvdnVrLWhlYWRpbmctbSI+QWJvdXQgRGlnaXRhbCBNYXJrZXRwbGFjZTwvaDI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIAogICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0ICI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSIvaGVscCI+CiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3QKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW1hcmtldHBsYWNlLWJ1eWVycy1ndWlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIFNlcnZpY2VzIHlvdSBjYW4gYnV5CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1tYXJrZXRwbGFjZS1zdXBwbGllcnMtZ3VpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICBTZXJ2aWNlcyB5b3UgY2FuIHNlbGwKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9nb3Zlcm5tZW50L29yZ2FuaXNhdGlvbnMvY3Jvd24tY29tbWVyY2lhbC1zZXJ2aWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQWJvdXQgQ3Jvd24gQ29tbWVyY2lhbCBTZXJ2aWNlcwogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9nb3Zlcm5tZW50LWRpZ2l0YWwtc2VydmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IEdvdmVybm1lbnQgRGlnaXRhbCBTZXJ2aWNlcwogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iL2ctY2xvdWQvc3VwcGxpZXJzIj4KICAgICAgICAgICAgICAgICAgICAgICAgRy1DbG91ZCBzdXBwbGllciBBIHRvIFoKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIAogICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX3NlY3Rpb24iPgogICAgICAgICAgICA8aDIgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faGVhZGluZyBnb3Z1ay1oZWFkaW5nLW0iPkd1aWRhbmNlIGZvciB1c2luZyBEaWdpdGFsIE1hcmtldHBsYWNlPC9oMj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QgIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9nLWNsb3VkLXN1cHBsaWVycy1ndWlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFwcGx5aW5nIHRvIHNlbGwgb24gdGhlIEctQ2xvdWQgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtc3VwcGxpZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwbHlpbmcgdG8gc2VsbCBvbiB0aGUgRE9TIGZyYW1ld29yawogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2hvdy10by1zZWxsLXlvdXItZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtc2VydmljZXMiPgogICAgICAgICAgICAgICAgICAgICAgICBSZXNwb25kaW5nIHRvIGJ1eWVyIHJlcXVpcmVtZW50cyBvbiB0aGUgRE9TIGZyYW1ld29yawogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2ctY2xvdWQtYnV5ZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQnV5aW5nIG9uIHRoZSBHLUNsb3VkIGZyYW1ld29yawogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzLWJ1eWVycy1ndWlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEJ1eWluZyBvbiB0aGUgRE9TIGZyYW1ld29yawogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL3RoZS1jcm93bi1ob3N0aW5nLWRhdGEtY2VudHJlcy1mcmFtZXdvcmstb24tdGhlLWRpZ2l0YWwtbWFya2V0cGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICBCdXlpbmcgb24gdGhlIENyb3duIEhvc3RpbmcgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAKICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICA8L2Rpdj4KICAgICAgPGhyIGNsYXNzPSJnb3Z1ay1mb290ZXJfX3NlY3Rpb24tYnJlYWsiPgogICAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX21ldGEiPgogICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX21ldGEtaXRlbSBnb3Z1ay1mb290ZXJfX21ldGEtaXRlbS0tZ3JvdyI+CiAgICAgICAgCiAgICAgICAgICA8aDIgY2xhc3M9ImdvdnVrLXZpc3VhbGx5LWhpZGRlbiI+U3VwcG9ydCBsaW5rczwvaDI+CiAgICAgICAgICAKICAgICAgICAgICAgPHVsIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2lubGluZS1saXN0Ij4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19pbmxpbmUtbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iL3Rlcm1zLWFuZC1jb25kaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICBUZXJtcyBhbmQgY29uZGl0aW9ucwogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2lubGluZS1saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSIvY29va2llcyI+CiAgICAgICAgICAgICAgICAgICAgQ29va2llcwogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2lubGluZS1saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSIvcHJpdmFjeS1ub3RpY2UiPgogICAgICAgICAgICAgICAgICAgIFByaXZhY3kgbm90aWNlCiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX21ldGEtY3VzdG9tIj4KICAgICAgICAgICAgICBCdWlsdCBieSB0aGUgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9nb3Zlcm5tZW50LWRpZ2l0YWwtc2VydmljZSIgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayI+R292ZXJubWVudCBEaWdpdGFsIFNlcnZpY2U8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgCiAgICAgICAgCiAgICAgICAgPHN2ZwogICAgICAgICAgcm9sZT0icHJlc2VudGF0aW9uIgogICAgICAgICAgZm9jdXNhYmxlPSJmYWxzZSIKICAgICAgICAgIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpY2VuY2UtbG9nbyIKICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgIHZpZXdib3g9IjAgMCA0ODMuMiAxOTUuNyIKICAgICAgICAgIGhlaWdodD0iMTciCiAgICAgICAgICB3aWR0aD0iNDEiCiAgICAgICAgPgogICAgICAgICAgPHBhdGgKICAgICAgICAgICAgZmlsbD0iY3VycmVudENvbG9yIgogICAgICAgICAgICBkPSJNNDIxLjUgMTQyLjhWLjFsLTUwLjcgMzIuM3YxNjEuMWgxMTIuNHYtNTAuN3ptLTEyMi4zLTkuNkE0Ny4xMiA0Ny4xMiAwIDAgMSAyMjEgOTcuOGMwLTI2IDIxLjEtNDcuMSA0Ny4xLTQ3LjEgMTYuNyAwIDMxLjQgOC43IDM5LjcgMjEuOGw0Mi43LTI3LjJBOTcuNjMgOTcuNjMgMCAwIDAgMjY4LjEgMGMtMzYuNSAwLTY4LjMgMjAuMS04NS4xIDQ5LjdBOTggOTggMCAwIDAgOTcuOCAwQzQzLjkgMCAwIDQzLjkgMCA5Ny44czQzLjkgOTcuOCA5Ny44IDk3LjhjMzYuNSAwIDY4LjMtMjAuMSA4NS4xLTQ5LjdhOTcuNzYgOTcuNzYgMCAwIDAgMTQ5LjYgMjUuNGwxOS40IDIyLjJoM3YtODcuOGgtODBsMjQuMyAyNy41ek05Ny44IDE0NWMtMjYgMC00Ny4xLTIxLjEtNDcuMS00Ny4xczIxLjEtNDcuMSA0Ny4xLTQ3LjEgNDcuMiAyMSA0Ny4yIDQ3UzEyMy44IDE0NSA5Ny44IDE0NSIKICAgICAgICAgIC8+CiAgICAgICAgPC9zdmc+CiAgICAgICAgPHNwYW4gY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGljZW5jZS1kZXNjcmlwdGlvbiI+CiAgICAgICAgICBBbGwgY29udGVudCBpcyBhdmFpbGFibGUgdW5kZXIgdGhlCiAgICAgICAgICA8YQogICAgICAgICAgICBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIgogICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5uYXRpb25hbGFyY2hpdmVzLmdvdi51ay9kb2Mvb3Blbi1nb3Zlcm5tZW50LWxpY2VuY2UvdmVyc2lvbi8zLyIKICAgICAgICAgICAgcmVsPSJsaWNlbnNlIgogICAgICAgICAgPk9wZW4gR292ZXJubWVudCBMaWNlbmNlIHYzLjA8L2E+LCBleGNlcHQgd2hlcmUgb3RoZXJ3aXNlIHN0YXRlZAogICAgICAgIDwvc3Bhbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbWV0YS1pdGVtIj4KICAgICAgICA8YQogICAgICAgICAgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayBnb3Z1ay1mb290ZXJfX2NvcHlyaWdodC1sb2dvIgogICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cubmF0aW9uYWxhcmNoaXZlcy5nb3YudWsvaW5mb3JtYXRpb24tbWFuYWdlbWVudC9yZS11c2luZy1wdWJsaWMtc2VjdG9yLWluZm9ybWF0aW9uL3VrLWdvdmVybm1lbnQtbGljZW5zaW5nLWZyYW1ld29yay9jcm93bi1jb3B5cmlnaHQvIgogICAgICAgID7CqSBDcm93biBjb3B5cmlnaHQ8L2E+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CjwvZm9vdGVyPgoKCiAgICAKICA8c2NyaXB0IHNyYz0iL3N0YXRpYy9qYXZhc2NyaXB0cy9hcHBsaWNhdGlvbi5qcz8wNjRjM2JmN2Q1OWVjOTcyMTU5MThlNTUzYjMwZTI0OSI+PC9zY3JpcHQ+CiAgCgogIDwvYm9keT4KPC9odG1sPg==
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:17 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12733
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZQ.98L5k7mTGNOtg_J2U6xYiJboWAM
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '30434'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:17 GMT
      Dm-Request-Id:
      - 15a3c100fbe1031c
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:17 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZQ.98L5k7mTGNOtg_J2U6xYiJboWAM;
        Expires=Thu, 23-Jul-2020 09:59:17 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 15a3c100fbe1031c
      X-B3-Traceid:
      - 15a3c100fbe1031c
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 2fa65d58-89f7-431f-52d4-d5413d8eae99
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0fbcb069bd4e72d46684a2e5202ac82d.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - MbIQvXhKbXBnoYYNX2_mFfHiFNTVctjrCXrcamQzoWS3J83INHXVGw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:17 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12705
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZQ.98L5k7mTGNOtg_J2U6xYiJboWAM
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '28500'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:18 GMT
      Dm-Request-Id:
      - e5ebc73bb793ebcf
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:18 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZg.eVtbtgjqdyqZYhP_tBem8D018cc;
        Expires=Thu, 23-Jul-2020 09:59:18 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - e5ebc73bb793ebcf
      X-B3-Traceid:
      - e5ebc73bb793ebcf
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 3bbbebed-75ce-4d2a-54c2-d6a5a320168e
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 aa96b55d26f4ea74047e87b840fdea7c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - kgiWDpHkGCFa2A-qxlhruAsrce_pPNvamdqPpFC4lzCX-1xXwF6eIg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:18 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12752
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZg.eVtbtgjqdyqZYhP_tBem8D018cc
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36699'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:18 GMT
      Dm-Request-Id:
      - 2047004539e6d7ac
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:18 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZg.eVtbtgjqdyqZYhP_tBem8D018cc;
        Expires=Thu, 23-Jul-2020 09:59:18 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 2047004539e6d7ac
      X-B3-Traceid:
      - 2047004539e6d7ac
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - d3b6ad35-8aa2-4773-5b2f-578a1bba0b40
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 bc9df3cb09ccfabb7a1ab0c64009c306.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - SoP45aQeXYW-_7Bxac3zZcovfw7Qe7Q2NGyEoyxCsMhD2QGhtbPZyw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:18 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12743
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZg.eVtbtgjqdyqZYhP_tBem8D018cc
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '31100'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:19 GMT
      Dm-Request-Id:
      - e10baa6dd291defd
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:19 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZw.lYt6jZE5xMkcM-d4kFpRYEPVimA;
        Expires=Thu, 23-Jul-2020 09:59:19 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - e10baa6dd291defd
      X-B3-Traceid:
      - e10baa6dd291defd
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 12aebc75-57ab-451d-4b38-5d3e36f7e7f5
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 a4ba6141247f3b441c87ee1a49ec2851.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - Nx-Dj5NeIJcvoyTmJuZP4jB-Jmwh-GqdSAqPCqjTrekb2JjA7rqyOg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:19 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12732
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZw.lYt6jZE5xMkcM-d4kFpRYEPVimA
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '32859'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:19 GMT
      Dm-Request-Id:
      - 7229a5a0bd4e4bb4
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:19 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZw.lYt6jZE5xMkcM-d4kFpRYEPVimA;
        Expires=Thu, 23-Jul-2020 09:59:19 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 7229a5a0bd4e4bb4
      X-B3-Traceid:
      - 7229a5a0bd4e4bb4
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - db71760a-a8f8-4ba6-5058-1ac35fc942be
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 15c672a1a96e298467d88307b9c85a7b.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - jKlSJCqeP5eWtljEkYF3uZIWUF91ZKQXq7DOsBQzYSgg_P5Qngk-Lg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:19 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12725
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZw.lYt6jZE5xMkcM-d4kFpRYEPVimA
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '42341'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:19 GMT
      Dm-Request-Id:
      - 2de52dc5f29fb574
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:19 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZw.lYt6jZE5xMkcM-d4kFpRYEPVimA;
        Expires=Thu, 23-Jul-2020 09:59:19 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 2de52dc5f29fb574
      X-B3-Traceid:
      - 2de52dc5f29fb574
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - d3f8c46e-b6be-4f64-75cc-d78f8d96f798
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0b7c0b1558a44a398a2a995ce531093b.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - Wi6a_xxZ1Ba3LlQDKKQlX-T7dZIssTujKCCp4ynoHm6v85j7cjmjww==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:19 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12724
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRZw.lYt6jZE5xMkcM-d4kFpRYEPVimA
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '37187'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:20 GMT
      Dm-Request-Id:
      - 8ff1e4c14ed17059
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:20 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRaA.0zojzre5gSRGN4Z47L-bCMBRi4M;
        Expires=Thu, 23-Jul-2020 09:59:20 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 8ff1e4c14ed17059
      X-B3-Traceid:
      - 8ff1e4c14ed17059
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - '096ad414-7348-423e-7acd-970417390abf'
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 ebcb649503fb1051ac327331110822d4.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - DriyqxlxZREGMMi4I689bomcEIHFGkXMw84O8B1fpfxVxBHjqfrnKQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:20 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12722
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRaA.0zojzre5gSRGN4Z47L-bCMBRi4M
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '33309'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:20 GMT
      Dm-Request-Id:
      - 5f839ea6f603b5d8
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:20 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRaA.0zojzre5gSRGN4Z47L-bCMBRi4M;
        Expires=Thu, 23-Jul-2020 09:59:20 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 5f839ea6f603b5d8
      X-B3-Traceid:
      - 5f839ea6f603b5d8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 1d266844-348e-4f93-74e5-e1c9d1268744
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 b3f54d3c6a628831461cdc9d5d466584.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - 4NE9FM77OLm455kcn_AtutKhl0gYKrQhzohSlfguw0GIB6d405mcUw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:20 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12721
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRaA.0zojzre5gSRGN4Z47L-bCMBRi4M
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36144'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:21 GMT
      Dm-Request-Id:
      - 11fb50cb888ffe3c
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:21 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRaQ.LmRmkTFITMuPQ2Z2O8zKZlsdg8Y;
        Expires=Thu, 23-Jul-2020 09:59:21 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 11fb50cb888ffe3c
      X-B3-Traceid:
      - 11fb50cb888ffe3c
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b67784ae-49a1-4ea4-4909-8d0fa0ac99a5
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 7b4a490cbf8618afeab9ef9e754bca44.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - 7t1UYTILkNrGE_6RjRE-yVcgHY2XahIi6cSnQD2z4S-nLRH45Cwa_Q==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:21 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12715
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRaQ.LmRmkTFITMuPQ2Z2O8zKZlsdg8Y
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '38241'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:21 GMT
      Dm-Request-Id:
      - c371f846296c7fbc
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:21 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRaQ.LmRmkTFITMuPQ2Z2O8zKZlsdg8Y;
        Expires=Thu, 23-Jul-2020 09:59:21 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - c371f846296c7fbc
      X-B3-Traceid:
      - c371f846296c7fbc
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - eede9ef3-ae4b-4649-60cd-3413c7342abb
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 3e37a185adf0633e53d97f7c71ebc945.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - NcCt6S7FXKEmrnHNNMSnkoUp4GNPhspOB_0BhH53wuHlg1KXOJdYlg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:22 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12608
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRaQ.LmRmkTFITMuPQ2Z2O8zKZlsdg8Y
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '39993'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:22 GMT
      Dm-Request-Id:
      - e9c6cb3c0170fd47
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:22 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRag.xXvaoOjVEKLbdySBtEczUGOpoMw;
        Expires=Thu, 23-Jul-2020 09:59:22 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - e9c6cb3c0170fd47
      X-B3-Traceid:
      - e9c6cb3c0170fd47
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - df3cdbad-0906-4353-56c9-e006765256be
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 a4b14ec1411057263166d6facf9b30b8.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - eARE7vrC90E1XSE2BjP8IoL_mwtx6g2XI6jYWEsIBja__WtzH0JnXQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        CjwhRE9DVFlQRSBodG1sPgo8aHRtbCBsYW5nPSJlbiIgY2xhc3M9ImdvdnVrLXRlbXBsYXRlICI+CiAgPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4KICAgIDx0aXRsZT4KICByZWQgdGVhbSBhc3Nlc3NtZW50IC0gRGlnaXRhbCBNYXJrZXRwbGFjZQo8L3RpdGxlPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCB2aWV3cG9ydC1maXQ9Y292ZXIiPgogICAgPG1ldGEgbmFtZT0idGhlbWUtY29sb3IiIGNvbnRlbnQ9IiMwYjBjMGMiIC8+IAogICAgCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+CgogICAgCiAgICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgc2l6ZXM9IjE2eDE2IDMyeDMyIDQ4eDQ4IiBocmVmPSIvc3RhdGljL2ltYWdlcy9mYXZpY29uLmljbyIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPgogICAgICA8bGluayByZWw9Im1hc2staWNvbiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZ292dWstbWFzay1pY29uLnN2ZyIgY29sb3I9IiMwYjBjMGMiPiAKICAgICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTgweDE4MCIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZ292dWstYXBwbGUtdG91Y2gtaWNvbi0xODB4MTgwLnBuZyI+CiAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE2N3gxNjciIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdnVrLWFwcGxlLXRvdWNoLWljb24tMTY3eDE2Ny5wbmciPgogICAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSIxNTJ4MTUyIiBocmVmPSIvc3RhdGljL2ltYWdlcy9nb3Z1ay1hcHBsZS10b3VjaC1pY29uLTE1MngxNTIucG5nIj4KICAgICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBocmVmPSIvc3RhdGljL2ltYWdlcy9nb3Z1ay1hcHBsZS10b3VjaC1pY29uLnBuZyI+CiAgICAKCiAgICAKICAKCgoKCgoKCgogIAogIDxtZXRhIG5hbWU9Imdvb2dsZS1zaXRlLXZlcmlmaWNhdGlvbiIgY29udGVudD0iVEtHU0dabmZIcHgxLWxLT3RoSTE3QU50d2s3ZnozRjRTYnI3N0kwcHBPMCI+CgogIDxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvYXBwbGljYXRpb24uY3NzPzc1MDdhOTA5ZWRjNmQ3ODUzOTJlNmQwZWU3OWJmOWNjIiAvPgogIAoKICAgIAogICAgCiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Ii9zdGF0aWMvaW1hZ2VzL2dvdnVrLW9wZW5ncmFwaC1pbWFnZS5wbmciPgogIDwvaGVhZD4KICA8Ym9keSBjbGFzcz0iZ292dWstdGVtcGxhdGVfX2JvZHkgIj4KICAgIDxzY3JpcHQ+ZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSAoKGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lKSA/IGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lICsgJyBqcy1lbmFibGVkJyA6ICdqcy1lbmFibGVkJyk7PC9zY3JpcHQ+CiAgICAKCiAgICAKICAgICAgPGEgaHJlZj0iI21haW4tY29udGVudCIgY2xhc3M9ImdvdnVrLXNraXAtbGluayI+U2tpcCB0byBtYWluIGNvbnRlbnQ8L2E+CiAgICAKCiAgICAKICAKICAKCgoKCjxkaXYgaWQ9ImRtLWNvb2tpZS1iYW5uZXIiIGNsYXNzPSJkbS1jb29raWUtYmFubmVyIGdvdnVrLXdpZHRoLWNvbnRhaW5lciIgZGF0YS1tb2R1bGU9ImRtLWNvb2tpZS1iYW5uZXIiIHJvbGU9InJlZ2lvbiIgYXJpYS1kZXNjcmliZWRieT0iZG0tY29va2llLWJhbm5lcl9faGVhZGluZyI+CiAgPGRpdiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9fd3JhcHBlciI+CiAgICA8aDIgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXJfX2hlYWRpbmcgZ292dWstaGVhZGluZy1tIiBpZD0iZG0tY29va2llLWJhbm5lcl9faGVhZGluZyI+CiAgICAgIENhbiB3ZSBzdG9yZSBhbmFseXRpY3MgY29va2llcyBvbiB5b3VyIGRldmljZT8KICAgIDwvaDI+CiAgICA8cCBjbGFzcz0iZ292dWstYm9keSI+CiAgICAgIEFuYWx5dGljcyBjb29raWVzIGhlbHAgdXMgdW5kZXJzdGFuZCBob3cgb3VyIHdlYnNpdGUgaXMgYmVpbmcgdXNlZC4KICAgIDwvcD4KICAgIDxkaXYgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXJfX2J1dHRvbnMiPgogICAgICA8YnV0dG9uIGNsYXNzPSJnb3Z1ay1idXR0b24gZG0tY29va2llLWJhbm5lcl9fYnV0dG9uIGRtLWNvb2tpZS1iYW5uZXJfX2J1dHRvbi0tYWNjZXB0IiB0eXBlPSJzdWJtaXQiIGRhdGEtYWNjZXB0LWNvb2tpZXM9InRydWUiIGFyaWEtZGVzY3JpYmVkYnk9ImRtLWNvb2tpZS1iYW5uZXJfX2hlYWRpbmciPgogICAgICAgIFllczxzcGFuIGNsYXNzPSJnb3Z1ay12aXN1YWxseS1oaWRkZW4iPiwgRGlnaXRhbCBNYXJrZXRwbGFjZSBjYW4gc3RvcmUgYW5hbHl0aWNzIGNvb2tpZXMgb24geW91ciBkZXZpY2U8L3NwYW4+CiAgICAgIDwvYnV0dG9uPgogICAgICA8YnV0dG9uIGNsYXNzPSJnb3Z1ay1idXR0b24gZG0tY29va2llLWJhbm5lcl9fYnV0dG9uIGRtLWNvb2tpZS1iYW5uZXJfX2J1dHRvbi0tcmVqZWN0IiB0eXBlPSJzdWJtaXQiIGRhdGEtYWNjZXB0LWNvb2tpZXM9ImZhbHNlIiBhcmlhLWRlc2NyaWJlZGJ5PSJkbS1jb29raWUtYmFubmVyX19oZWFkaW5nIj4KICAgICAgICBObzxzcGFuIGNsYXNzPSJnb3Z1ay12aXN1YWxseS1oaWRkZW4iPiwgRGlnaXRhbCBNYXJrZXRwbGFjZSBjYW5ub3Qgc3RvcmUgYW5hbHl0aWNzIGNvb2tpZXMgb24geW91ciBkZXZpY2U8L3NwYW4+CiAgICAgIDwvYnV0dG9uPgogICAgICA8YSBjbGFzcz0iZ292dWstbGluayBkbS1jb29raWUtYmFubmVyX19saW5rIiBocmVmPSIvY29va2llcyI+SG93IERpZ2l0YWwgTWFya2V0cGxhY2UgdXNlcyBjb29raWVzPC9hPgogICAgPC9kaXY+CiAgPC9kaXY+CgogIDxkaXYgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXJfX2NvbmZpcm1hdGlvbiIgdGFiaW5kZXg9Ii0xIj4KICAgIDxwIGNsYXNzPSJkbS1jb29raWUtYmFubmVyX19jb25maXJtYXRpb24tbWVzc2FnZSBnb3Z1ay1ib2R5Ij4KICAgICAgWW91IGNhbiA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL3VzZXIvY29va2llLXNldHRpbmdzIj5jaGFuZ2UgeW91ciBjb29raWUgc2V0dGluZ3M8L2E+IGF0IGFueSB0aW1lLgogICAgPC9wPgogICAgPGJ1dHRvbiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9faGlkZS1idXR0b24gZ292dWstbGluayIgZGF0YS1oaWRlLWNvb2tpZS1iYW5uZXI9InRydWUiIHJvbGU9ImxpbmsiPkhpZGU8L2J1dHRvbj4KICA8L2Rpdj4KPC9kaXY+CgogIAoKCgoKCiAgCiAgCgoKCiAgCgo8aGVhZGVyIGNsYXNzPSJnb3Z1ay1oZWFkZXIgIiByb2xlPSJiYW5uZXIiIGRhdGEtbW9kdWxlPSJoZWFkZXIiPgogIDxkaXYgY2xhc3M9ImdvdnVrLWhlYWRlcl9fY29udGFpbmVyIGdvdnVrLXdpZHRoLWNvbnRhaW5lciI+CgogICAgPGRpdiBjbGFzcz0iZ292dWstaGVhZGVyX19sb2dvIj4KICAgICAgPGEgaHJlZj0iLyIgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbGluayBnb3Z1ay1oZWFkZXJfX2xpbmstLWhvbWVwYWdlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iZ292dWstaGVhZGVyX19sb2dvdHlwZSI+CiAgICAgICAgICAKICAgICAgICAgIDxzdmcKICAgICAgICAgICAgcm9sZT0icHJlc2VudGF0aW9uIgogICAgICAgICAgICBmb2N1c2FibGU9ImZhbHNlIgogICAgICAgICAgICBjbGFzcz0iZ292dWstaGVhZGVyX19sb2dvdHlwZS1jcm93biIKICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICB2aWV3Ym94PSIwIDAgMTMyIDk3IgogICAgICAgICAgICBoZWlnaHQ9IjMyIgogICAgICAgICAgICB3aWR0aD0iMzYiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgZmlsbD0iY3VycmVudENvbG9yIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiCiAgICAgICAgICAgICAgZD0iTTI1IDMwLjJjMy41IDEuNSA3LjctLjIgOS4xLTMuNyAxLjUtMy42LS4yLTcuOC0zLjktOS4yLTMuNi0xLjQtNy42LjMtOS4xIDMuOS0xLjQgMy41LjMgNy41IDMuOSA5ek05IDM5LjVjMy42IDEuNSA3LjgtLjIgOS4yLTMuNyAxLjUtMy42LS4yLTcuOC0zLjktOS4xLTMuNi0xLjUtNy42LjItOS4xIDMuOC0xLjQgMy41LjMgNy41IDMuOCA5ek00LjQgNTcuMmMzLjUgMS41IDcuNy0uMiA5LjEtMy44IDEuNS0zLjYtLjItNy43LTMuOS05LjEtMy41LTEuNS03LjYuMy05LjEgMy44LTEuNCAzLjUuMyA3LjYgMy45IDkuMXptMzguMy0yMS40YzMuNSAxLjUgNy43LS4yIDkuMS0zLjggMS41LTMuNi0uMi03LjctMy45LTkuMS0zLjYtMS41LTcuNi4zLTkuMSAzLjgtMS4zIDMuNi40IDcuNyAzLjkgOS4xem02NC40LTUuNmMtMy42IDEuNS03LjgtLjItOS4xLTMuNy0xLjUtMy42LjItNy44IDMuOC05LjIgMy42LTEuNCA3LjcuMyA5LjIgMy45IDEuMyAzLjUtLjQgNy41LTMuOSA5em0xNS45IDkuM2MtMy42IDEuNS03LjctLjItOS4xLTMuNy0xLjUtMy42LjItNy44IDMuNy05LjEgMy42LTEuNSA3LjcuMiA5LjIgMy44IDEuNSAzLjUtLjMgNy41LTMuOCA5em00LjcgMTcuN2MtMy42IDEuNS03LjgtLjItOS4yLTMuOC0xLjUtMy42LjItNy43IDMuOS05LjEgMy42LTEuNSA3LjcuMyA5LjIgMy44IDEuMyAzLjUtLjQgNy42LTMuOSA5LjF6TTg5LjMgMzUuOGMtMy42IDEuNS03LjgtLjItOS4yLTMuOC0xLjQtMy42LjItNy43IDMuOS05LjEgMy42LTEuNSA3LjcuMyA5LjIgMy44IDEuNCAzLjYtLjMgNy43LTMuOSA5LjF6TTY5LjcgMTcuN2w4LjkgNC43VjkuM2wtOC45IDIuOGMtLjItLjMtLjUtLjYtLjktLjlMNzIuNCAwSDU5LjZsMy41IDExLjJjLS4zLjMtLjYuNS0uOS45bC04LjgtMi44djEzLjFsOC44LTQuN2MuMy4zLjYuNy45LjlsLTUgMTUuNHYuMWMtLjIuOC0uNCAxLjYtLjQgMi40IDAgNC4xIDMuMSA3LjUgNyA4LjFoLjJjLjMgMCAuNy4xIDEgLjEuNCAwIC43IDAgMS0uMWguMmM0LS42IDcuMS00LjEgNy4xLTguMSAwLS44LS4xLTEuNy0uNC0yLjRWMzRsLTUuMS0xNS40Yy40LS4yLjctLjYgMS0uOXpNNjYgOTIuOGMxNi45IDAgMzIuOCAxLjEgNDcuMSAzLjIgNC0xNi45IDguOS0yNi43IDE0LTMzLjVsLTkuNi0zLjRjMSA0LjkgMS4xIDcuMiAwIDEwLjItMS41LTEuNC0zLTQuMy00LjItOC43TDEwOC42IDc2YzIuOC0yIDUtMy4yIDcuNS0zLjMtNC40IDkuNC0xMCAxMS45LTEzLjYgMTEuMi00LjMtLjgtNi4zLTQuNi01LjYtNy45IDEtNC43IDUuNy01LjkgOC0uNSA0LjMtOC43LTMtMTEuNC03LjYtOC44IDcuMS03LjIgNy45LTEzLjUgMi4xLTIxLjEtOCA2LjEtOC4xIDEyLjMtNC41IDIwLjgtNC43LTUuNC0xMi4xLTIuNS05LjUgNi4yIDMuNC01LjIgNy45LTIgNy4yIDMuMS0uNiA0LjMtNi40IDcuOC0xMy41IDcuMi0xMC4zLS45LTEwLjktOC0xMS4yLTEzLjggMi41LS41IDcuMSAxLjggMTEgNy4zTDgwLjIgNjBjLTQuMSA0LjQtOCA1LjMtMTIuMyA1LjQgMS40LTQuNCA4LTExLjYgOC0xMS42SDU1LjVzNi40IDcuMiA3LjkgMTEuNmMtNC4yLS4xLTgtMS0xMi4zLTUuNGwxLjQgMTYuNGMzLjktNS41IDguNS03LjcgMTAuOS03LjMtLjMgNS44LS45IDEyLjgtMTEuMSAxMy44LTcuMi42LTEyLjktMi45LTEzLjUtNy4yLS43LTUgMy44LTguMyA3LjEtMy4xIDIuNy04LjctNC42LTExLjYtOS40LTYuMiAzLjctOC41IDMuNi0xNC43LTQuNi0yMC44LTUuOCA3LjYtNSAxMy45IDIuMiAyMS4xLTQuNy0yLjYtMTEuOS4xLTcuNyA4LjggMi4zLTUuNSA3LjEtNC4yIDguMS41LjcgMy4zLTEuMyA3LjEtNS43IDcuOS0zLjUuNy05LTEuOC0xMy41LTExLjIgMi41LjEgNC43IDEuMyA3LjUgMy4zbC00LjctMTUuNGMtMS4yIDQuNC0yLjcgNy4yLTQuMyA4LjctMS4xLTMtLjktNS4zIDAtMTAuMmwtOS41IDMuNGM1IDYuOSA5LjkgMTYuNyAxNCAzMy41IDE0LjgtMi4xIDMwLjgtMy4yIDQ3LjctMy4yeiIKICAgICAgICAgICAgPjwvcGF0aD4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbWFnZSBzcmM9Ii9hc3NldHMvaW1hZ2VzL2dvdnVrLWxvZ290eXBlLWNyb3duLnBuZyIgeGxpbms6aHJlZj0iIiBjbGFzcz0iZ292dWstaGVhZGVyX19sb2dvdHlwZS1jcm93bi1mYWxsYmFjay1pbWFnZSIgd2lkdGg9IjM2IiBoZWlnaHQ9IjMyIj48L2ltYWdlPgogICAgICAgICAgPC9zdmc+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iZ292dWstaGVhZGVyX19sb2dvdHlwZS10ZXh0Ij4KICAgICAgICAgICAgR09WLlVLCiAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX3Byb2R1Y3QtbmFtZSI+CiAgICAgICAgICBEaWdpdGFsIE1hcmtldHBsYWNlCiAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgICA8L2E+CiAgICA8L2Rpdj4KICAgIAogICAgPGRpdiBjbGFzcz0iZ292dWstaGVhZGVyX19jb250ZW50Ij4KCiAgICAKCiAgICAKICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiByb2xlPSJidXR0b24iIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX21lbnUtYnV0dG9uIGpzLWhlYWRlci10b2dnbGUiIGFyaWEtY29udHJvbHM9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IlNob3cgb3IgaGlkZSBUb3AgTGV2ZWwgTmF2aWdhdGlvbiI+TWVudTwvYnV0dG9uPgogICAgPG5hdj4KICAgICAgPHVsIGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iZ292dWstaGVhZGVyX19uYXZpZ2F0aW9uICIgYXJpYS1sYWJlbD0iVG9wIExldmVsIE5hdmlnYXRpb24iPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstaGVhZGVyX19uYXZpZ2F0aW9uLWl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9idXlpbmctYW5kLXNlbGxpbmctb24tdGhlLWRpZ2l0YWwtbWFya2V0cGxhY2UiPgogICAgICAgICAgICAgICAgR3VpZGFuY2UKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbmF2aWdhdGlvbi1pdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstaGVhZGVyX19saW5rIiBocmVmPSIvaGVscCI+CiAgICAgICAgICAgICAgICBIZWxwCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX25hdmlnYXRpb24taXRlbSI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbGluayIgaHJlZj0iL3VzZXIvbG9naW4iPgogICAgICAgICAgICAgICAgTG9nIGluCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgCiAgICAgIDwvdWw+CiAgICA8L25hdj4KICAgIAogICAgPC9kaXY+CiAgICAKICA8L2Rpdj4KPC9oZWFkZXI+CgoKICAgIAogICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay13aWR0aC1jb250YWluZXIiPgogICAgICAgIAogIAogICAgPGRpdiBjbGFzcz0iZ292dWstcGhhc2UtYmFubmVyIj4KICA8cCBjbGFzcz0iZ292dWstcGhhc2UtYmFubmVyX19jb250ZW50Ij48c3Ryb25nIGNsYXNzPSJnb3Z1ay10YWcgZ292dWstcGhhc2UtYmFubmVyX19jb250ZW50X190YWcgIj4KICBiZXRhCjwvc3Ryb25nPjxzcGFuIGNsYXNzPSJnb3Z1ay1waGFzZS1iYW5uZXJfX3RleHQiPgogICAgICBIZWxwIHVzIGltcHJvdmUgdGhlIERpZ2l0YWwgTWFya2V0cGxhY2UgLSA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2hlbHAiPnNlbmQgeW91ciBmZWVkYmFjazwvYT4KICAgIDwvc3Bhbj4KICA8L3A+CjwvZGl2PgogIAogIAo8ZGl2IGNsYXNzPSJnb3Z1ay1icmVhZGNydW1icyI+CiAgPG9sIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGlzdCI+CiAgCiAgICAKICAgIDxsaSBjbGFzcz0iZ292dWstYnJlYWRjcnVtYnNfX2xpc3QtaXRlbSI+CiAgICAgIDxhIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGluayIgaHJlZj0iLyI+RGlnaXRhbCBNYXJrZXRwbGFjZTwvYT4KICAgIDwvbGk+CiAgICAKICAKICAgIAogICAgPGxpIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGlzdC1pdGVtIj4KICAgICAgPGEgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcyI+U3VwcGxpZXIgb3Bwb3J0dW5pdGllczwvYT4KICAgIDwvbGk+CiAgICAKICAKICA8L29sPgo8L2Rpdj4KCgogICAgICAgIDxtYWluIGNsYXNzPSJnb3Z1ay1tYWluLXdyYXBwZXIgIiBpZD0ibWFpbi1jb250ZW50IiByb2xlPSJtYWluIj4KICAgICAgICAgIAogIAogICAgCiAgICAgIAogICAgCiAgCiAgCiAgICAKICAKICAKCgoKPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtY29sdW1uLXR3by10aGlyZHMiPgogICAgPHNwYW4gY2xhc3M9ImdvdnVrLWNhcHRpb24tbCI+UmljaG1vbmQgdXBvbiBUaGFtZXMgQ29sbGVnZTwvc3Bhbj4KICAgIDxoMSBjbGFzcz0iZ292dWstaGVhZGluZy1sIj5yZWQgdGVhbSBhc3Nlc3NtZW50PC9oMT4KICAgIDxzcGFuIGRhdGEtbG90PSJkaWdpdGFsLW91dGNvbWVzIj48L3NwYW4+CiAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1yb3cgZ292dWstIS1tYXJnaW4tYm90dG9tLTkiPgogIDxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtY29sdW1uLW9uZS10aGlyZCBhcHAtc3RhdC1ibG9jayIgaWQ9ImluY29tcGxldGUtYXBwbGljYXRpb25zIj4KICAgPGgyPgogICAgICA8c3BhbiBjbGFzcz0iZ292dWstIS1mb250LXNpemUtMzYgZ292dWstIS1kaXNwbGF5LWJsb2NrIj4yMTwvc3Bhbj4KICAgICAgPHNwYW4+SW5jb21wbGV0ZSBhcHBsaWNhdGlvbnM8L3NwYW4+CiAgIDwvaDI+CiAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtZm9udC1zaXplLTE2Ij4xMiBTTUUsIDkgbGFyZ2U8L3A+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLWNvbHVtbi1vbmUtdGhpcmQgYXBwLXN0YXQtYmxvY2siIGlkPSJjb21wbGV0ZWQtYXBwbGljYXRpb25zIj4KICAgPGgyPgogICAgICA8c3BhbiBjbGFzcz0iZ292dWstIS1mb250LXNpemUtMzYgZ292dWstIS1kaXNwbGF5LWJsb2NrIj43PC9zcGFuPgogICAgICA8c3Bhbj5Db21wbGV0ZWQgYXBwbGljYXRpb25zPC9zcGFuPgogICA8L2gyPgogICA8cCBjbGFzcz0iZ292dWstYm9keSBnb3Z1ay0hLWZvbnQtc2l6ZS0xNiI+NyBTTUUsIDAgbGFyZ2U8L3A+CjwvZGl2PgoKPC9kaXY+Cgo8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1jb2x1bW4tZnVsbCI+CiAgICAKCjxoMiBjbGFzcz0iZ292dWstdmlzdWFsbHktaGlkZGVuIj5JbXBvcnRhbnQgZGF0ZXM8L2gyPgoKCgogIAoKICAKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCIgaWQ9Im9wcG9ydHVuaXR5LWltcG9ydGFudC1kYXRlcyI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFB1Ymxpc2hlZAogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFdlZG5lc2RheSAxNSBKdWx5IDIwMjAKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgRGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnMKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBXZWRuZXNkYXkgMjIgSnVseSAyMDIwIGF0IDExOjU5cG0gR01UCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIENsb3NpbmcgZGF0ZSBmb3IgYXBwbGljYXRpb25zCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgV2VkbmVzZGF5IDI5IEp1bHkgMjAyMCBhdCAxMTo1OXBtIEdNVAogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKCiAgPGgyIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTEiIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0gYXBwLXN1bW1hcnktbGlzdC1oZWFkaW5nIj5PdmVydmlldzwvaDI+CiAgCiAgCgoKICAKCiAgCgogIAoKICAKCiAgCgogIAo8ZGwgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QtLXRvcC1ib3JkZXIgZ292dWstIS1tYXJnaW4tYm90dG9tLTgiPgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBTdW1tYXJ5IG9mIHRoZSB3b3JrCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgUnVUQyByZXF1aXJlcyBhIOKAnFJlZCB0ZWFt4oCdIGV4ZXJjaXNlIHVzaW5nIGFwcHJvcHJpYXRlIHRhY3RpY3MsIHRlY2huaXF1ZXMgYW5kIHByb2NlZHVyZXMgdG8gZW11bGF0ZSBhIHJlYWwtd29ybGQgdGhyZWF0IHdpdGggdGhlIGdvYWwgb2YgdHJhaW5pbmcgb3VyIChCbHVlKSB0ZWFtIGFuZCBtZWFzdXJpbmcgdGhlIGVmZmVjdGl2ZW5lc3Mgb2YgdGhlIHBlb3BsZSwgcHJvY2Vzc2VzLCBhbmQgdGVjaG5vbG9neSB1c2VkIHRvIGRlZmVuZCBvdXIgSVQgZW52aXJvbm1lbnQuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIExhdGVzdCBzdGFydCBkYXRlCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgVGh1cnNkYXkgMSBPY3RvYmVyIDIwMjAKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgRXhwZWN0ZWQgY29udHJhY3QgbGVuZ3RoCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgTWF4aW11bSAzIG1vbnRocwogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBMb2NhdGlvbgogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIExvbmRvbgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBPcmdhbmlzYXRpb24gdGhlIHdvcmsgaXMgZm9yCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgUmljaG1vbmQgdXBvbiBUaGFtZXMgQ29sbGVnZQogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBCdWRnZXQgcmFuZ2UKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBNYXhpbXVtIMKjMzAsMDAwIEdCUCBpbmMgVkFUCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCjwvZGw+CgogIDxoMiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0yIiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+QWJvdXQgdGhlIHdvcms8L2gyPgogIAogIAoKCiAgCgogIAoKICAKCiAgCgogIAoKICAKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFdoeSB0aGUgd29yayBpcyBiZWluZyBkb25lCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgUnVUQyByZXF1aXJlcyBhIOKAnFJlZCB0ZWFt4oCdIGV4ZXJjaXNlIHVzaW5nIGFwcHJvcHJpYXRlIHRhY3RpY3MsIHRlY2huaXF1ZXMgYW5kIHByb2NlZHVyZXMgdG8gZW11bGF0ZSBhIHJlYWwtd29ybGQgdGhyZWF0IHdpdGggdGhlIGdvYWwgb2YgdHJhaW5pbmcgb3VyIChCbHVlKSB0ZWFtIGFuZCBtZWFzdXJpbmcgdGhlIGVmZmVjdGl2ZW5lc3Mgb2YgdGhlIHBlb3BsZSwgcHJvY2Vzc2VzLCBhbmQgdGVjaG5vbG9neSB1c2VkIHRvIGRlZmVuZCBvdXIgSVQgZW52aXJvbm1lbnQuIDxicj48YnI+VGhpcyB3b3JrIHNob3VsZCBiZSBjb21wbGV0ZWQgYmVmb3JlIHRoZSBlbmQgb2YgT2N0b2JlciAyMDIwIC0gYW5kIHNvb25lciBpZiBwb3NzaWJsZS4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgUHJvYmxlbSB0byBiZSBzb2x2ZWQKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBXZSBhbnRpY2lwYXRlIHVzZSBvZiB0aGUgbGF0ZXN0IHRhY3RpY3MgdXNlZCBieSByZWFsIHdvcmxkIHRocmVhdCBhY3RvcnMgdG8gYWlkIHdpdGggdGhlIHN1Y2Nlc3NmdWwgZGVsaXZlcnkgb2YgdGhlIHNlcnZpY2VzIHdoaWNoIHdlIGhhdmUgc3BsaXQgaW50byBhIDMtc3RhZ2Ugc2NlbmFyaW8gYXBwcm9hY2gsIHRvIGhlbHAgdXMgZ2FpbiBjbGFyaXR5IG9uIHRoZSBjdXJyZW50IHNlY3VyaXR5IHJpc2tzIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXJlYXMgcmV2aWV3ZWQuICA8YnI+PGJyPkJpZGRlcnMgYXJlIHJlcXVpcmVkIHRvIGRldGFpbCB0aGVpciBhcHByb2FjaCwgdG9vbHMsIHRhY3RpY3MgYW5kIHByb2NlZHVyZXMgcmVnYXJkaW5nIHRoZSBleGVjdXRpb24gb2YgdGhlIHRocmVlIHNjZW5hcmlvcyBiZWxvdzo8YnI+4oCiCVNjZW5hcmlvIDE6IEFzc3VtZWQgY29tcHJvbWlzZSA8YnI+4oCiCVNjZW5hcmlvIDI6IFZpcnR1YWwgRGVza3RvcCBJbmZyYXN0cnVjdHVyZSAoVkRJKSBicmVha291dCA8YnI+4oCiCVNjZW5hcmlvIDM6IFJhbnNvbXdhcmUgPGJyPjxicj5CaWRkZXJzIHNob3VsZCBhZHZpc2UgdGhlIHN0ZXBzIHRoYXQgdGhleSBpbnRlbmQgdG8gdGFrZSBmb3IgZWFjaCBzY2VuYXJpby4gRm9yIGV4YW1wbGU6PGJyPuKAoglUZXN0aW5nPGJyPuKAoglFeGVjdXRpb248YnI+4oCiCUFzc2Vzc21lbnQ8YnI+4oCiCVJlcG9ydGluZzxicj48YnI+RGVsaXZlcmFibGVzPGJyPjEpCVJlcG9ydCB0byBpbmNsdWRlIHN1ZmZpY2llbnQgdGVjaG5pY2FsIGRldGFpbCB0byBlbmFibGUgZGVmZW5jZSBhZ2FpbnN0IHRoZSB0aHJlYXQgdHlwZXMgYWRkcmVzc2VkLCBhbmQgYW4gYXNzZXNzbWVudCBvZiB0aGUgZWZmZWN0aXZlbmVzcyBvZiBleGlzdGluZyBtZWFzdXJlcyBhZ2FpbnN0IHBlbmV0cmF0aW9uLiA8YnI+MikJV29ya3Nob3AgYXQgdGhlIGVuZCBvZiB0aGUgYXNzZXNzbWVudCB0byBhY2hpZXZlIGVmZmVjdGl2ZSBrbm93bGVkZ2UgdHJhbnNmZXIuPGJyPjxicj5SZXNwb25zZSBGb3JtYXQ6PGJyPjxicj5TY2VuYXJpbyAxOiBBc3N1bWVkIGNvbXByb21pc2UuLi4uLi4uLi4uRGF5czxicj5TY2VuYXJpbyAyOiBWaXJ0dWFsIERlc2t0b3AgSW5mcmFzdHJ1Y3R1cmUgKFZESSkgYnJlYWtvdXQuLi4uLi4uLi4uRGF5czxicj5TY2VuYXJpbyAzOiBSYW5zb213YXJlLi4uLi4uLi4uLkRheXM8YnI+RGV0ZWN0aW9uIGFuZCByZXNwb25zZSB3b3Jrc2hvcC4uLi4uLi4uLi5EYXlzCTxicj5SZXBvcnRpbmcuLi4uLi4uLi4uRGF5cwk8YnI+VG90YWwgRGF5cy4uLi4uLi4uLi4uLi4uLi48YnI+VG90YWwgZmVlcyBpbmMgVkFUCcKjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLjxicj48YnI+QmlkZGVycyBhcmUgd2VsY29tZSB0byBzdWJtaXQgZnVydGhlciBpbmZvcm1hdGlvbiB0byBzdXBwbGVtZW50IHRoZSBhYm92ZSB0YWJsZSwgcGFydGljdWxhcmx5IGV4cGxhaW5pbmcgaG93IHRoZSBzZXJ2aWNlcyB3aWxsIGJlIHByb3ZpZGVkIGFuZCBhbnkgb3B0aW9ucyBhdmFpbGFibGUgdG8gUnVUQy4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgV2hvIHRoZSB1c2VycyBhcmUgYW5kIHdoYXQgdGhleSBuZWVkIHRvIGRvCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgQXMgYSBGdXJ0aGVyIEVkdWNhdGlvbiBDb2xsZWdlIElUIERlcGFydG1lbnQsIHdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgYWxsIG5ldHdvcmtzIGFuZCBzeXN0ZW1zIGFyZSBzZWN1cmUgZnJvbSBhdHRhY2sgaW4gb3JkZXIgdG8gcHJvdGVjdCBkYXRhIGFuZCB1bHRpbWF0ZWx5IHRoZSBkYXRhIHN1YmplY3RzLjxicj48YnI+V2UgY2FuIHByb3ZpZGUgYSBzdGFuZGFyZC1idWlsZCBjb21wdXRlciBhbmQgZGVkaWNhdGVkIHVzZXIgYWNjb3VudCB0byBhc3Npc3Qgd2l0aCB0aGUgJiMzOTthc3N1bWVkIGNvbXByb21pc2UmIzM5OyBzY2VuYXJpby4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgRWFybHkgbWFya2V0IGVuZ2FnZW1lbnQKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICAKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgQW55IHdvcmsgdGhhdOKAmXMgYWxyZWFkeSBiZWVuIGRvbmUKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICAKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgRXhpc3RpbmcgdGVhbQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRoZSBDb2xsZWdlIGhhcyBhIHNtYWxsIGRlZGljYXRlZCBJVCB0ZWFtIHdpdGggYSBtaXh0dXJlIG9mIHNraWxscyBhbmQgYWJpbGl0aWVzLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBDdXJyZW50IHBoYXNlCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgTm90IHN0YXJ0ZWQKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCiAgPGgyIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTMiIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0gYXBwLXN1bW1hcnktbGlzdC1oZWFkaW5nIj5Xb3JrIHNldHVwPC9oMj4KICAKICAKCgogIAoKICAKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEFkZHJlc3Mgd2hlcmUgdGhlIHdvcmsgd2lsbCB0YWtlIHBsYWNlCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgVHdpY2tlbmhhbSwgTWlkZGxlc2V4LCBmb3IgdGhlIHdvcmtzaG9wIGVsZW1lbnQ8YnI+UmVtb3RlIHdvcmtpbmcgaXMgZW52aXNhZ2VkIGZvciB0aGUgbW9zdCBwYXJ0CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFdvcmtpbmcgYXJyYW5nZW1lbnRzCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgV2UgYXJlIG9wZW4gdG8gc3VnZ2VzdGlvbnMgb24gYXBwcm9wcmlhdGUgbWV0aG9kcyBvZiB3b3JraW5nIHRvIGNvbXBsZXRlIHRoaXMgd29yay4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgU2VjdXJpdHkgY2xlYXJhbmNlCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgQmlkZGVycyBzaG91bGQgcHJvdmlkZSBkZXRhaWxzIG9mIHRoZWlyIHNlY3VyaXR5IGNyZWRlbnRpYWxzIGFuZCB0aGUgc3RhbmRhcmRzIHRvIGJlIGVtcGxveWVkIGluIHRoaXMgd29yawogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKICA8aDIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtNCIgY2xhc3M9ImdvdnVrLWhlYWRpbmctbSBhcHAtc3VtbWFyeS1saXN0LWhlYWRpbmciPkFkZGl0aW9uYWwgaW5mb3JtYXRpb248L2gyPgogIAogIAoKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEFkZGl0aW9uYWwgdGVybXMgYW5kIGNvbmRpdGlvbnMKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBUaGUgYmFzaXMgb2YgdGhlIHByaWNlIHNoYWxsIGJlIGZpeGVkIGFuZCBpbmNsdXNpdmUgb2YgYWxsIGNvc3RzIGZvciB0aGUgY29udHJhY3QgdGVybS4gUHJvcG9zZWQgcHJpY2VzIHNob3VsZCByZW1haW4gdmFsaWQgZm9yIDkwIGRheXMgZnJvbSB0aGUgZGF0ZSBvZiB0aGUgc3VibWlzc2lvbi4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCiAgPGgyIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTUiIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0gYXBwLXN1bW1hcnktbGlzdC1oZWFkaW5nIj5Ta2lsbHMgYW5kIGV4cGVyaWVuY2U8L2gyPgogIAogIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0zIj5CdXllcnMgd2lsbCB1c2UgdGhlIGVzc2VudGlhbCBhbmQgbmljZS10by1oYXZlIHNraWxscyBhbmQgZXhwZXJpZW5jZSB0byBoZWxwIHRoZW0gZXZhbHVhdGUgc3VwcGxpZXJz4oCZIHRlY2huaWNhbCBjb21wZXRlbmNlLjwvcD4KICAKICAKICAKCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgRXNzZW50aWFsIHNraWxscyBhbmQgZXhwZXJpZW5jZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDx1bCBjbGFzcz0iZ292dWstbGlzdCBnb3Z1ay1saXN0LS1idWxsZXQiPgogICAgICAgICAgPGxpPkRlbW9uc3RyYXRlIGNvbnNpZGVyYWJsZSByZWNlbnQgZXhwZXJpZW5jZSBpbiBkZWxpdmVyaW5nIHRoZSBkZWZpbmVkIHJlcXVpcmVtZW50czwvbGk+CiAgICAgICAgICA8bGk+RGVtb25zdHJhdGUgYWJpbGl0eSB0byBkZWxpdmVyIHdpdGhpbiB0aGUgdGltZXNjYWxlczwvbGk+CiAgICAgICAgICA8bGk+UHJvZHVjZSBhIHJlcG9ydCB3aGljaCBpcyB1c2VmdWwgdG8gbWFuYWdlbWVudCBhbmQgZW5naW5lZXJzIGFsaWtlPC9saT4KICAgICAgICAgIDxsaT5LZWVwIGFsbCBkYXRhIDEwMCUgc2FmZTwvbGk+CiAgICAgICAgICA8bGk+TWFpbnRhaW4gY29uZmlkZW50aWFsaXR5IHRocm91Z2hvdXQgc28gYXMgbm90IHRvIGNvbXByb21pc2Ugb3V0Y29tZXM8L2xpPgogICAgICAgICAgPGxpPlByb3ZpZGUgdHdvIHJlbGV2YW50IHJlZmVyZW5jZXMgdG8gY29uZmlybSB0aGUgYWJvdmU8L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIE5pY2UtdG8taGF2ZSBza2lsbHMgYW5kIGV4cGVyaWVuY2UKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBEZW1vbnN0cmF0ZSBleHBlcmllbmNlIHdpdGggRnVydGhlciBFZHVjYXRpb24gQ29sbGVnZXMgb3Igc2ltaWxhcgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKICA8aDIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtNiIgY2xhc3M9ImdvdnVrLWhlYWRpbmctbSBhcHAtc3VtbWFyeS1saXN0LWhlYWRpbmciPkhvdyBzdXBwbGllcnMgd2lsbCBiZSBldmFsdWF0ZWQ8L2gyPgogIAogIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0zIj5BbGwgc3VwcGxpZXJzIHdpbGwgYmUgYXNrZWQgdG8gcHJvdmlkZSBhIHdyaXR0ZW4gcHJvcG9zYWwuPC9wPgogIAogIAoKCiAgCgogIAoKICAKCiAgCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgSG93IG1hbnkgc3VwcGxpZXJzIHRvIGV2YWx1YXRlCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgMwogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBQcm9wb3NhbCBjcml0ZXJpYQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDx1bCBjbGFzcz0iZ292dWstbGlzdCBnb3Z1ay1saXN0LS1idWxsZXQiPgogICAgICAgICAgPGxpPkFwcHJvYWNoIGFuZCBtZXRob2RvbG9neTwvbGk+CiAgICAgICAgICA8bGk+SG93IHRoZSBwcm9wb3NlZCBzb2x1dGlvbiBtZWV0cyB0aGUgZ29hbCBhcyBkZXNjcmliZWQ8L2xpPgogICAgICAgICAgPGxpPlJpc2sgTWFuYWdlbWVudCBhcHByb2FjaDwvbGk+CiAgICAgICAgICA8bGk+VmFsdWUgZm9yIE1vbmV5PC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBDdWx0dXJhbCBmaXQgY3JpdGVyaWEKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICA8dWwgY2xhc3M9ImdvdnVrLWxpc3QgZ292dWstbGlzdC0tYnVsbGV0Ij4KICAgICAgICAgIDxsaT5QbGFjZSBhIHN0cm9uZyB2YWx1ZSBvbiBsZWFybmluZzwvbGk+CiAgICAgICAgICA8bGk+RGVtb25zdHJhdGUgSW50ZWdyaXR5PC9saT4KICAgICAgICAgIDxsaT5Xb3JrIHdpdGggdXMgYXMgYSB0ZWFtPC9saT4KICAgICAgICAgIDxsaT5Bc3BpcmUgdG8gZXhjZWxsZW5jZTwvbGk+CiAgICAgICAgICA8bGk+RGVtb25zdHJhdGUgcmVzcGVjdCBmb3Igb3RoZXJzPC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBQYXltZW50IGFwcHJvYWNoCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgQ2FwcGVkIHRpbWUgYW5kIG1hdGVyaWFscwogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBBZGRpdGlvbmFsIGFzc2Vzc21lbnQgbWV0aG9kcwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDx1bCBjbGFzcz0iZ292dWstbGlzdCBnb3Z1ay1saXN0LS1idWxsZXQiPgogICAgICAgICAgPGxpPkNhc2Ugc3R1ZHk8L2xpPgogICAgICAgICAgPGxpPldvcmsgaGlzdG9yeTwvbGk+CiAgICAgICAgICA8bGk+UmVmZXJlbmNlPC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBFdmFsdWF0aW9uIHdlaWdodGluZwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0wIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS0xIj5UZWNobmljYWwgY29tcGV0ZW5jZTwvcD4KICAgICAgICA8ZGl2PjMwJTwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0zIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS0xIj5DdWx0dXJhbCBmaXQ8L3A+CiAgICAgICAgPGRpdj4xMCU8L2Rpdj4KICAgICAgICA8cCBjbGFzcz0iZ292dWstYm9keSBnb3Z1ay0hLW1hcmdpbi10b3AtMyBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tMSI+UHJpY2U8L3A+CiAgICAgICAgPGRpdj42MCU8L2Rpdj4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCiAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1jb2x1bW4tZnVsbCI+CiAgICAKCgoKPGgyIGlkPSJjbGFyaWZpY2F0aW9uLXF1ZXN0aW9ucyIgY2xhc3M9ImdvdnVrLWhlYWRpbmctbSBhcHAtc3VtbWFyeS1saXN0LWhlYWRpbmciPlF1ZXN0aW9ucyBhc2tlZCBieSBzdXBwbGllcnM8L2gyPgoKCgoKICAKCiAgCgogIAoKICAKCiAgCgogIAoKICAKCiAgCgogIAoKICAKCiAgCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgMS4gRGlnaXRhbCBNYXJrZXRwbGFjZSBsaW1pdHMgcmVzcG9uc2VzIHRvIDEwMCB3b3JkcyBmb3IgZWFjaCBxdWVzdGlvbiBhbmQgZG9lcyBub3QgYWxsb3cgYXR0YWNobWVudHMuPGJyPklzIHRoZXJlIGEgd2F5IHRvIHN1Ym1pdCBhZGRpdGlvbmFsIGRldGFpbCB0byB0aGlzIHRlbmRlcj8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBJZiBmdXJ0aGVyIGluZm9ybWF0aW9uIGlzIHJlcXVpcmVkLCB0aGlzIGNhbiBiZSBzdWJtaXR0ZWQgaW4gYW4gZW1haWwgdG8gaWFuLnJ1bGVAcnV0Yy5hYy51aywgdG8gYmUgc2VudCBhdCB0aGUgdGltZSBvZiBiaWQgc3VibWlzc2lvbi4gIEVtYWlsZWQgc3VibWlzc2lvbnMgc2hvdWxkIG5vdCBleGNlZWQgNCBwYWdlcyBvZiAxMS1wb2ludCB0eXBlLCBhbmQgbXVzdCBhZGhlcmUgdG8gdGhlIHNwaXJpdCBvZiBnb29kIHByb2N1cmVtZW50IHByYWN0aWNlLiAgVGhpcyBlbWFpbCBhZGRyZXNzIGlzIG5vdCB0byBiZSB1c2VkIGZvciBhbnkgb3RoZXIgcHVycG9zZS4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgMi4gSXMgaXQgaW50ZW5kZWQgdGhhdCB0aGUgcmVxdWlyZW1lbnRzIGJlIG1ldCBieSBhbiBpbmRpdmlkdWFsLCBvciBhIHRlYW0/CiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgV2UgYXJlIG9wZW4gdG8gYXBwcm9hY2hlcyBmcm9tIGluZGl2aWR1YWxzIG9yIHRlYW1zLCBidXQgc3VzcGVjdCB0aGF0IHRoZSByZXF1aXJlbWVudHMgYXJvdW5kIHNlY3VyaXR5IGNyZWRlbnRpYWxzLCB0cmFjayByZWNvcmQgYW5kIHRoZSBuYXR1cmUgb2YgdGhlIHdvcmsgaXRzZWxmLCB3b3VsZCB0ZW5kIHRvIGluZGljYXRlIGEgdGVhbS9jb3Jwb3JhdGUgYXBwcm9hY2gKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgMy4gQ2FuIHlvdSBjb25maXJtIHRoZSBWREkgdmVyc2lvbiBpbiB1c2U/CiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgV2UgdXNlIFZNV2FyZSAtIGZ1cnRoZXIgZGV0YWlscyBjYW4gYmUgcHJvdmlkZWQgYXQgYSBsYXRlciBzdGFnZSBpZiByZXF1aXJlZAogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICA0LiBEbyB5b3UgcmVxdWlyZSBhY3R1YWwgYXR0YWNrcyBvciBpcyBpdCBhIDEwMCUgZGVza3RvcCBleGVyY2lzZT8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBXZSBhbnRpY2lwYXRlIHRoaXMgYmVpbmcgYSBzaW11bGF0ZWQgYXR0YWNrIHdpdGggYWN0aXZpdHkgYmVpbmcgdHJpZ2dlcmVkIHN1Y2ggdGhhdCB0aGUgJiMzOTtibHVlJiMzOTsgdGVhbSBjYW4gaGF2ZSB0aGUgb3Bwb3J0dW5pdHkgdG8gcmVzcG9uZCBhbmQgdGhhdCByZXNwb25zZSBiZSBhc3Nlc3NlZCBhcyBwYXJ0IG9mIHRoZSBleGVyY2lzZS4gIE9mIGNvdXJzZSwgYW55IGFjdGl2aXR5IG5lZWRzIHRvIGJlIGNhcmVmdWxseSBtYW5hZ2VkIGFuZCBmdWxseSByZXN0b3JlZCBhZnRlcndhcmRzLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICA1LiBEbyB5b3UgcmVxdWlyZSBhIHBoaXNoaW5nIGF0dGFjayBhbmQgZm9yIGFuIGVtcHR5IHBheWxvYWQgdG8gYmUgbGF1bmNoZWQ/CiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgU2NlbmFyaW8gMSBjb21tZW5jZXMgZnJvbSB0aGUgcHJlc3VtcHRpb24gdGhhdCBhIHVzZXIgaGFzIHN1Y2N1bWJlZCB0byBhIHBoaXNoaW5nIGF0dGFjayBhbmQgdGhlIGFjY291bnQvbWFjaGluZSBpcyB0aGVyZWZvcmUgY29tcHJvbWlzZWQgYWxyZWFkeS4gIFdlIHdpbGwgcHJvdmlkZSBhIHN0YWZmIG1hY2hpbmUgYW5kIGR1bW15IHN0YWZmIGFjY291bnQgZm9yIHlvdSB0byB1c2UgZm9yIHRoaXMgcHVycG9zZS4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgNi4gYS4gSXMgdGhlIHByaW9yaXR5IG9uIHNpbXVsYXRpbmcgVFRQcyBvZiBjdXJyZW50IHRocmVhdCBhY3RvcnMgb3IgaXMgdGhlcmUgYW4gZW5kIGdvYWwgaW4gcGxhY2Ugc3VjaCBhcyBzZW5zaXRpdmUgZmluYW5jaWFsIGRhdGEsIHJlc2VhcmNoIG1hdGVyaWFsPyA8YnI+Yi4gSWYgdGhlIGxhdHRlciwgY291bGQgeW91IHBsZWFzZSBwcm92aWRlIGZ1cnRoZXIgaW5mb3JtYXRpb24gb24gdGhlIGVuZCBnb2FscyBhbmQgc2l6ZSBvZiBlc3RhdGUuCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgSXQgaXMgdGhlIGZvcm1lciAtIHdlIHdhbnQgdG8gdGVzdCB0aGUgcmVzaWxpZW5jZSBvZiBvdXIgc3lzdGVtcyBhbmQgcHJlcGFyZWRuZXNzIG9mIG91ciB0ZWFtLiAgQ2xlYXJseSBzb21lIGRhdGEgd2lsbCBiZSBtb3JlIHNlbnNpdGl2ZSB0aGFuIG90aGVycyBidXQgd2UgYXJlIG5vdCB0YXJnZXRpbmcgYW55IHBhcnRpY3VsYXIgbWF0ZXJpYWwuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIDcuIFNjZW5hcmlvIDMg4oCTIFJhbnNvbXdhcmU6IFBsZWFzZSBjYW4geW91IHByb3ZpZGUgbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGUgZW5kIGdvYWwgb2YgdGhpcyBzY2VuYXJpbyBhbmQgdGhlIHJpc2sgYXBwZXRpdGUgYXMgdGhlcmUgYXJlIGRpZmZlcmVudCBtZXRob2RzIHdheXMgdGhpcyBjYW4gYmUgY29tcGxldGVkIGRlcGVuZGluZyBvbiB0aGUgZW5kIGdvYWwuCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgVGhlIGVuZCBnb2FsIGlzIHRvIGVzdGFibGlzaCB3aGV0aGVyIGEgdGhyZWF0IGFjdG9yIGNvdWxkIGVmZmVjdGl2ZWx5IGxhdW5jaCBhIHJhbnNvbXdhcmUgYXR0YWNrLiAgVGhpcyBtdXN0IGJlIGRvbmUgc2FmZWx5IGFuZCBhbnkgYWN0dWFsIGRhbWFnZSBtdXN0IGJlIGNhcGFibGUgb2Ygc3dpZnQgcmVjdGlmaWNhdGlvbi4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgOC4gUG9zdC10ZXN0IHRyYWluaW5nOjxicj5hLiBXb3VsZCB5b3UgbGlrZSBkZWRpY2F0ZWQgcHJhY3RpY2FsIHRlY2huaWNhbCB0cmFpbmluZyBvbiB0aGUgVFRQcyBvciBhIHdhc2ggdXAgbWVldGluZyBhbmQgaGlnaGVyIGxldmVsIG92ZXJ2aWV3IG9mIHN1Y2Nlc3NmdWwgdGVjaG5pcXVlcz8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBXZSBhbnRpY2lwYXRlIGFuIGVsZW1lbnQgb2YgdHJhaW5pbmcgZm9yIHRoZSB0ZWFtLCBhcyBwYXJ0IG9mIGEgd29ya3Nob3Agd2hpY2ggY291bGQgYmUgb3ZlciBhIG51bWJlciBvZiBkYXlzLCB0byBlc3RhYmxpc2ggaW1wcm92ZW1lbnRzIGluIHRlYW0gcHJvY2Vzc2VzIGFuZCBwcm9jZWR1cmVzLCBhbmQgZGV0ZWN0aW9uIGNhcGFiaWxpdHkuICBBc3N1bWluZyBjb21wcm9taXNlIHdhcyBhY2hpZXZlZCwgc2hvd2luZyB0aGUgQmx1ZSB0ZWFtIGhvdyB0aGF0IHdhcyBkb25lIGFuZCBob3cgaXQgY2FuIGJlIHByZXZlbnRlZCBpbiBmdXR1cmUuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIDkuIElzIHRoZSBwZW5ldHJhdGlvbiB0ZXN0IC8gZXhlcmNpc2UgdG8gdGFrZSBwbGFjZSBvbiB0aGUgY3VzdG9tZXJzIG5ldHdvcmsgb3IgYSBzZXBhcmF0ZSB0ZXN0IExBTj8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBUaGlzIHdpbGwgYmUgb24gdGhlIGxpdmUgbmV0d29yawogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICAxMC4gVGhlIHJlcXVpcmVtZW50cyBvdXRsaW5lZCBpbiAmIzM0O1Byb2JsZW0gdG8gYmUgc29sdmVkJiMzNDsgc3VnZ2VzdHMsICYjMzQ7QmlkZGVycyBhcmUgd2VsY29tZSB0byBzdWJtaXQgZnVydGhlciBpbmZvcm1hdGlvbiB0byBzdXBwbGVtZW50IHRoZSBhYm92ZSB0YWJsZSYjMzQ7IG91dGxpbmluZyBvdXIgYXBwcm9hY2ggdG8gdGhlIHJlcXVpcmVkIHNjZW5hcmlvcywgdGltZXNjYWxlcyBhbmQgcHJpY2luZy48YnI+VGhpcyBpbmZvcm1hdGlvbiBpcyB1c3VhbGx5IHByb3ZpZGVkIGR1cmluZyB0aGUgUGhhc2UgMiBzdGFnZSBvZiBhIERPUyBiaWQuPGJyPkNhbiB5b3UgcGxlYXNlIGNvbmZpcm0gaWYgeW91IHJlcXVpcmUgYWRkaXRpb25hbC9zdXBwbGVtZW50YXJ5IGluZm9ybWF0aW9uIHRvIGJlIHByb3ZpZGVkIHRvIGFkZHJlc3Mgb3VyIGFwcHJvYWNoLCB0b29scywgdGFjdGljcyBhbmQgcHJvY2VkdXJlcyAoaW5jLiB0aW1lc2NhbGVzIGFuZCBwcmljaW5nKSBmb3IgdGhlIDMgc2NlbmFyaW9zOyBpbiBhZGRpdGlvbiB0byB0aGUgNyBzcGVjaWZpYyAmIzM0O2Vzc2VudGlhbCBza2lsbHMvbmljZSB0byBoYXZlJiMzNDsgcXVlc3Rpb25zPwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFdlIGFyZSBub3Qgc2Vla2luZyBhbnkgcGFydGljdWxhciBkZXRhaWwgYXQgdGhpcyBzdGFnZSAtIHRoaXMgY2FuIGJlIHBpY2tlZCB1cCBmb2xsb3dpbmcgc2hvcnRsaXN0aW5nIGlmIG5lY2Vzc2FyeS4gIEFsbCB3ZSByZXF1aXJlIGF0IHRoaXMgc3RhZ2UgaXMgc3VmZmljaWVudCBjb250ZXh0IGZvciB0aGUgcXVvdGF0aW9uIGJlaW5nIHByb3ZpZGVkLCB0byBlc3RhYmxpc2ggc29tZSBjb21wYXJhYmlsaXR5IG9uICBsaWtlbHkgZWZmZWN0aXZlbmVzcyBhbmQgdmFsdWUgZm9yIG1vbmV5CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIDExLiBTZWN1cml0eSBDbGVhcmFuY2VzOiBZb3UgaGF2ZSBzdGF0ZWQgdGhhdCAmIzM0O0JpZGRlcnMgc2hvdWxkIHByb3ZpZGUgZGV0YWlscyBvZiB0aGVpciBzZWN1cml0eSBjcmVkZW50aWFscyBhbmQgdGhlIHN0YW5kYXJkcyB0byBiZSBlbXBsb3llZCBpbiB0aGlzIHdvcmsmIzM0Ozxicj5Xb3VsZCB5b3UgbGlrZSB0aGlzIGluZm9ybWF0aW9uIHByb3ZpZGVkIHdpdGhpbiBvdXIgJiMzNDtFc3NlbnRpYWwvbmljZSB0byBoYXZlJiMzNDsgYW5zd2Vycywgb3Igc2hvdWxkIHdlIHByb3ZpZGUgZGV0YWlscyBvZiB0aGlzIHdpdGhpbiBhIHN1cHBsZW1lbnRhcnkgZG9jdW1lbnQ/CiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgUGxlYXNlIHByb3ZpZGUgdGhpcyB3aXRoaW4gdGhlIGJpZCBhbnN3ZXJzIGlmIHBvc3NpYmxlLiAgSWYgZnVydGhlciBkZXRhaWwgaXMgcmVxdWlyZWQsIHRoaXMgY2FuIGJlIHN1Ym1pdHRlZCBhcyBpbmRpY2F0ZWQgaW4gdGhlIGFuc3dlcnMgYWJvdmUuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIDEyLiBBcmUgc3VwcGxpZXJzIHJlcXVpcmVkIHRvIGVtdWxhdGUgYSBzcGVjaWZpYyB0aHJlYXQgYWN0b3I/PGJyPkRvIFJ1VEMgYmVsaWV2ZS9rbm93IHRoZXkgYXJlIGJlaW5nIHRhcmdldGVkIGJ5IGEgc3BlY2lmaWMgcmVnaW9uIG9mIHRoZSB3b3JsZD88YnI+V2lsbCB0aGVyZSBiZSBhIHdoaXRlIHRlYW0gdG8gYXNzaXN0IHdpdGggdGhlIGZhY2lsaXRhdGlvbiBvZiBhY3Rpdml0aWVzPyAoRWc6IEludGVybmFsIHNldC11cCBmb3IgaW5pdGlhbCBhY2Nlc3MpPGJyPkNvbmZpcm0gdGhlIFZESSBicmVha291dCBpcyBzaW11bGF0ZWQ/IFdpbGwgYSB0ZXN0IGVudmlyb25tZW50IGJlIHByb3ZpZGVkIGZvciB0aGUgVkRJIGJyZWFrb3V0Pzxicj5BcmUgdGhlcmUgYW55IGRldmljZXMgb3V0IG9mIHNjb3BlPzxicj5XaGF0IGRlZmluZXMgYW4gJiMzOTtlbmQgZ2FtZSYjMzk7IGZvciBlYWNoIHNjZW5hcmlvPzxicj5BcmUgU29jaWFsIEVuZ2luZWVyaW5nIHRlY2huaXF1ZXMgd2l0aGluIHNjb3BlPzxicj5XaWxsIHRoZXJlIGJlIGludGVyYWN0aW9uIHdpdGggdGhlIEJsdWUgdGVhbSBvciBhbiBSdVRDIGFkbWluaXN0cmF0aXZlIGFybSBwcmlvciB0byB0aGUgY29tbWVuY2VtZW50IG9mIGtleSBwaGFzZXM/CiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgSSBhbSBub3QgYW4gZXhwZXJ0IGFuZCBkbyBub3QgbmVjZXNzYXJpbHkgdW5kZXJzdGFuZCBhbGwgb2YgeW91ciBxdWVzdGlvbnMuICBUaGlzIGlzIGEgZ2VuZXJhbCB0ZXN0LCB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgdGhyZWF0cyBpbiBtaW5kLiAgV2Ugd2lsbCBwcm92aWRlIHNvbWUgYXNzaXN0YW5jZSB3aXRoIHNldHVwLiAgQWxsIHdpbGwgYmUgb24gdGhlIGxpdmUgZW52aXJvbm1lbnQgLSBzZWUgcXVlc3Rpb25zIGFib3ZlLiBTb2NpYWwgRW5naW5lZXJpbmcgdGVjaG5pcXVlcyB3b3VsZCBiZSB3aXRoaW4gc2NvcGUuIEhhcHB5IHRvIGRpc2N1c3MgaW50ZXJhY3Rpb24gd2l0aCBCbHVlIHRlYW0sIHRoYXQgbWF5IGJlIGhlbHBmdWwuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIDEzLiBJcyB0aGlzIGEgbm90YXRpb24gYXR0YWNrIG9yIHJlY29yZCBvZiBhY3Rpdml0eSBzdXJyb3VuZGluZyBhbiBpbnN0YWxsZWQtdG8tZGV2aWNlIHNpbXVsYXRlZCBhdHRhY2s/PGJyPldpbGwgZS1tYWlscyBiZSBwcm92aWRlZCBvciBpcyB0aGlzIGEgQmxhY2sgSGF0IGFzc2Vzc21lbnQ/PGJyPk9uY2UgYSBzZXJ2ZXIgaXMgY29tcHJvbWlzZWQsIGNhbiB0aGUgc3VwcGxpZXIgYWRqdXN0IHNlY3VyaXR5IGNvbmZpZ3VyYXRpb24gdG8gZW5hYmxlIG1vcmUgZWZmaWNpZW50LCBmdXJ0aGVyIGFjY2VzcyBmb3Igc2ltdWxhdGVkIG1hbHdhcmU/PGJyPldpbGwgdGhpcyBiZSBhIG5vdGF0aW9uIGF0dGFjayBvciByZWNvcmQgb2YgYWN0aXZpdHkgc3Vycm91bmRpbmcgYW4gaW5zdGFsbGVkLXRvLWRldmljZSBzaW11bGF0ZWQgYXR0YWNrPzxicj5DYW4gc3VwcGxpZXJzIGluc3RhbGwgc29mdHdhcmUgb24gdG8gY29tcHJvbWlzZWQgZGV2aWNlcz88YnI+QXJlIHRoZXJlIGFueSBzZW5zaXRpdmUgb3IgcHJvcHJpZXRhcnkgZGV2aWNlcy9zeXN0ZW1zIHRoYXQgbWF5IGZhbGwgb3ZlciBpZiBhdHRhY2tlZD88YnI+QXJlIHRoZXJlIGFueSBrZXkgZGV2aWNlcyB0aGF0IHdlIG5lZWQgdG8gaW5mb3JtIHByaW9yIHRvIHRoZSBjb21tZW5jZW1lbnQgb2YgYW4gYXR0YWNrPwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIEkgYW0gbm90IGFuIGV4cGVydCBhbmQgZG8gbm90IG5lY2Vzc2FyaWx5IHVuZGVyc3RhbmQgYWxsIG9mIHlvdXIgcXVlc3Rpb25zLiBQbGVhc2UgbWFrZSBhc3N1bXB0aW9ucyB3aGVyZSBuZWNlc3NhcnkgYW5kIHdlIGNhbiBkaXNjdXNzIGFmdGVyIHNob3J0bGlzdGluZyBpZiBuZWVkIGJlLiBXZSB3aWxsIHByb3ZpZGUgeW91IHdpdGggYSB1c2VyIGFjY291bnQgYW5kIGVtYWlsIGFkZHJlc3MuIFNldHRpbmdzIGNhbiBiZSBhbHRlcmVkIGFuZCBzb2Z0d2FyZSBpbnN0YWxsZWQgYnV0IGFsbCBhY3Rpdml0eSBtdXN0IGJlIHJlY29yZGVkIGFuZCBvcGVyYXRlZCBzYWZlbHksIGFuZCByZWN0aWZpZWQgcXVpY2tseSBhZnRlcndhcmRzLiAgV2Ugd2lsbCBhZHZpc2UgaWYgc29tZSBkZXZpY2VzIG5lZWQgdG8gYmUgcHJvdGVjdGVkLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKCgogIFRoZSBkZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9ucyBhYm91dCB0aGlzIG9wcG9ydHVuaXR5IHdhcyBXZWRuZXNkYXkgMjIgSnVseSAyMDIwLgoKICA8L2Rpdj4KPC9kaXY+CgoKICA8YnIvPjwhLS0gPC0gcmVtb3ZlIG9uY2UgZ3JpZCBhbmQgYm9keSBlbGVtZW50cyBoYXZlIGJlZW4gY29udmVydGVkIHRvIGdvdnVrIGZyb250ZW5kIC0tPgogIDxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtcm93Ij4KICAgIDxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtY29sdW1uLXR3by10aGlyZHMiPgogICAgICA8Zm9ybSBhY3Rpb249Ii9zdXBwbGllcnMvb3Bwb3J0dW5pdGllcy8xMjYwOC9yZXNwb25zZXMvc3RhcnQiIG1ldGhvZD0iZ2V0Ij4KICAgICAgICAKICAKICAgIAogIAoKPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJnb3Z1ay1idXR0b24iPgogIEFwcGx5IGZvciB0aGlzIG9wcG9ydHVuaXR5CjwvYnV0dG9uPgogICAgICA8L2Zvcm0+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCgoKCiAgICAgICAgPC9tYWluPgogICAgICA8L2Rpdj4KICAgIAoKICAgIAogIDxmb290ZXIgY2xhc3M9ImdvdnVrLWZvb3RlciAiIHJvbGU9ImNvbnRlbnRpbmZvIj4KICA8ZGl2IGNsYXNzPSJnb3Z1ay13aWR0aC1jb250YWluZXIgIj4KICAgIAogICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX25hdmlnYXRpb24iPgogICAgICAgIAogICAgICAgICAgPGRpdiBjbGFzcz0iZ292dWstZm9vdGVyX19zZWN0aW9uIj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2hlYWRpbmcgZ292dWstaGVhZGluZy1tIj5BYm91dCBEaWdpdGFsIE1hcmtldHBsYWNlPC9oMj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QgIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Ii9oZWxwIj4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdAogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtbWFya2V0cGxhY2UtYnV5ZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgU2VydmljZXMgeW91IGNhbiBidXkKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW1hcmtldHBsYWNlLXN1cHBsaWVycy1ndWlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIFNlcnZpY2VzIHlvdSBjYW4gc2VsbAogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9jcm93bi1jb21tZXJjaWFsLXNlcnZpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICBBYm91dCBDcm93biBDb21tZXJjaWFsIFNlcnZpY2VzCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2dvdmVybm1lbnQtZGlnaXRhbC1zZXJ2aWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQWJvdXQgR292ZXJubWVudCBEaWdpdGFsIFNlcnZpY2VzCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSIvZy1jbG91ZC9zdXBwbGllcnMiPgogICAgICAgICAgICAgICAgICAgICAgICBHLUNsb3VkIHN1cHBsaWVyIEEgdG8gWgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgCiAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fc2VjdGlvbiI+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iZ292dWstZm9vdGVyX19oZWFkaW5nIGdvdnVrLWhlYWRpbmctbSI+R3VpZGFuY2UgZm9yIHVzaW5nIERpZ2l0YWwgTWFya2V0cGxhY2U8L2gyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdCAiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2ctY2xvdWQtc3VwcGxpZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwbHlpbmcgdG8gc2VsbCBvbiB0aGUgRy1DbG91ZCBmcmFtZXdvcmsKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zdXBwbGllcnMtZ3VpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBseWluZyB0byBzZWxsIG9uIHRoZSBET1MgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvaG93LXRvLXNlbGwteW91ci1kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zZXJ2aWNlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIFJlc3BvbmRpbmcgdG8gYnV5ZXIgcmVxdWlyZW1lbnRzIG9uIHRoZSBET1MgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZy1jbG91ZC1idXllcnMtZ3VpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICBCdXlpbmcgb24gdGhlIEctQ2xvdWQgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtYnV5ZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQnV5aW5nIG9uIHRoZSBET1MgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvdGhlLWNyb3duLWhvc3RpbmctZGF0YS1jZW50cmVzLWZyYW1ld29yay1vbi10aGUtZGlnaXRhbC1tYXJrZXRwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEJ1eWluZyBvbiB0aGUgQ3Jvd24gSG9zdGluZyBmcmFtZXdvcmsKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIAogICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgIDwvZGl2PgogICAgICA8aHIgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fc2VjdGlvbi1icmVhayI+CiAgICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbWV0YSI+CiAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbWV0YS1pdGVtIGdvdnVrLWZvb3Rlcl9fbWV0YS1pdGVtLS1ncm93Ij4KICAgICAgICAKICAgICAgICAgIDxoMiBjbGFzcz0iZ292dWstdmlzdWFsbHktaGlkZGVuIj5TdXBwb3J0IGxpbmtzPC9oMj4KICAgICAgICAgIAogICAgICAgICAgICA8dWwgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faW5saW5lLWxpc3QiPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2lubGluZS1saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSIvdGVybXMtYW5kLWNvbmRpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgIFRlcm1zIGFuZCBjb25kaXRpb25zCiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faW5saW5lLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Ii9jb29raWVzIj4KICAgICAgICAgICAgICAgICAgICBDb29raWVzCiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faW5saW5lLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Ii9wcml2YWN5LW5vdGljZSI+CiAgICAgICAgICAgICAgICAgICAgUHJpdmFjeSBub3RpY2UKICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAKICAgICAgICAgICAgPC91bD4KICAgICAgICAgIAogICAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbWV0YS1jdXN0b20iPgogICAgICAgICAgICAgIEJ1aWx0IGJ5IHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2dvdmVybm1lbnQtZGlnaXRhbC1zZXJ2aWNlIiBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIj5Hb3Zlcm5tZW50IERpZ2l0YWwgU2VydmljZTwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAKICAgICAgICAKICAgICAgICA8c3ZnCiAgICAgICAgICByb2xlPSJwcmVzZW50YXRpb24iCiAgICAgICAgICBmb2N1c2FibGU9ImZhbHNlIgogICAgICAgICAgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGljZW5jZS1sb2dvIgogICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgdmlld2JveD0iMCAwIDQ4My4yIDE5NS43IgogICAgICAgICAgaGVpZ2h0PSIxNyIKICAgICAgICAgIHdpZHRoPSI0MSIKICAgICAgICA+CiAgICAgICAgICA8cGF0aAogICAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiCiAgICAgICAgICAgIGQ9Ik00MjEuNSAxNDIuOFYuMWwtNTAuNyAzMi4zdjE2MS4xaDExMi40di01MC43em0tMTIyLjMtOS42QTQ3LjEyIDQ3LjEyIDAgMCAxIDIyMSA5Ny44YzAtMjYgMjEuMS00Ny4xIDQ3LjEtNDcuMSAxNi43IDAgMzEuNCA4LjcgMzkuNyAyMS44bDQyLjctMjcuMkE5Ny42MyA5Ny42MyAwIDAgMCAyNjguMSAwYy0zNi41IDAtNjguMyAyMC4xLTg1LjEgNDkuN0E5OCA5OCAwIDAgMCA5Ny44IDBDNDMuOSAwIDAgNDMuOSAwIDk3LjhzNDMuOSA5Ny44IDk3LjggOTcuOGMzNi41IDAgNjguMy0yMC4xIDg1LjEtNDkuN2E5Ny43NiA5Ny43NiAwIDAgMCAxNDkuNiAyNS40bDE5LjQgMjIuMmgzdi04Ny44aC04MGwyNC4zIDI3LjV6TTk3LjggMTQ1Yy0yNiAwLTQ3LjEtMjEuMS00Ny4xLTQ3LjFzMjEuMS00Ny4xIDQ3LjEtNDcuMSA0Ny4yIDIxIDQ3LjIgNDdTMTIzLjggMTQ1IDk3LjggMTQ1IgogICAgICAgICAgLz4KICAgICAgICA8L3N2Zz4KICAgICAgICA8c3BhbiBjbGFzcz0iZ292dWstZm9vdGVyX19saWNlbmNlLWRlc2NyaXB0aW9uIj4KICAgICAgICAgIEFsbCBjb250ZW50IGlzIGF2YWlsYWJsZSB1bmRlciB0aGUKICAgICAgICAgIDxhCiAgICAgICAgICAgIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiCiAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3Lm5hdGlvbmFsYXJjaGl2ZXMuZ292LnVrL2RvYy9vcGVuLWdvdmVybm1lbnQtbGljZW5jZS92ZXJzaW9uLzMvIgogICAgICAgICAgICByZWw9ImxpY2Vuc2UiCiAgICAgICAgICA+T3BlbiBHb3Zlcm5tZW50IExpY2VuY2UgdjMuMDwvYT4sIGV4Y2VwdCB3aGVyZSBvdGhlcndpc2Ugc3RhdGVkCiAgICAgICAgPC9zcGFuPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ292dWstZm9vdGVyX19tZXRhLWl0ZW0iPgogICAgICAgIDxhCiAgICAgICAgICBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIGdvdnVrLWZvb3Rlcl9fY29weXJpZ2h0LWxvZ28iCiAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5uYXRpb25hbGFyY2hpdmVzLmdvdi51ay9pbmZvcm1hdGlvbi1tYW5hZ2VtZW50L3JlLXVzaW5nLXB1YmxpYy1zZWN0b3ItaW5mb3JtYXRpb24vdWstZ292ZXJubWVudC1saWNlbnNpbmctZnJhbWV3b3JrL2Nyb3duLWNvcHlyaWdodC8iCiAgICAgICAgPsKpIENyb3duIGNvcHlyaWdodDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9mb290ZXI+CgoKICAgIAogIDxzY3JpcHQgc3JjPSIvc3RhdGljL2phdmFzY3JpcHRzL2FwcGxpY2F0aW9uLmpzPzA2NGMzYmY3ZDU5ZWM5NzIxNTkxOGU1NTNiMzBlMjQ5Ij48L3NjcmlwdD4KICAKCiAgPC9ib2R5Pgo8L2h0bWw+
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:22 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12711
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRag.xXvaoOjVEKLbdySBtEczUGOpoMw
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36325'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:23 GMT
      Dm-Request-Id:
      - 545503d3235ce12e
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:22 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRag.xXvaoOjVEKLbdySBtEczUGOpoMw;
        Expires=Thu, 23-Jul-2020 09:59:22 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 545503d3235ce12e
      X-B3-Traceid:
      - 545503d3235ce12e
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 060df281-ba51-485c-7152-b39be5ba5114
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 1e14debf40c7c0d32192ed8ad517da21.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - EuNv3Hw5mXEAso82iyRCrn9UVOSPVVROtsaVDtRJJFTDQFdqwTziPA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:23 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12700
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRag.xXvaoOjVEKLbdySBtEczUGOpoMw
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36826'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:23 GMT
      Dm-Request-Id:
      - f893b07cf01d7092
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:23 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRaw.4D2Q8e51biqKQghcS9OXPvvIpU4;
        Expires=Thu, 23-Jul-2020 09:59:23 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - f893b07cf01d7092
      X-B3-Traceid:
      - f893b07cf01d7092
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 20500bce-d8ad-4907-5eb9-dc157396d002
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 3e37a185adf0633e53d97f7c71ebc945.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - aihg6avA-xjMLBbWf-2FhOamGuTx8iCNdiMMxdbx3lmb-Hec9uZjdQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:23 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12691
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRaw.4D2Q8e51biqKQghcS9OXPvvIpU4
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '37294'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:23 GMT
      Dm-Request-Id:
      - 660a121249e98395
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:23 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRaw.4D2Q8e51biqKQghcS9OXPvvIpU4;
        Expires=Thu, 23-Jul-2020 09:59:23 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 660a121249e98395
      X-B3-Traceid:
      - 660a121249e98395
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b0ca4c76-5df6-4d4e-61f4-1bf8215ded71
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 928c0faaba62379cf695423a4a47c02e.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - G9QjNcmfxpvjfZCKzURLh_iWYuJm75y5AEcnl_3iEePy6_4LZw9u_w==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:24 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12688
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRaw.4D2Q8e51biqKQghcS9OXPvvIpU4
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '34525'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:24 GMT
      Dm-Request-Id:
      - 8e5bd782c65e2d2d
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:24 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRbA.MDl4-ADZkhDR7lfj1jBDbYneEcA;
        Expires=Thu, 23-Jul-2020 09:59:24 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 8e5bd782c65e2d2d
      X-B3-Traceid:
      - 8e5bd782c65e2d2d
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 56c5f6d1-01d8-4931-6df8-8706288f99f6
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 928c0faaba62379cf695423a4a47c02e.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - CbU2Ou6fysash6dqGiwB3OUjTRT2J8vOAGoHswFujJOAZ2KTaN5Djg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:24 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12687
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRbA.MDl4-ADZkhDR7lfj1jBDbYneEcA
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '34015'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:25 GMT
      Dm-Request-Id:
      - 90d6d0dbacb84d9c
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:25 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRbQ.ua7hwjnAAoLi6rVyMcWfrJY6FdE;
        Expires=Thu, 23-Jul-2020 09:59:25 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 90d6d0dbacb84d9c
      X-B3-Traceid:
      - 90d6d0dbacb84d9c
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 23f5e246-1993-468d-4e2c-fb14d6236545
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 09332a16e52d74a9c0e1dbb5affe9e16.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - KuWB7ilz0ANy6Lga6eengmICxEFtHr7jbmYT_dPC-78HABDyI2Ib_g==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:25 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12685
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRbQ.ua7hwjnAAoLi6rVyMcWfrJY6FdE
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '33708'
      Connection:
      - keep-alive
      Date:
      - Thu, 23 Jul 2020 08:59:26 GMT
      Dm-Request-Id:
      - 4bc4d8ce99e35a0d
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Fri, 23-Jul-2021 08:59:26 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XxlRbg.5Q2G_Ph53iDz-1sxleRpLH0bBng;
        Expires=Thu, 23-Jul-2020 09:59:26 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 4bc4d8ce99e35a0d
      X-B3-Traceid:
      - 4bc4d8ce99e35a0d
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 8510a75a-a53a-4184-7dcb-c049db16a9d6
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f0bf906df7f99fe49b4582e655d2c569.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - _VEtIXc7WlZB3BCm6xe532hL3NRBb5UD6a9TivxL6k_FBPCYW5m7vg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 23 Jul 2020 08:59:26 GMT
recorded_with: VCR 5.0.0
