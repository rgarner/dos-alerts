---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/10025
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.3p62 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '39222'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:47:39 GMT
      Dm-Request-Id:
      - 353c8b99e0f4fee5
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:47:39 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2iw.U1j4Ix4APJuYVsZZGywPmxipwbg;
        Expires=Tue, 24-Dec-2019 15:47:39 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 353c8b99e0f4fee5
      X-B3-Traceid:
      - 353c8b99e0f4fee5
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 0b20800e-2aa6-4a3f-6c6c-ebe4ba7f6c9a
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 270c304930830f8773482aa3abdb5d35.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - O7CpNbL6ByMA86YoPt-xIRGc1bro3OAMm8ynLWQtmkN4Grt3vo04cg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPCEtLVtpZiBsdCBJRSA5XT48aHRtbCBjbGFzcz0ibHRlLWllOCIgbGFuZz0iZW4iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIGd0IElFIDhdPjwhLS0+PGh0bWwgbGFuZz0iZW4iPjwhLS08IVtlbmRpZl0tLT4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPgogICAgPHRpdGxlPgogIERlc2lnbiBhbmQgYnVpbGQgYSB3ZWJzaXRlIGZvciBhIG5ldyBsb2NhbCBhdXRob3JpdHkgLSBEaWdpdGFsIE1hcmtldHBsYWNlCjwvdGl0bGU+CgogICAgPCEtLVtpZiBndCBJRSA4XT48IS0tPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUuY3NzPzAuMTkuMiIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhLS08IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgSUUgNl0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS1pZTYuY3NzPzAuMTkuMiIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBJRSA3XT48bGluayBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2dvdnVrLXRlbXBsYXRlLWllNy5jc3M/MC4xOS4yIiBtZWRpYT0ic2NyZWVuIiByZWw9InN0eWxlc2hlZXQiIC8+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIElFIDhdPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUtaWU4LmNzcz8wLjE5LjIiIG1lZGlhPSJzY3JlZW4iIHJlbD0ic3R5bGVzaGVldCIgLz48IVtlbmRpZl0tLT4KICAgIDxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUtcHJpbnQuY3NzPzAuMTkuMiIgbWVkaWE9InByaW50IiByZWw9InN0eWxlc2hlZXQiIC8+CgogICAgPCEtLVtpZiBJRSA4XT48bGluayBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2ZvbnRzLWllOC5jc3M/MC4xOS4yIiBtZWRpYT0iYWxsIiByZWw9InN0eWxlc2hlZXQiIC8+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIGd0ZSBJRSA5XT48IS0tPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZm9udHMuY3NzPzAuMTkuMiIgbWVkaWE9ImFsbCIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhLS08IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgbHQgSUUgOV0+PHNjcmlwdCBzcmM9Ii9zdGF0aWMvamF2YXNjcmlwdHMvaWUuanM/MC4xOS4yIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KCiAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2Zhdmljb24uaWNvPzAuMTkuMiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPgogICAgPGxpbmsgcmVsPSJtYXNrLWljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdi51a19sb2dvdHlwZV9jcm93bi5zdmc/MC4xOS4yIiBjb2xvcj0iIzBiMGMwYyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSIxNTJ4MTUyIiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTE1MngxNTIucG5nPzAuMTkuMiI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSIxMjB4MTIwIiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTEyMHgxMjAucG5nPzAuMTkuMiI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSI3Nng3NiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvYXBwbGUtdG91Y2gtaWNvbi03Nng3Ni5wbmc/MC4xOS4yIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvYXBwbGUtdG91Y2gtaWNvbi02MHg2MC5wbmc/MC4xOS4yIj4KCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSIvc3RhdGljL2ltYWdlcy9vcGVuZ3JhcGgtaW1hZ2UucG5nPzAuMTkuMiI+CgogICAgCiAgCgoKCgoKCgogIDxtZXRhIG5hbWU9ImdhX2N1c3RvbURpbWVuc2lvbiIgZGF0YS1pZD0iMTIiIGRhdGEtdmFsdWU9IlVzZXIgcmVzZWFyY2ggYmFubmVyIj4KCgoKCgogIDwhLS1baWYgZ3QgSUUgOF0+PCEtLT4KICA8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBtZWRpYT0ic2NyZWVuIiBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2FwcGxpY2F0aW9uLmNzcz8wMmMyM2E4YzVmOGUyZGVjYjkwMmY0YzZiYjQ2ODE2MCIgLz4KPCEtLTwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDddPgogIDxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIG1lZGlhPSJzY3JlZW4iIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvYXBwbGljYXRpb24taWU3LmNzcz9mYmQ1OTRmYmQxOWQ4YzQ0ZjdmYzQ1Mzk2OGI4YzgzMCIgLz4KPCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOF0+CiAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgbWVkaWE9InNjcmVlbiIgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9hcHBsaWNhdGlvbi1pZTguY3NzPzY1ZDNhNGZhOGRiODI3ZTc0MzBlNDNhODdlZjBjZTNjIiAvPgo8IVtlbmRpZl0tLT4KICAKICAgIDxtZXRhIG5hbWU9Imdvb2dsZS1zaXRlLXZlcmlmaWNhdGlvbiIgY29udGVudD0iVEtHU0dabmZIcHgxLWxLT3RoSTE3QU50d2s3ZnozRjRTYnI3N0kwcHBPMCIgLz4KCgogIDwvaGVhZD4KCiAgPGJvZHkgY2xhc3M9IiI+CiAgICA8c2NyaXB0PmRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gKChkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSkgPyBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSArICcganMtZW5hYmxlZCcgOiAnanMtZW5hYmxlZCcpOzwvc2NyaXB0PgoKICAgIAoKICAgIDxkaXYgaWQ9InNraXBsaW5rLWNvbnRhaW5lciI+CiAgICAgIDxkaXY+CiAgICAgICAgPGEgaHJlZj0iI2NvbnRlbnQiIGNsYXNzPSJza2lwbGluayI+U2tpcCB0byBtYWluIGNvbnRlbnQ8L2E+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBpZD0iZ2xvYmFsLWNvb2tpZS1tZXNzYWdlIj4KICAgICAgCiAgICAgICAgCiAgPHA+R09WLlVLIHVzZXMgY29va2llcyB0byBtYWtlIHRoZSBzaXRlIHNpbXBsZXIuIDxhIGhyZWY9Ii9jb29raWVzIj5GaW5kIG91dCBtb3JlIGFib3V0IGNvb2tpZXM8L2E+PC9wPgoKCiAgICAgIAogICAgPC9kaXY+CgogICAgCiAgICA8aGVhZGVyIHJvbGU9ImJhbm5lciIgaWQ9Imdsb2JhbC1oZWFkZXIiIGNsYXNzPSJ3aXRoLXByb3Bvc2l0aW9uIj4KICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1nbG9iYWwiPgogICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLWxvZ28iPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsiIHRpdGxlPSJHbyB0byB0aGUgR09WLlVLIGhvbWVwYWdlIiBpZD0ibG9nbyIgY2xhc3M9ImNvbnRlbnQiPgogICAgICAgICAgICAgIDxpbWcgc3JjPSIvc3RhdGljL2ltYWdlcy9nb3YudWtfbG9nb3R5cGVfY3Jvd25faW52ZXJ0X3RyYW5zLnBuZz8wLjE5LjIiIHdpZHRoPSIzNiIgaGVpZ2h0PSIzMiIgYWx0PSIiPiBHT1YuVUsKICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICAKICA8ZGl2IGNsYXNzPSJoZWFkZXItdGl0bGUiPgogICAgPGEgaHJlZj0iLyI+RGlnaXRhbCBNYXJrZXRwbGFjZTwvYT4KICAgIDxzdHJvbmcgY2xhc3M9InBoYXNlLXRhZyI+QkVUQTwvc3Ryb25nPgo8L2Rpdj4KCiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgPGRpdiBjbGFzcz0iaGVhZGVyLXByb3Bvc2l0aW9uIj4KICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgIDxhIGhyZWY9IiNwcm9wb3NpdGlvbi1saW5rcyIgY2xhc3M9ImpzLWhlYWRlci10b2dnbGUgbWVudSI+TWVudTwvYT4KICAgIDxuYXYgaWQ9InByb3Bvc2l0aW9uLW1lbnUiPgogICAgICA8dWwgaWQ9InByb3Bvc2l0aW9uLWxpbmtzIj4KICAgICAgICA8bGk+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvYnV5aW5nLWFuZC1zZWxsaW5nLW9uLXRoZS1kaWdpdGFsLW1hcmtldHBsYWNlIj5HdWlkYW5jZTwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Ii9oZWxwIj5IZWxwPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Ii91c2VyL2xvZ2luIj5Mb2cgaW48L2E+CiAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgPC91bD4KICAgIDwvbmF2PgogIDwvZGl2Pgo8L2Rpdj4KCiAgICAgIDwvZGl2PgogICAgPC9oZWFkZXI+CiAgICAKCiAgICAKICAKICAKICAKCiAgCiAgICA8ZGl2IGNsYXNzPSJ1c2VyLXJlc2VhcmNoLWJhbm5lciI+CiAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICA8cD4KICAgICAgPHN0cm9uZyBjbGFzcz0iYmFubmVyLWhlYWRpbmciPkhlbHAgdXMgaW1wcm92ZSB0aGUgRGlnaXRhbCBNYXJrZXRwbGFjZTwvc3Ryb25nPgogICAgICA8YSAKICAgICAgICBocmVmPSIjIiAKICAgICAgICBjbGFzcz0idXNlci1yZXNlYXJjaC1iYW5uZXItY2xvc2UtYnRuIgogICAgICAgIGRhdGEtYW5hbHl0aWNzPSJ0cmFja0V2ZW50IgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWNhdGVnb3J5PSJ1c2VyLXJlc2VhcmNoIgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iQ2xvc2UgYmFubmVyIgogICAgICA+Q2xvc2U8L2E+CiAgICA8L3A+CiAgICA8cD4KICAgICAgPGEgCiAgICAgICAgaHJlZj0iL3VzZXIvbm90aWZpY2F0aW9ucy91c2VyLXJlc2VhcmNoIgogICAgICAgIGRhdGEtYW5hbHl0aWNzPSJ0cmFja0V2ZW50IgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWNhdGVnb3J5PSJ1c2VyLXJlc2VhcmNoIgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iVmlldyBzaWduIHVwIHRvIHVzZXIgcmVzZWFyY2ggc2NyZWVuIgogICAgICA+U2lnbiB1cCB0byBiZSBhIHBvdGVudGlhbCB1c2VyIHJlc2VhcmNoIHBhcnRpY2lwYW50PC9hPgogICAgPC9wPgogIDwvZGl2Pgo8L2Rpdj4KICAKCgogICAgPGRpdiBpZD0iZ2xvYmFsLWhlYWRlci1iYXIiPjwvZGl2PgoKICAgIAogIAogIDxkaXYgaWQ9IndyYXBwZXIiPgogICAgCiAgICAgIAo8ZGl2IGNsYXNzPSJnb3Z1ay1icmVhZGNydW1icyI+CiAgPG9sIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGlzdCI+CiAgCiAgICAKICAgIDxsaSBjbGFzcz0iZ292dWstYnJlYWRjcnVtYnNfX2xpc3QtaXRlbSI+CiAgICAgIDxhIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGluayIgaHJlZj0iLyI+RGlnaXRhbCBNYXJrZXRwbGFjZTwvYT4KICAgIDwvbGk+CiAgICAKICAKICAgIAogICAgPGxpIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGlzdC1pdGVtIj4KICAgICAgPGEgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcyI+U3VwcGxpZXIgb3Bwb3J0dW5pdGllczwvYT4KICAgIDwvbGk+CiAgICAKICAKICA8L29sPgo8L2Rpdj4KCiAgICAKICAgIDxtYWluIGlkPSJjb250ZW50IiByb2xlPSJtYWluIj4KICAgICAgCiAgCgogICAgICAKCgo8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uLW9uZS13aG9sZSI+CiAgICAKICAgIAogICAgICA8ZGl2IGNsYXNzPSJiYW5uZXItdGVtcG9yYXJ5LW1lc3NhZ2Utd2l0aG91dC1hY3Rpb24iPgogIAogICAgPGgyPgogICAgICBBd2FyZGVkIHRvIFVuYm94ZWQgQ29uc3VsdGluZyBMdGQKICAgIDwvaDI+CiAgCiAgCiAgICA8cCBjbGFzcz0iYmFubmVyLW1lc3NhZ2UiPgogICAgICAKICAgICAgU3RhcnQgZGF0ZTogTW9uZGF5IDE0IE9jdG9iZXIgMjAxOTxiciAvPgogICAgICBWYWx1ZTogJnBvdW5kOzcwMCwwMDA8YnIvPgogICAgICBDb21wYW55IHNpemU6IFNNRQogICAgCiAgICA8L3A+CiAgCiAgCiAgCjwvZGl2PgogICAgCiAgPC9kaXY+CjwvZGl2PgoKCjxkaXYgY2xhc3M9ImdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJjb2x1bW4tdHdvLXRoaXJkcyI+CiAgICA8c3BhbiBjbGFzcz0iZ292dWstY2FwdGlvbi1sIj5CdWNraW5naGFtc2hpcmUgQ291bmNpbCAoY29udHJhY3Qgd2l0aCBCdWNraW5naGFtc2hpcmUgQ291bnR5IENvdW5jaWwpPC9zcGFuPgogICAgPGgxIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLWwiPkRlc2lnbiBhbmQgYnVpbGQgYSB3ZWJzaXRlIGZvciBhIG5ldyBsb2NhbCBhdXRob3JpdHk8L2gxPgogICAgPHNwYW4gZGF0YS1sb3Q9ImRpZ2l0YWwtb3V0Y29tZXMiPjwvc3Bhbj4KICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uLW9uZS13aG9sZSI+CiAgICAKCjxkaXYgY2xhc3M9InN0YXRpc3RpYy1jb250YWluZXIiIGlkPSJpbmNvbXBsZXRlLWFwcGxpY2F0aW9ucyI+CiAgICA8aDMgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+SW5jb21wbGV0ZSBhcHBsaWNhdGlvbnM8L2gzPgogICAgPGRpdiBjbGFzcz0iYmlnLXN0YXRpc3RpYyI+MzQ8L2Rpdj4KICAgIDxkaXYgY2xhc3M9InN0YXRpc3RpYy1uYW1lIj5JbmNvbXBsZXRlIGFwcGxpY2F0aW9uczwvZGl2PgogICAgCiAgICAgIDxkaXYgY2xhc3M9InN0YXRpc3RpYy1kZXNjcmlwdGlvbiI+MzAgU01FLCA0IGxhcmdlPC9kaXY+CiAgICAKICA8L2Rpdj4KPGRpdiBjbGFzcz0ic3RhdGlzdGljLWNvbnRhaW5lciIgaWQ9ImNvbXBsZXRlZC1hcHBsaWNhdGlvbnMiPgogICAgPGgzIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPkNvbXBsZXRlZCBhcHBsaWNhdGlvbnM8L2gzPgogICAgPGRpdiBjbGFzcz0iYmlnLXN0YXRpc3RpYyI+Mzk8L2Rpdj4KICAgIDxkaXYgY2xhc3M9InN0YXRpc3RpYy1uYW1lIj5Db21wbGV0ZWQgYXBwbGljYXRpb25zPC9kaXY+CiAgICAKICAgICAgPGRpdiBjbGFzcz0ic3RhdGlzdGljLWRlc2NyaXB0aW9uIj4zNSBTTUUsIDQgbGFyZ2U8L2Rpdj4KICAgIAogIDwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9ImdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJjb2x1bW4tb25lLXdob2xlIj4KICAgIAoKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgSW1wb3J0YW50IGRhdGVzCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+UHVibGlzaGVkPC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+V2VkbmVzZGF5IDMgSnVseSAyMDE5PC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5EZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9uczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPldlZG5lc2RheSAxMCBKdWx5IDIwMTkgYXQgMTE6NTlwbSBHTVQ8L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkNsb3NpbmcgZGF0ZSBmb3IgYXBwbGljYXRpb25zPC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+V2VkbmVzZGF5IDE3IEp1bHkgMjAxOSBhdCAxMTo1OXBtIEdNVDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTEiPgogICAgICAKICAgICAgT3ZlcnZpZXcKICA8L2gyPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIE92ZXJ2aWV3CiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5TdW1tYXJ5IG9mIHRoZSB3b3JrPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5CeSBBcHJpbCAyMDIwIHRoZSBmaXZlIGNvdW5jaWxzIGluIEJ1Y2tpbmdoYW1zaGlyZSB3aWxsIGJlY29tZSBhIG5ldyB1bml0YXJ5IGF1dGhvcml0eSwgY2FsbGVkIEJ1Y2tpbmdoYW1zaGlyZSBDb3VuY2lsLiBXZSB3YW50IHRvIHdvcmsgd2l0aCBhICBzZXJ2aWNlIGRlc2lnbiBhbmQgZGlnaXRhbCBkZXZlbG9wbWVudCBwYXJ0bmVyIHRvIGl0ZXJhdGl2ZWx5IGRldmVsb3AgYSBuZXcgd2Vic2l0ZSwgY29udGVudCBtYW5hZ2VtZW50IHN5c3RlbSwgZGVzaWduIHN5c3RlbSBhbmQgY29udGVudCBzdHJhdGVneS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5MYXRlc3Qgc3RhcnQgZGF0ZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+TW9uZGF5IDIgU2VwdGVtYmVyIDIwMTk8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5FeHBlY3RlZCBjb250cmFjdCBsZW5ndGg8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjIgeWVhcnM8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Mb2NhdGlvbjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5Tb3V0aCBFYXN0IEVuZ2xhbmQ8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5PcmdhbmlzYXRpb24gdGhlIHdvcmsgaXMgZm9yPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5CdWNraW5naGFtc2hpcmUgQ291bmNpbCAoY29udHJhY3Qgd2l0aCBCdWNraW5naGFtc2hpcmUgQ291bnR5IENvdW5jaWwpPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+QnVkZ2V0IHJhbmdlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5UaGUgbWF4aW11bSBzcGVuZCB1bmRlciB0aGUgY29udHJhY3Qgd2lsbCBiZSDCozcwMCwwMDAgLSBtYW5hZ2VkIHRocm91Z2ggc3RhdGVtZW50cyBvZiB3b3JrLiA8YnI+PGJyPlRoZXJlIGlzIGEgbWluaW11bSBzcGVuZCBvZiDCozE1MCwwMDAgLSB0byBkZWxpdmVyIGEgbWluaW11bSB2aWFibGUgcHJvZHVjdCBieSBBcHJpbCAyMDIwICh2ZXN0aW5nIGRheSBmb3IgdGhlIG5ldyBjb3VuY2lsKS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTIiPgogICAgICAKICAgICAgQWJvdXQgdGhlIHdvcmsKICA8L2gyPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIEFib3V0IHRoZSB3b3JrCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5XaHkgdGhlIHdvcmsgaXMgYmVpbmcgZG9uZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+QnkgQXByaWwgMjAyMCB0aGUgZml2ZSBjb3VuY2lscyBpbiBCdWNraW5naGFtc2hpcmUgd2lsbCBiZWNvbWUgYSBuZXcgdW5pdGFyeSBhdXRob3JpdHksIGNhbGxlZCBCdWNraW5naGFtc2hpcmUgQ291bmNpbC4gVGhlcmUgYXJlIGZvdXIgZGlzdHJpY3QgY291bmNpbCB3ZWJzaXRlcyBhbmQgb25lIGNvdW50eSBjb3VuY2lsIHdlYnNpdGUgKGFzIHdlbGwgYXMgYSBsYXJnZSBudW1iZXIgb2YgbWljcm9zaXRlcyBhbmQgc3ViIGRvbWFpbnMpLiA8YnI+PGJyPldlIG5lZWQgdG8gZGVzaWduIGFuZCBidWlsZCBhIHBsYXRmb3JtIChDTVMgYW5kIGZyb250IGVuZCkgZm9yIHRoZSBuZXcgY291bmNpbCwgaW4gYSB1c2VyLWNlbnRyZWQgYW5kIGl0ZXJhdGl2ZSB3YXkuIEFuIE1WUCBtdXN0IGJlIGluIHBsYWNlIGJ5IEFwcmlsIDIwMjAuIDxicj48YnI+VGhpcyBwcm9qZWN0IHdpbGwgc3VwcG9ydCB0aGUgdHJhbnNmb3JtYXRpb24gb2YgZW5kLXRvLWVuZCBzZXJ2aWNlcyBhcyB3ZSByZWRlc2lnbiBsb2NhbCBnb3Zlcm5tZW50IGluIEJ1Y2tpbmdoYW1zaGlyZS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Qcm9ibGVtIHRvIGJlIHNvbHZlZDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+QnkgdmVzdGluZyBkYXkgKEFwcmlsIDIwMjApIHdlIG5lZWQgYSBuZXcgd2Vic2l0ZSBmb3IgdGhlIEJ1Y2tpbmdoYW1zaGlyZSBDb3VuY2lsLiBUaGlzIHdpbGwgYmUgYSBtaW5pbXVtIHZpYWJsZSBwcm9kdWN0IChNVlApLCB3aGljaCB3ZSB3aWxsIGNvbnRpbnVlIHRvIGl0ZXJhdGUuIFRoZSBNVlAgbmVlZHMgdG8gYmUgZGV2ZWxvcGVkIHRvIG1lZXQgdGhlIG5lZWRzIG9mIHVzZXJzLCByZWZsZWN0IHRoZSBuZXcgY291bmNpbOKAmXMgdmlzaW9uIGFuZCByZXByZXNlbnQgQnVja2luZ2hhbXNoaXJlIGFzIGEgcGxhY2UuIEl0IHNob3VsZCBtYWtlIGl0IGVhc2llciBmb3IgcGVvcGxlIHRvIGZpbmQgaW5mb3JtYXRpb24sIGNvbXBsZXRlIHRhc2tzIGFuZCB1bmRlcnN0YW5kIHdoYXQgdGhleSBuZWVkIHRvIGRvIG5leHQuPGJyPjxicj5XZSB3YW50IHRvIHVzZSB0ZWNobm9sb2d5IHRoYXQgaXMgbW9kZXJuLCBvcGVuLCBmbGV4aWJsZSBhbmQgZXh0ZW5zaWJsZS4gSXQgbXVzdCBiZSBhY2Nlc3NpYmxlIGFuZCBjb25zaXN0ZW50IHdpdGggdGhlIEdEUyBUZWNobm9sb2d5IENvZGUgb2YgUHJhY3RpY2UuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+V2hvIHRoZSB1c2VycyBhcmUgYW5kIHdoYXQgdGhleSBuZWVkIHRvIGRvPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5UaGUgbmV3IGNvdW5jaWzigJlzIHdlYnNpdGUgd2lsbCBuZWVkIHRvIG1lZXQgYSB3aWRlIHJhbmdlIG9mIHVzZXIgbmVlZHMgZm9yIHJlc2lkZW50cywgYnVzaW5lc3NlcyBhbmQgdmlzaXRvcnMuIFNvbWUgaW5kaWNhdGl2ZSBoaWdoIGxldmVsIHVzZXIgbmVlZHMgYXJlOjxicj48YnI+QXMgYSByZXNpZGVudC9idXNpbmVzcy92aXNpdG9yLCBJIG5lZWQgdG8gcXVpY2tseSBhY2Nlc3MgdGhlIHJpZ2h0IGluZm9ybWF0aW9uIGFuZCBzZXJ2aWNlcyBvbmxpbmUsIHNvIHRoYXQgSSBjYW4gbWVldCBteSBuZWVkcy48YnI+PGJyPkFzIGEgY29udGVudCBwdWJsaXNoZXIsIEkgbmVlZCBhIHNpbXBsZSBhbmQgaW50dWl0aXZlIGludGVyZmFjZSwgc28gdGhhdCBJIGNhbiBjcmVhdGUgYW5kIG1hbmFnZSB1c2VmdWwgY29udGVudC48YnI+PGJyPkFzIGEgZGV2ZWxvcGVyIG9mIGEgZGlnaXRhbCBzZXJ2aWNlLCBJIG5lZWQgdG8gYWNjZXNzIGNvbnRlbnQgYW5kIGRhdGEgdmlhIGFuIEFQSSwgc28gdGhhdCBJIGNhbiByZXVzZSBjYW5vbmljYWwgZGF0YS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5FYXJseSBtYXJrZXQgZW5nYWdlbWVudDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+QSBkcmFmdCBvZiB0aGUgZGlnaXRhbCBtYXJrZXRwbGFjZSByZXF1aXJlbWVudHMgd2FzIHNoYXJlZCB2aWEgdHdpdHRlci4gVGhlIGNvbW1lbnRzIHJlY2VpdmVkIGhlbHAgdXMgYmUgY2xlYXJlciBhYm91dCB0aGUgb3V0Y29tZXMgd2UmIzM5O3JlIHNlZWtpbmcuIFdlIGFsc28gcmVkdWNlZCB0aGUgbnVtYmVyIG9mIGV2YWx1YXRpb24gY3JpdGVyaWEgaW4gcmVzcG9uc2UgdG8gZmVlZGJhY2sgZnJvbSBhIG51bWJlciBvZiBwb3RlbnRpYWwgc3VwcGxpZXJzLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFueSB3b3JrIHRoYXTigJlzIGFscmVhZHkgYmVlbiBkb25lPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkV4aXN0aW5nIHRlYW08L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlVuaXRhcnkgQ3VzdG9tZXIgYW5kIERpZ2l0YWwgQm9hcmQuIDxicj5IZWFkIG9mIERpZ2l0YWwgKFByb2R1Y3QgT3duZXIpLjxicj5XZWIgYW5kIGRpZ2l0YWwgdGVhbXMgaW4gQXlsZXNidXJ5IFZhbGUgRGlzdHJpY3QgQ291bmNpbCwgQ2hpbHRlcm4gYW5kIFNvdXRoIEJ1Y2tpbmdoYW1zaGlyZSBDb3VuY2lscywgV3ljb21iZSBEaXN0cmljdCBDb3VuY2lsIGFuZCBCdWNraW5naGFtc2hpcmUgQ291bnR5IENvdW5jaWwuPGJyPlN1cHBsaWVycyBvZiBleGlzdGluZyB3ZWJzaXRlcy48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5DdXJyZW50IHBoYXNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk5vdCBzdGFydGVkPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0zIj4KICAgICAgCiAgICAgIFdvcmsgc2V0dXAKICA8L2gyPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIFdvcmsgc2V0dXAKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFkZHJlc3Mgd2hlcmUgdGhlIHdvcmsgd2lsbCB0YWtlIHBsYWNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5CdWNraW5naGFtc2hpcmUgKEF5bGVzYnVyeSwgSGlnaCBXeWNvbWJlLCBBbWVyc2hhbSwgRGVuaGFtKS4gVGhlIGhvbWUgYmFzZSBmb3IgdGhlIHRlYW0gaXMgbGlrZWx5IHRvIGJlIEF5bGVzYnVyeS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Xb3JraW5nIGFycmFuZ2VtZW50czwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+V2Ugd2lsbCByZXF1aXJlIGEgdGVhbSBvbnNpdGUgZm9yIGFwcHJveGltYXRlbHkgMi0zIGRheXMgYSB3ZWVrLCBtb3N0IHdlZWtzLiBUaGlzIGlzIHNvIHRoYXQgeW91IGNhbiB3b3JrIGNsb3NlbHkgd2l0aCBjb3VuY2lsIHN0YWZmIGFuZCBoYXZlIGVhc3kgYWNjZXNzIHRvIHRoZSBzZXJ2aWNlIHVzZXJzLiBBZ2lsZSBjZXJlbW9uaWVzIHNob3VsZCBiZSBoZWxkIG9uc2l0ZSB3aGVyZXZlciBwb3NzaWJsZS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5TZWN1cml0eSBjbGVhcmFuY2U8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy00Ij4KICAgICAgCiAgICAgIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24KICA8L2gyPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24KICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFkZGl0aW9uYWwgdGVybXMgYW5kIGNvbmRpdGlvbnM8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy01Ij4KICAgICAgCiAgICAgIFNraWxscyBhbmQgZXhwZXJpZW5jZQogIDwvaDI+CiAgICAgCiAgICAgICAgPHA+PHAgY2xhc3M9InN1bW1hcnktaXRlbS1kZXNjcmlwdGlvbiI+CiAgICBCdXllcnMgd2lsbCB1c2UgdGhlIGVzc2VudGlhbCBhbmQgbmljZS10by1oYXZlIHNraWxscyBhbmQgZXhwZXJpZW5jZSB0byBoZWxwIHRoZW0gZXZhbHVhdGUgc3VwcGxpZXJz4oCZIHRlY2huaWNhbCBjb21wZXRlbmNlLgogIDwvcD48L3A+CiAgICAgCiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgU2tpbGxzIGFuZCBleHBlcmllbmNlCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Fc3NlbnRpYWwgc2tpbGxzIGFuZCBleHBlcmllbmNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjx1bD4KICAgIAogICAgICA8bGk+UHJvdmlkZSBhbiBhZ2lsZSBtdWx0aSBkaXNjaXBsaW5hcnkgdGVhbSBpbmNsdWRpbmcgdXNlciByZXNlYXJjaCwgc2VydmljZSBkZXNpZ24gYW5kIHByb2R1Y3QgZGV2ZWxvcG1lbnQ8L2xpPgogICAgCiAgICAgIDxsaT5IYXZlIGV4cGVyaWVuY2UgZGVzaWduaW5nIGhpZ2ggdm9sdW1lIGRpZ2l0YWwgc2VydmljZXMgdGhhdCBtZWV0IGEgd2lkZSByYW5nZSBvZiB1c2VyIG5lZWRzPC9saT4KICAgIAogICAgICA8bGk+SGF2ZSBrbm93bGVkZ2Ugb2YgdGhlIHVzZXIgbmVlZHMgb2YgbG9jYWwgZ292ZXJubWVudCBzZXJ2aWNlIHVzZXJzPC9saT4KICAgIAogICAgICA8bGk+RGVsaXZlciBpbiBsaW5lIHdpdGggdGhlIEdvdmVybm1lbnQgc2VydmljZSBzdGFuZGFyZCBhbmQgdGVjaG5vbG9neSBjb2RlIG9mIHByYWN0aWNlPC9saT4KICAgIAogICAgICA8bGk+RGVzaWduIHNlcnZpY2VzIHRoYXQgbWVldCBhY2Nlc3NpYmlsaXR5IGxlZ2lzbGF0aW9uIGFuZCBiZXN0IHByYWN0aWNlPC9saT4KICAgIAogICAgICA8bGk+RGVzaWduIHNlcnZpY2VzIGZvciB1c2VycyB3aXRoIGxvdyBkaWdpdGFsIGxpdGVyYWN5PC9saT4KICAgIAogICAgICA8bGk+SGF2ZSBleHBlcmllbmNlIG9mIGRldmVsb3BpbmcgY29udGVudCBzdHJhdGVneTwvbGk+CiAgICAKICAgICAgPGxpPkhhdmUgbWFuYWdlZCB0aGUgcGhhc2VkIHJvbGwgb3V0IG9mIGEgbmV3IHdlYnNpdGUgYXJjaGl0ZWN0dXJlPC9saT4KICAgIAogICAgICA8bGk+SGF2ZSB0aGUgYWJpbGl0eSB0byB3b3JrIHdpdGggaW50ZXJuYWwgSVQgdGVhbXMgdG8gYXJyYW5nZSBob3N0aW5nIGFuZCBpbnRlZ3JhdGlvbiB3aXRoIGV4aXN0aW5nIHNlcnZpY2VzPC9saT4KICAgIAogIDwvdWw+CiAgPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+TmljZS10by1oYXZlIHNraWxscyBhbmQgZXhwZXJpZW5jZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj48dWw+CiAgICAKICAgICAgPGxpPlByb3ZpZGUgZXZpZGVuY2Ugb2YgaGF2aW5nIHBhc3NlZCBhIGdvdmVybm1lbnQsIGxvY2FsIGdvdmVybm1lbnQgb3IgTkhTIGRpZ2l0YWwgc2VydmljZSBhc3Nlc3NtZW50PC9saT4KICAgIAogICAgICA8bGk+RGV2ZWxvcCBkaWdpdGFsIGFuZCBkZXNpZ24gc2tpbGxzIHdpdGggaW4taG91c2UgdGVhbXM8L2xpPgogICAgCiAgICAgIDxsaT5EZW1vbnN0cmF0ZSBleHBlcmllbmNlIG9mIGRlbGl2ZXJpbmcgZW5kLXRvLWVuZCBzZXJ2aWNlIHRyYW5zZm9ybWF0aW9uPC9saT4KICAgIAogIDwvdWw+CiAgPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy02Ij4KICAgICAgCiAgICAgIEhvdyBzdXBwbGllcnMgd2lsbCBiZSBldmFsdWF0ZWQKICA8L2gyPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIEhvdyBzdXBwbGllcnMgd2lsbCBiZSBldmFsdWF0ZWQKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkhvdyBtYW55IHN1cHBsaWVycyB0byBldmFsdWF0ZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+NTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPlByb3Bvc2FsIGNyaXRlcmlhPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjx1bD4KICAgIAogICAgICA8bGk+VGVjaG5pY2FsIHNvbHV0aW9uPC9saT4KICAgIAogICAgICA8bGk+QXBwcm9hY2ggYW5kIG1ldGhvZG9sb2d5PC9saT4KICAgIAogICAgICA8bGk+SG93IHRoZSBzb2x1dGlvbiBtZWV0cyB1c2VyIG5lZWRzPC9saT4KICAgIAogICAgICA8bGk+SG93IHRoZSBzb2x1dGlvbiBtZWV0cyB0aGUgb3JnYW5pc2F0aW9uc+KAmSBwb2xpY3kgb3IgZ29hbDwvbGk+CiAgICAKICAgICAgPGxpPkVzdGltYXRlZCB0aW1lZnJhbWVzIGZvciB0aGUgd29yayAtIHRoZSBwcm9wb3NhbCB3aWxsIGJlIGV2YWx1YXRlZCB0byBkZXRlcm1pbmUgaWYgdGhlIGFwcHJvYWNoIGNhbiByZWFsaXN0aWNhbGx5IHByb2R1Y2UgYSBtaW5pbXVtIHZpYWJsZSBwcm9kdWN0IGJ5IEFwcmlsIDIwMjA8L2xpPgogICAgCiAgICAgIDxsaT5JZGVudGlmaWNhdGlvbiBvZiByaXNrcyBhbmQgZGVwZW5kZW5jaWVzIHdpdGggYSBwbGFuIHRvIG1hbmFnZSB0aGVtPC9saT4KICAgIAogICAgICA8bGk+VGVhbSBzdHJ1Y3R1cmU8L2xpPgogICAgCiAgICAgIDxsaT5WYWx1ZSBmb3IgbW9uZXk8L2xpPgogICAgCiAgPC91bD4KICA8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5DdWx0dXJhbCBmaXQgY3JpdGVyaWE8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+PHVsPgogICAgCiAgICAgIDxsaT5Xb3JrIGFzIGEgdGVhbSB3aXRoIGNvbGxlYWd1ZXMgZnJvbSBhY3Jvc3MgQnVja2luZ2hhbXNoaXJlIGFuZCB3aXRoIGV4aXN0aW5nIHN1cHBsaWVyczwvbGk+CiAgICAKICAgICAgPGxpPkJlIHRyYW5zcGFyZW50IGFuZCBjb2xsYWJvcmF0aXZlIHdoZW4gbWFraW5nIGRlY2lzaW9uczwvbGk+CiAgICAKICAgICAgPGxpPlRha2UgcmVzcG9uc2liaWxpdHkgZm9yIHRoZSB3b3JrPC9saT4KICAgIAogICAgICA8bGk+U3VwcG9ydCB0aGUgbGVhcm5pbmcgYW5kIGRldmVsb3BtZW50IG9mIEJ1Y2tpbmdoYW1zaGlyZSBjb2xsZWFndWVzPC9saT4KICAgIAogICAgICA8bGk+QmUgY29tZm9ydGFibGUgc3RhbmRpbmcgdXAgZm9yIHRoZWlyIGRpc2NpcGxpbmU8L2xpPgogICAgCiAgICAgIDxsaT5Xb3JrIHdpdGggc3Rha2Vob2xkZXJzIHdpdGggbG93IHRlY2huaWNhbCBleHBlcnRpc2U8L2xpPgogICAgCiAgPC91bD4KICA8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5QYXltZW50IGFwcHJvYWNoPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkNhcHBlZCB0aW1lIGFuZCBtYXRlcmlhbHM8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Bc3Nlc3NtZW50IG1ldGhvZHM8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+V3JpdHRlbiBwcm9wb3NhbDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkV2YWx1YXRpb24gd2VpZ2h0aW5nPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJtdWx0aXF1ZXN0aW9uIj4KICAgICAgICAgIDxwPlRlY2huaWNhbCBjb21wZXRlbmNlPC9wPgogICAgICAgICAgPGRpdj42MCU8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibXVsdGlxdWVzdGlvbiI+CiAgICAgICAgICA8cD5DdWx0dXJhbCBmaXQ8L3A+CiAgICAgICAgICA8ZGl2PjIwJTwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJtdWx0aXF1ZXN0aW9uIj4KICAgICAgICAgIDxwPlByaWNlPC9wPgogICAgICAgICAgPGRpdj4yMCU8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uLW9uZS13aG9sZSI+CiAgICAKCgoKPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9ImNsYXJpZmljYXRpb24tcXVlc3Rpb25zIj4KICAgICAgCiAgICAgIFF1ZXN0aW9ucyBhc2tlZCBieSBzdXBwbGllcnMKICA8L2gyPgoKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgUXVlc3Rpb25zIGFza2VkIGJ5IHN1cHBsaWVycwogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+U3VwcGxpZXIgcXVlc3Rpb248L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5CdXllciBhbnN3ZXI8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj4xLjwvc3Bhbj4KICAgICAgUGxlYXNlIGNhbiB5b3UgY29uZmlybSB3aGljaCBpbmN1bWJlbnQgQ01TIHN5c3RlbSB5b3UgaW50ZW5kIHRvIHVzZSB0byBkZWxpdmVyIHRoaXMgcHJvamVjdC48L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5UaGVyZSBhcmUgZml2ZSBleGlzdGluZyB3ZWJzaXRlcywgd2l0aCBhIHJhbmdlIG9mIENNUyB0ZWNobm9sb2dpZXMgLSBzbyB0aGVyZSBpc24mIzM5O3QgYSBzaW5nbGUgaW5jdW1iZW50IHBsYXRmb3JtLiBXZSBhcmUgYWdub3N0aWMgYWJvdXQgdGhlIENNUyB0aGF0IGlzIHVzZWQgZm9yIHRoaXMgcHJvamVjdC48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj4yLjwvc3Bhbj4KICAgICAgQXJlIHRoZSBDb3VuY2lscyB3aWxsaW5nIHRvIGFjY2VwdCBiaWRzIHRoYXQgcHJvcG9zZSB0aGUgdXNlIG9mIGEgbmV3IENNUyBwbGF0Zm9ybT88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5ZZXM8L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj4zLjwvc3Bhbj4KICAgICAgRG8gdGhlIENvdW5jaWxzIHdpc2ggdG8gaG9zdCB0aGUgc29sdXRpb24gb24gcHJlbWlzZSBvciB1dGlsaXNlIGEgY2xvdWQgYmFzZWQgaG9zdGluZyBzb2x1dGlvbj88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5XZSB3YW50IHRvIHVzZSBjbG91ZCBob3N0aW5nPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+NC48L3NwYW4+CiAgICAgIFdoYXQgd2FzIHRoZSB0d2l0dGVyIGhhbmRsZSB3aGVyZSB0aGUgcHJlIG1hcmtldCBlbmdhZ2VtZW50IHRvb2sgcGxhY2U/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+PGEgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW51bnN3b3J0aC9zdGF0dXMvMTEzOTUyNTUwOTA1Mjg2NjU2MCIgY2xhc3M9ImJyZWFrLWxpbmsiIHJlbD0iZXh0ZXJuYWwiPmh0dHBzOi8vdHdpdHRlci5jb20vYmVudW5zd29ydGgvc3RhdHVzLzExMzk1MjU1MDkwNTI4NjY1NjA8L2E+PC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+NS48L3NwYW4+CiAgICAgIEFzc3VtaW5nIHRoYXQgd2UgY2FuIHNjaGVkdWxlIGFsbCB3b3JrIHBhY2thZ2VzIHRvIGJlIGRlbGl2ZXJlZCBwcm9tcHRseSwgaW4gYW4gYWdpbGUgbWFubmVyLCB1c2luZyB0b29scyBhbmQgY29sbGFib3JhdGlvbiwgaXMgdGhlcmUgYW4gYWJzb2x1dGUgcmVxdWlyZW1lbnQgZm9yIGJlaW5nIGF0IHRoZSBDb3VuY2lsIDIvMyBkYXlzIHBlciB3ZWVrLCBvciBpcyBpdCBzdWZmaWNlIHRvIGFycmFuZ2UgZmFjZS10by1mYWNlIG1lZXRpbmdzIGFzL3doZW4gcmVxdWlyZWQ/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+RmFjZSB0byBmYWNlIG1lZXRpbmdzIGFzL3doZW4gcmVxdWlyZWQgd2lsbCBub3Qgc3VmZmljZS4gV2UgYmVsaWV2ZSB0aGUgYmVzdCB3YXkgdG8gZGVsaXZlciB0aGlzIHByb2plY3QgaXMgd2l0aCBjby1sb2NhdGVkIG11bHRpZGlzY2lwbGluYXJ5IHRlYW1zLCBjb25kdWN0aW5nIHJlc2VhcmNoIHdpdGggcmVhbCB1c2Vycy4gV2Ugd2FudCBvdXIgaW4gaG91c2UgdGVhbXMgdG8gd29yayBhbmQgbGVhcm4gYWxvbmdzaWRlIHRoZSBzdXBwbGllciB0ZWFtLiBXZSBjYW4gYmUgZmxleGlibGUgdG8gdGhlIHJoeXRobXMgb2YgdGhlIHByb2plY3QgYW5kIGRvbiYjMzk7dCBleHBlY3QgdW5uZWNlc3NhcnkgJiMzOTtwcmVzZW50ZWVpc20mIzM5OyBmcm9tIHRoZSBkZWxpdmVyeSB0ZWFtLCBidXQgd2FudCB0byBtYXhpbWlzZSB0aGUgcG9zaXRpdmUgYmVuZWZpdHMgb2YgY28tbG9jYXRpb24uPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+Ni48L3NwYW4+CiAgICAgIE1heSB0aGUgbmV3IHdlYiBzaXRlIHN0cnVjdHVyZSB1c2UgZXhpc3RpbmcgdHJhbnNhY3Rpb25hbCBzeXN0ZW1zIChvbmxpbmUgdGF4LCBvdGhlciBvbmxpbmUgYWNjZXNzIHRvb2xzKSBhbmQgbGluayB0aGVtIHRvIHRoZSBuZXcgc2l0ZSBzdHJ1Y3R1cmUgb3IgaXMgdGhlIGNob3NlbiB2ZW5kb3IgcmVxdWlyZWQgdG8gZGV2ZWxvcCB0aGVzZSBhcyB3ZWxsPzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk1hbnkgdHJhbnNhY3Rpb25hbCBzZXJ2aWNlcyBhcmUgZGVsaXZlcmVkIHRocm91Z2ggc3BlY2lmaWMgbGluZSBvZiBidXNpbmVzcyBzeXN0ZW1zLiBXZSB3aWxsIG5lZWQgdG8gbGluayB1c2VycyB0byB0aGVzZSBwcm9jZXNzZXMgYXMgaW50dWl0aXZlbHkgYXMgcG9zc2libGUuPGJyPjxicj5UaGVyZSBtYXkgYmUgc2VydmljZXMgdGhhdCBhcmUgbm90IGZpdCBmb3IgcHVycG9zZSBhbmQgbmVlZCByZWRlc2lnbiAvIGRldmVsb3BtZW50LiBUaGUgcHJvZHVjdCB0ZWFtIHdpbGwgd29yayB0b2dldGhlciB0byBwcmlvcml0aXNlIGRldmVsb3BtZW50IGFuZCBkZWZpbmUgdGhyb3VnaCBzdGF0ZW1lbnRzIG9mIHdvcmsuPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+Ny48L3NwYW4+CiAgICAgIFdoYXQgdHlwZSBvZiBleGlzdGluZyBzeXN0ZW1zIG5lZWQgdG8gYmUgaW50ZWdyYXRlZCAvIGxpbmtlZD88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5UaGVyZSBhcmUgdG9vIG1hbnkgdG8gbGlzdCBpbiB0aGlzIGFuc3dlci4gVGhlcmUgaXMgYSB3aWRlIHJhbmdlIG9mIHRyYW5zYWN0aW9uYWwgc2VydmljZXMgdGhhdCBhcmUgbGlua2VkIHRvIG9yIGludGVncmF0ZWQgd2l0aCB0aGUgZXhpc3RpbmcgY291bmNpbCB3ZWJzaXRlcy4gPGJyPjxicj5UaGUgcHJvZHVjdCB0ZWFtIHdpbGwgd29yayB3aXRoIHNlcnZpY2UgYXJlYXMgdG8gZGV2ZWxvcCBhIHJvYWRtYXAgZm9yIGRldmVsb3BtZW50LiBJbiB0aGUgc2hvcnQgdGVybSB3ZSB3aWxsIGJlIGtlZXBpbmcgdGhlIGV4aXN0aW5nIGluZnJhc3RydWN0dXJlIGluIHBsYWNlIHRvIHByb3ZpZGUgdGhlc2Ugc2VydmljZXMuPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+OC48L3NwYW4+CiAgICAgIFdlIGNhbiBzZWUgZnJvbSB0aGUgYnJpZWYgdGhhdCB0aGUgcHJvamVjdCB3aWxsIGJlIHJ1biBieSBhIGNvbW1pdHRlZSBvZiByZXByZXNlbnRhdGl2ZXMgZnJvbSB0aGUgdmFyaW91cyBhdXRob3JpdHkgd2ViIHRlYW1zLiBXaWxsIHRoZXJlIGJlIGEgc3BlY2lmaWMgbGVhZCBmb3IgdGhlIHByb2plY3Q/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VGhlIHByb2plY3Qgd2lsbCByZXBvcnQgaW50byB0aGUgdW5pdGFyeSBwcm9ncmFtbWUgZ292ZXJuYW5jZSwgYnV0IHdpbGwgbm90IGJlIHJ1biBieSBhIGNvbW1pdHRlZS4gVGhlIHByb2plY3Qgd2lsbCBiZSBydW4gYnkgYW4gZW1wb3dlcmVkIGRlbGl2ZXJ5IHRlYW0uIFRoZSBIZWFkIG9mIERpZ2l0YWwgd2lsbCBiZSB0aGUgcHJvZHVjdCBvd25lciBhbmQgYSBzZW5pb3Igc2VydmljZSBvd25lciB3aWxsIGJlIGlkZW50aWZpZWQgdG8gc3VwcG9ydCByYXBpZCBkZWNpc2lvbiBtYWtpbmcuPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+OS48L3NwYW4+CiAgICAgIFlvdSBoYXZlIGVhcm1hcmtlZCAxNTBLIHRvIHJlYWNoIGFuIE1WUCBmb3IgdGhlIHdlYnNpdGUuIFdoYXQgc2VydmljZXMgZG8geW91IGVudmlzYWdlIHRoZSByZW1haW5pbmcgYnVkZ2V0IGNvdmVyaW5nPzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkJ5IHRoZSBlbmQgb2YgdGhlIHByb2plY3Qgd2UgZXhwZWN0IHRvIGhhdmUgYSB3ZWJzaXRlIHRoYXQgY292ZXJzIGFsbCBvZiB0aGUgc2VydmljZXMgb3VyIHVzZXJzIG5lZWQgdG8gYWNjZXNzIG9ubGluZSBmcm9tIHRoZSBuZXcgY291bmNpbC4gPGJyPjxicj5Tb21lIG9mIHRoZXNlIHNlcnZpY2VzIHdpbGwgYmUgcHJvdmlkZWQgYnkgZXhpc3Rpbmcgb3IgbmV3IGxpbmUgb2YgYnVzaW5lc3Mgc3lzdGVtcyBhbmQvb3IgbWljcm9zaXRlcy4gV2UgYW50aWNpcGF0ZSBzb21lIHdpbGwgYmUgcmVkZXNpZ25lZCBhbmQgYnVpbHQgYXMgYSBwYXJ0IG9mIHRoaXMgcHJvamVjdC48YnI+PGJyPlRoZSBkZXZlbG9wbWVudCBhbmQgcHJpb3JpdGlzYXRpb24gb2YgdGhlIHJvYWRtYXAgaXMgYW4gaW1wb3J0YW50IHBhcnQgb2YgdGhpcyBwcm9qZWN0Ljwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+PHNwYW4gYXJpYS1sYWJlbD0icXVlc3Rpb24iPjEwLjwvc3Bhbj4KICAgICAgQXJlIGFkZGl0aW9uYWwgYXNzZXNzbWVudCBtZXRob2RzLCBvdGhlciB0aGFuIGEgd3JpdHRlbiBwcm9wb3NhbCwgcmVxdWlyZWQ/IFRoZSBwcm9qZWN0IHNjb3BlIGFuZCBidWRnZXQgd291bGQgc3VnZ2VzdCBvdGhlcndpc2UuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+WWVzLiBJbiBhZGRpdGlvbiB0byB0aGUgd3JpdHRlbiBwcm9wb3NhbCB3ZSB3aWxsIHJlcXVpcmUgc2hvcnRsaXN0ZWQgc3VwcGxpZXJzIHRvIGdpdmUgYSBwcmVzZW50YXRpb24gdG8gdGhlIGV2YWx1YXRpb24gdGVhbS48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj4xMS48L3NwYW4+CiAgICAgIERvIHlvdSBoYXZlIGEgcHJlZmVyZW5jZSBmb3Igb3BlbiBzb3VyY2UgdnMgcHJvcHJpZXRhcnkgQ01TIG9yIGFyZSB5b3Ugb3BlbiB0byBhbGwgb3B0aW9ucyBiYXNlZCBvbiB0aGUgYmVuZWZpdHMgdGhhdCBhIHNwZWNpZmljIENNUyBzb2x1dGlvbiBwcm92aWRlcy48L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5XZSBoYXZlIGEgcHJlZmVyZW5jZSBmb3Igb3BlbiBzb3VyY2UgYW5kIG9wZW4gc3RhbmRhcmRzIGJhc2VkIHRlY2hub2xvZ3kuPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+MTIuPC9zcGFuPgogICAgICBRdWVzdGlvbiBmcm9tIFEmYW1wO0Egc2Vzc2lvbjogQXJlIHlvdSBhYmxlIHRvIHNoYXJlIGFueSBzY29yaW5nIGNyaXRlcmlhLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlRoZSBjcml0ZXJpYSB0aGF0IHdpbGwgYmUgc2NvcmVkIGFnYWluc3QgYXJlIGxpc3RlZCB1bmRlciB0aGUgJiMzOTtIb3cgc3VwcGxpZXJzIHdpbGwgYmUgZXZhbHVhdGVkJiMzOTsgc2VjdGlvbiBvZiB0aGlzIG1hcmtldHBsYWNlIGxpc3RpbmcuIFRoZXJlIGlzIGRldGFpbGVkIGd1aWRhbmNlIGF0IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9ob3ctdG8tZXZhbHVhdGUtZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtc3VwcGxpZXJzIiBjbGFzcz0iYnJlYWstbGluayIgcmVsPSJleHRlcm5hbCI+aHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2hvdy10by1ldmFsdWF0ZS1kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zdXBwbGllcnM8L2E+IHRoYXQgZXhwbGFpbnMgaG93IHRoZSBldmFsdWF0aW9uIHN0YWdlIHdvcmtzLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+PHNwYW4gYXJpYS1sYWJlbD0icXVlc3Rpb24iPjEzLjwvc3Bhbj4KICAgICAgQXJlIHlvdSB0byBvcGVuIHRvIHBhcnRuZXJzaGlwIG9yIGNvbnNvcnRpdW0gYmlkcy48L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5ZZXM8L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCgogIDwvZGl2Pgo8L2Rpdj4KCgoKCiAgICA8L21haW4+CiAgPC9kaXY+CgoKICAgIDxmb290ZXIgY2xhc3M9Imdyb3VwIGpzLWZvb3RlciIgaWQ9ImZvb3RlciIgcm9sZT0iY29udGVudGluZm8iPgoKICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXdyYXBwZXIiPgogICAgICAgIAogIDxkaXYgY2xhc3M9ImZvb3Rlci1jYXRlZ29yaWVzIj4KICA8ZGl2IGNsYXNzPSJmb290ZXItYWJvdXQiPgogICAgPGgyPgogICAgICBBYm91dCB0aGUgRGlnaXRhbCBNYXJrZXRwbGFjZQogICAgPC9oMj4KICAgIDx1bD4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Ii9oZWxwIj5Db250YWN0PC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtbWFya2V0cGxhY2UtYnV5ZXJzLWd1aWRlIj5TZXJ2aWNlcyB5b3UgY2FuIGJ1eTwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW1hcmtldHBsYWNlLXN1cHBsaWVycy1ndWlkZSI+U2VydmljZXMgeW91IGNhbiBzZWxsPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9jcm93bi1jb21tZXJjaWFsLXNlcnZpY2UiPkFib3V0IENyb3duIENvbW1lcmNpYWwgU2VydmljZTwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9nb3Zlcm5tZW50L29yZ2FuaXNhdGlvbnMvZ292ZXJubWVudC1kaWdpdGFsLXNlcnZpY2UiPkFib3V0IEdvdmVybm1lbnQgRGlnaXRhbCBTZXJ2aWNlPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iL2ctY2xvdWQvc3VwcGxpZXJzIj5HLUNsb3VkIHN1cHBsaWVyIEHigJNaPC9hPgogICAgICA8L2xpPgogICAgPC91bD4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJmb290ZXItZ3VpZGFuY2UiPgogICAgPGgyPgogICAgICAgIEd1aWRhbmNlIGZvciB1c2luZyBEaWdpdGFsIE1hcmtldHBsYWNlCiAgICA8L2gyPgogICAgPHVsPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2ctY2xvdWQtc3VwcGxpZXJzLWd1aWRlIj5BcHBseWluZyB0byBzZWxsIG9uIHRoZSBHLUNsb3VkIGZyYW1ld29yazwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zdXBwbGllcnMtZ3VpZGUiPkFwcGx5aW5nIHRvIHNlbGwgb24gdGhlIERPUyBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvaG93LXRvLXNlbGwteW91ci1kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zZXJ2aWNlcyI+UmVzcG9uZGluZyB0byBidXllciByZXF1aXJlbWVudHMgb24gdGhlIERPUyBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZy1jbG91ZC1idXllcnMtZ3VpZGUiPkJ1eWluZyBvbiB0aGUgRy1DbG91ZCBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtYnV5ZXJzLWd1aWRlIj5CdXlpbmcgb24gdGhlIERPUyBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvdGhlLWNyb3duLWhvc3RpbmctZGF0YS1jZW50cmVzLWZyYW1ld29yay1vbi10aGUtZGlnaXRhbC1tYXJrZXRwbGFjZSI+QnV5aW5nIG9uIHRoZSBDcm93biBIb3N0aW5nIGZyYW1ld29yazwvYT4KICAgICAgPC9saT4KICAgIDwvdWw+CiAgPC9kaXY+CiAgPGhyLz4KPC9kaXY+CgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItbWV0YSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItbWV0YS1pbm5lciI+CiAgICAgICAgICAgIAogIDxoMiBjbGFzcz0idmlzdWFsbHloaWRkZW4iPgogIFN1cHBvcnQgbGlua3MKPC9oMj4KCjx1bD4KICA8bGk+PGEgaHJlZj0iL3Rlcm1zLWFuZC1jb25kaXRpb25zIiBjbGFzcz0idGVybXMtYW5kLWNvbmRpdGlvbnMiPlRlcm1zIGFuZCBjb25kaXRpb25zPC9hPjwvbGk+CiAgPGxpPjxhIGhyZWY9Ii9jb29raWVzIj5Db29raWVzPC9hPjwvbGk+CiAgPGxpPjxhIGhyZWY9Ii9wcml2YWN5LW5vdGljZSI+UHJpdmFjeSBub3RpY2U8L2E+PC9saT4KPC91bD4KCjxwPgogIEJ1aWx0IGJ5IHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2dvdmVybm1lbnQtZGlnaXRhbC1zZXJ2aWNlIj5Hb3Zlcm5tZW50IERpZ2l0YWwgU2VydmljZTwvYT4KPC9wPgoKCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9wZW4tZ292ZXJubWVudC1saWNlbmNlIj4KICAgICAgICAgICAgICA8cCBjbGFzcz0ibG9nbyI+PGEgaHJlZj0iaHR0cHM6Ly93d3cubmF0aW9uYWxhcmNoaXZlcy5nb3YudWsvZG9jL29wZW4tZ292ZXJubWVudC1saWNlbmNlL3ZlcnNpb24vMy8iIHJlbD0ibGljZW5zZSI+T3BlbiBHb3Zlcm5tZW50IExpY2VuY2U8L2E+PC9wPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHA+QWxsIGNvbnRlbnQgaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5uYXRpb25hbGFyY2hpdmVzLmdvdi51ay9kb2Mvb3Blbi1nb3Zlcm5tZW50LWxpY2VuY2UvdmVyc2lvbi8zLyIgcmVsPSJsaWNlbnNlIj5PcGVuIEdvdmVybm1lbnQgTGljZW5jZSB2My4wPC9hPiwgZXhjZXB0IHdoZXJlIG90aGVyd2lzZSBzdGF0ZWQ8L3A+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CgogICAgICAgICAgPGRpdiBjbGFzcz0iY29weXJpZ2h0Ij4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5uYXRpb25hbGFyY2hpdmVzLmdvdi51ay9pbmZvcm1hdGlvbi1tYW5hZ2VtZW50L3JlLXVzaW5nLXB1YmxpYy1zZWN0b3ItaW5mb3JtYXRpb24vY29weXJpZ2h0LWFuZC1yZS11c2UvY3Jvd24tY29weXJpZ2h0LyI+JmNvcHk7IENyb3duIGNvcHlyaWdodDwvYT4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZm9vdGVyPgoKICAgIDxkaXYgaWQ9Imdsb2JhbC1hcHAtZXJyb3IiIGNsYXNzPSJhcHAtZXJyb3IgaGlkZGVuIj48L2Rpdj4KCiAgICA8c2NyaXB0IHNyYz0iL3N0YXRpYy9qYXZhc2NyaXB0cy9nb3Z1ay10ZW1wbGF0ZS5qcz8wLjE5LjIiPjwvc2NyaXB0PgoKICAgIAogIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zdGF0aWMvamF2YXNjcmlwdHMvYXBwbGljYXRpb24uanM/Y2ViMDAxMzZiMDE0YTM4YmU3OThhZDRhYTZlNzdiMzciPjwvc2NyaXB0PgogIAoKCiAgICAKICAgIDxzY3JpcHQ+aWYgKHR5cGVvZiB3aW5kb3cuR09WVUsgPT09ICd1bmRlZmluZWQnKSBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9IGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lLnJlcGxhY2UoJ2pzLWVuYWJsZWQnLCAnJyk7PC9zY3JpcHQ+CiAgPC9ib2R5Pgo8L2h0bWw+
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:47:39 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/9969
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.3p62 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29085'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:47:40 GMT
      Dm-Request-Id:
      - 328d17511a91ce7e
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:47:40 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2jA.SA_ysc_yO5IXVLMCLTmaDU-XYVk;
        Expires=Tue, 24-Dec-2019 15:47:40 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 328d17511a91ce7e
      X-B3-Traceid:
      - 328d17511a91ce7e
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 27290f01-bf77-41a9-5e08-efabf577f22b
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 88f7d12d0d052a4b41f37e978669fe92.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - 6bwtdt2wYQEcYVhfNnvdfER-PzXYPjZoLGB_hyByXiDMKSWbx3j-jQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:47:40 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/9935
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.3p62 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29382'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:47:40 GMT
      Dm-Request-Id:
      - 0f3ca1c4fbcb854f
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:47:40 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2jA.SA_ysc_yO5IXVLMCLTmaDU-XYVk;
        Expires=Tue, 24-Dec-2019 15:47:40 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 0f3ca1c4fbcb854f
      X-B3-Traceid:
      - 0f3ca1c4fbcb854f
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 789b0ee0-c47c-444c-786e-d4de95ce08d8
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 17af39b4ee92855346b22603f9fa56ab.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - TEMnZkDqKPC1cZWo6LLc9CQY5EZU4TaPzoH4gUovZdiVNDEkTrCrQQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:47:40 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11438
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.3p62 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '28369'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:47:41 GMT
      Dm-Request-Id:
      - 72d75ee6f6cdc475
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:47:41 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2jQ.oULAmwmWAVN2CTDWvcs6sPnx3jo;
        Expires=Tue, 24-Dec-2019 15:47:41 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 72d75ee6f6cdc475
      X-B3-Traceid:
      - 72d75ee6f6cdc475
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - eada30d4-8e9a-45a5-7b9c-27cc872b76d1
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 39159a0d814f803c2a493023a4925c01.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - K7U787oS5sPYhOXUyheuN5AVMlP11jjkWrMcjH6fW6X3qP0lR5TtmA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:47:40 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities?q=&statusOpenClosed=open
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '39709'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:00 GMT
      Dm-Request-Id:
      - 7e6c8beca7f736e0
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:00 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2oA.CBXl60EW9-GaJvU39aBg3FP-sus;
        Expires=Tue, 24-Dec-2019 15:48:00 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 7e6c8beca7f736e0
      X-B3-Traceid:
      - 7e6c8beca7f736e0
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 43c30493-04ca-46d9-5550-e98e3c9c2dc5
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 58f040c89bfa807063443a43cdc364af.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - SraIughqb2LDTj8Y9bpbb244lTAanN_6ZEoCLYQV7-rNq51J5hFtSQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:00 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11426
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2jQ.oULAmwmWAVN2CTDWvcs6sPnx3jo
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '39523'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:00 GMT
      Dm-Request-Id:
      - 2503b0f19bc919d4
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:00 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2oA.CBXl60EW9-GaJvU39aBg3FP-sus;
        Expires=Tue, 24-Dec-2019 15:48:00 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 2503b0f19bc919d4
      X-B3-Traceid:
      - 2503b0f19bc919d4
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 9ab41dcd-1c75-4459-710d-9a80c1f9a590
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 e9264a80086c9204ba271fc4403dab51.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - Awj6aOoDzJJJGjp8o4ywgSOZC8y5Shh8UyF4VOQyE8b2480iUXq7kg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:00 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11213
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2oA.CBXl60EW9-GaJvU39aBg3FP-sus
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '32837'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:01 GMT
      Dm-Request-Id:
      - 03d4b356fc202cf0
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:01 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2oQ.-338zZS1g-EZX8RpSEs2iXgrxTI;
        Expires=Tue, 24-Dec-2019 15:48:01 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 03d4b356fc202cf0
      X-B3-Traceid:
      - 03d4b356fc202cf0
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b86c56ba-99b4-455d-54a7-1eb1327999c9
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 82bacd1af934cd2afa8b1ccc8f096b22.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - "-9IC7z-NNAahjWEktaxJDze_UaRqbhhygjNwrGShatnUjYmjdFYxWQ=="
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:01 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11408
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2oQ.-338zZS1g-EZX8RpSEs2iXgrxTI
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '31704'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:01 GMT
      Dm-Request-Id:
      - 10f70c68f912c4a8
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:01 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2oQ.-338zZS1g-EZX8RpSEs2iXgrxTI;
        Expires=Tue, 24-Dec-2019 15:48:01 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 10f70c68f912c4a8
      X-B3-Traceid:
      - 10f70c68f912c4a8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - c3600030-7e78-4f98-69a2-26a51f9612b1
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 6e3453a91a5fc5982955003a408b061d.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - 0dt69ADZoPZkNNjyqogY3f4U7VTsWJnf6IkcKYFGhncrbZRin2LtAA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:01 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11331
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2oQ.-338zZS1g-EZX8RpSEs2iXgrxTI
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '31069'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:02 GMT
      Dm-Request-Id:
      - dd051497ec096219
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:02 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2og.FUj7SIPCcBb3NSHqeePFlCoi2h4;
        Expires=Tue, 24-Dec-2019 15:48:02 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - dd051497ec096219
      X-B3-Traceid:
      - dd051497ec096219
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 37292a15-f65a-4fa1-6fdd-dafd4675960c
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 58f040c89bfa807063443a43cdc364af.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - WleMHYwccAwA6y4ZA_I_cJM5ipCCfB2WlGksb7XEt9ecq7bHL1mW6Q==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:01 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11398
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2og.FUj7SIPCcBb3NSHqeePFlCoi2h4
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29758'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:02 GMT
      Dm-Request-Id:
      - 938ae95f44169530
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:02 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2og.FUj7SIPCcBb3NSHqeePFlCoi2h4;
        Expires=Tue, 24-Dec-2019 15:48:02 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 938ae95f44169530
      X-B3-Traceid:
      - 938ae95f44169530
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - f4585d07-7923-4af4-452a-fb7d43411476
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 837a41febc6992c838431473ff59ecf4.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - eBBDFNpt-oTyk94jys18-Bql_mAWgL3mOD4U1cqtjTRt5rXcE5yibg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPCEtLVtpZiBsdCBJRSA5XT48aHRtbCBjbGFzcz0ibHRlLWllOCIgbGFuZz0iZW4iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIGd0IElFIDhdPjwhLS0+PGh0bWwgbGFuZz0iZW4iPjwhLS08IVtlbmRpZl0tLT4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPgogICAgPHRpdGxlPgogIE9uZS10by1vbmUgaW50ZXJuZXQtZW5hYmxlZCBDQlQgKGhpZ2ggaW50ZW5zaXR5IGFuZCBsb3cgaW50ZW5zaXR5KSAtIERpZ2l0YWwgTWFya2V0cGxhY2UKPC90aXRsZT4KCiAgICA8IS0tW2lmIGd0IElFIDhdPjwhLS0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS5jc3M/MC4xOS4yIiBtZWRpYT0ic2NyZWVuIiByZWw9InN0eWxlc2hlZXQiIC8+PCEtLTwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBJRSA2XT48bGluayBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2dvdnVrLXRlbXBsYXRlLWllNi5jc3M/MC4xOS4yIiBtZWRpYT0ic2NyZWVuIiByZWw9InN0eWxlc2hlZXQiIC8+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIElFIDddPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUtaWU3LmNzcz8wLjE5LjIiIG1lZGlhPSJzY3JlZW4iIHJlbD0ic3R5bGVzaGVldCIgLz48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgSUUgOF0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS1pZTguY3NzPzAuMTkuMiIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhW2VuZGlmXS0tPgogICAgPGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS1wcmludC5jc3M/MC4xOS4yIiBtZWRpYT0icHJpbnQiIHJlbD0ic3R5bGVzaGVldCIgLz4KCiAgICA8IS0tW2lmIElFIDhdPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZm9udHMtaWU4LmNzcz8wLjE5LjIiIG1lZGlhPSJhbGwiIHJlbD0ic3R5bGVzaGVldCIgLz48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgZ3RlIElFIDldPjwhLS0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9mb250cy5jc3M/MC4xOS4yIiBtZWRpYT0iYWxsIiByZWw9InN0eWxlc2hlZXQiIC8+PCEtLTwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdCBJRSA5XT48c2NyaXB0IHNyYz0iL3N0YXRpYy9qYXZhc2NyaXB0cy9pZS5qcz8wLjE5LjIiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgoKICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZmF2aWNvbi5pY28/MC4xOS4yIiB0eXBlPSJpbWFnZS94LWljb24iIC8+CiAgICA8bGluayByZWw9Im1hc2staWNvbiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZ292LnVrX2xvZ290eXBlX2Nyb3duLnN2Zz8wLjE5LjIiIGNvbG9yPSIjMGIwYzBjIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgc2l6ZXM9IjE1MngxNTIiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2FwcGxlLXRvdWNoLWljb24tMTUyeDE1Mi5wbmc/MC4xOS4yIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgc2l6ZXM9IjEyMHgxMjAiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2FwcGxlLXRvdWNoLWljb24tMTIweDEyMC5wbmc/MC4xOS4yIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgc2l6ZXM9Ijc2eDc2IiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTc2eDc2LnBuZz8wLjE5LjIiPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uLXByZWNvbXBvc2VkIiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTYweDYwLnBuZz8wLjE5LjIiPgoKICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Ii9zdGF0aWMvaW1hZ2VzL29wZW5ncmFwaC1pbWFnZS5wbmc/MC4xOS4yIj4KCiAgICAKICAKCgoKCgoKCiAgPG1ldGEgbmFtZT0iZ2FfY3VzdG9tRGltZW5zaW9uIiBkYXRhLWlkPSIxMiIgZGF0YS12YWx1ZT0iVXNlciByZXNlYXJjaCBiYW5uZXIiPgoKCgoKCiAgPCEtLVtpZiBndCBJRSA4XT48IS0tPgogIDxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIG1lZGlhPSJzY3JlZW4iIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvYXBwbGljYXRpb24uY3NzPzAyYzIzYThjNWY4ZTJkZWNiOTAyZjRjNmJiNDY4MTYwIiAvPgo8IS0tPCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgN10+CiAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgbWVkaWE9InNjcmVlbiIgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9hcHBsaWNhdGlvbi1pZTcuY3NzP2ZiZDU5NGZiZDE5ZDhjNDRmN2ZjNDUzOTY4YjhjODMwIiAvPgo8IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA4XT4KICA8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBtZWRpYT0ic2NyZWVuIiBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2FwcGxpY2F0aW9uLWllOC5jc3M/NjVkM2E0ZmE4ZGI4MjdlNzQzMGU0M2E4N2VmMGNlM2MiIC8+CjwhW2VuZGlmXS0tPgogIAogICAgPG1ldGEgbmFtZT0iZ29vZ2xlLXNpdGUtdmVyaWZpY2F0aW9uIiBjb250ZW50PSJUS0dTR1puZkhweDEtbEtPdGhJMTdBTnR3azdmejNGNFNicjc3STBwcE8wIiAvPgoKCiAgPC9oZWFkPgoKICA8Ym9keSBjbGFzcz0iIj4KICAgIDxzY3JpcHQ+ZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSAoKGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lKSA/IGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lICsgJyBqcy1lbmFibGVkJyA6ICdqcy1lbmFibGVkJyk7PC9zY3JpcHQ+CgogICAgCgogICAgPGRpdiBpZD0ic2tpcGxpbmstY29udGFpbmVyIj4KICAgICAgPGRpdj4KICAgICAgICA8YSBocmVmPSIjY29udGVudCIgY2xhc3M9InNraXBsaW5rIj5Ta2lwIHRvIG1haW4gY29udGVudDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGlkPSJnbG9iYWwtY29va2llLW1lc3NhZ2UiPgogICAgICAKICAgICAgICAKICA8cD5HT1YuVUsgdXNlcyBjb29raWVzIHRvIG1ha2UgdGhlIHNpdGUgc2ltcGxlci4gPGEgaHJlZj0iL2Nvb2tpZXMiPkZpbmQgb3V0IG1vcmUgYWJvdXQgY29va2llczwvYT48L3A+CgoKICAgICAgCiAgICA8L2Rpdj4KCiAgICAKICAgIDxoZWFkZXIgcm9sZT0iYmFubmVyIiBpZD0iZ2xvYmFsLWhlYWRlciIgY2xhc3M9IndpdGgtcHJvcG9zaXRpb24iPgogICAgICA8ZGl2IGNsYXNzPSJoZWFkZXItd3JhcHBlciI+CiAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLWdsb2JhbCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXItbG9nbyI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ayIgdGl0bGU9IkdvIHRvIHRoZSBHT1YuVUsgaG9tZXBhZ2UiIGlkPSJsb2dvIiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgICAgPGltZyBzcmM9Ii9zdGF0aWMvaW1hZ2VzL2dvdi51a19sb2dvdHlwZV9jcm93bl9pbnZlcnRfdHJhbnMucG5nPzAuMTkuMiIgd2lkdGg9IjM2IiBoZWlnaHQ9IjMyIiBhbHQ9IiI+IEdPVi5VSwogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIAogIDxkaXYgY2xhc3M9ImhlYWRlci10aXRsZSI+CiAgICA8YSBocmVmPSIvIj5EaWdpdGFsIE1hcmtldHBsYWNlPC9hPgogICAgPHN0cm9uZyBjbGFzcz0icGhhc2UtdGFnIj5CRVRBPC9zdHJvbmc+CjwvZGl2PgoKICAgICAgICA8L2Rpdj4KICAgICAgICAKICA8ZGl2IGNsYXNzPSJoZWFkZXItcHJvcG9zaXRpb24iPgogIDxkaXYgY2xhc3M9ImNvbnRlbnQiPgogICAgPGEgaHJlZj0iI3Byb3Bvc2l0aW9uLWxpbmtzIiBjbGFzcz0ianMtaGVhZGVyLXRvZ2dsZSBtZW51Ij5NZW51PC9hPgogICAgPG5hdiBpZD0icHJvcG9zaXRpb24tbWVudSI+CiAgICAgIDx1bCBpZD0icHJvcG9zaXRpb24tbGlua3MiPgogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9idXlpbmctYW5kLXNlbGxpbmctb24tdGhlLWRpZ2l0YWwtbWFya2V0cGxhY2UiPkd1aWRhbmNlPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgPGEgaHJlZj0iL2hlbHAiPkhlbHA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgPGxpPgogICAgICAgICAgPGEgaHJlZj0iL3VzZXIvbG9naW4iPkxvZyBpbjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIAogICAgICA8L3VsPgogICAgPC9uYXY+CiAgPC9kaXY+CjwvZGl2PgoKICAgICAgPC9kaXY+CiAgICA8L2hlYWRlcj4KICAgIAoKICAgIAogIAogIAogIAoKICAKICAgIDxkaXYgY2xhc3M9InVzZXItcmVzZWFyY2gtYmFubmVyIj4KICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgIDxwPgogICAgICA8c3Ryb25nIGNsYXNzPSJiYW5uZXItaGVhZGluZyI+SGVscCB1cyBpbXByb3ZlIHRoZSBEaWdpdGFsIE1hcmtldHBsYWNlPC9zdHJvbmc+CiAgICAgIDxhIAogICAgICAgIGhyZWY9IiMiIAogICAgICAgIGNsYXNzPSJ1c2VyLXJlc2VhcmNoLWJhbm5lci1jbG9zZS1idG4iCiAgICAgICAgZGF0YS1hbmFseXRpY3M9InRyYWNrRXZlbnQiCiAgICAgICAgZGF0YS1hbmFseXRpY3MtY2F0ZWdvcnk9InVzZXItcmVzZWFyY2giCiAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJDbG9zZSBiYW5uZXIiCiAgICAgID5DbG9zZTwvYT4KICAgIDwvcD4KICAgIDxwPgogICAgICA8YSAKICAgICAgICBocmVmPSIvdXNlci9ub3RpZmljYXRpb25zL3VzZXItcmVzZWFyY2giCiAgICAgICAgZGF0YS1hbmFseXRpY3M9InRyYWNrRXZlbnQiCiAgICAgICAgZGF0YS1hbmFseXRpY3MtY2F0ZWdvcnk9InVzZXItcmVzZWFyY2giCiAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJWaWV3IHNpZ24gdXAgdG8gdXNlciByZXNlYXJjaCBzY3JlZW4iCiAgICAgID5TaWduIHVwIHRvIGJlIGEgcG90ZW50aWFsIHVzZXIgcmVzZWFyY2ggcGFydGljaXBhbnQ8L2E+CiAgICA8L3A+CiAgPC9kaXY+CjwvZGl2PgogIAoKCiAgICA8ZGl2IGlkPSJnbG9iYWwtaGVhZGVyLWJhciI+PC9kaXY+CgogICAgCiAgCiAgPGRpdiBpZD0id3JhcHBlciI+CiAgICAKICAgICAgCjxkaXYgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzIj4KICA8b2wgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saXN0Ij4KICAKICAgIAogICAgPGxpIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGlzdC1pdGVtIj4KICAgICAgPGEgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saW5rIiBocmVmPSIvIj5EaWdpdGFsIE1hcmtldHBsYWNlPC9hPgogICAgPC9saT4KICAgIAogIAogICAgCiAgICA8bGkgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saXN0LWl0ZW0iPgogICAgICA8YSBjbGFzcz0iZ292dWstYnJlYWRjcnVtYnNfX2xpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzIj5TdXBwbGllciBvcHBvcnR1bml0aWVzPC9hPgogICAgPC9saT4KICAgIAogIAogIDwvb2w+CjwvZGl2PgoKICAgIAogICAgPG1haW4gaWQ9ImNvbnRlbnQiIHJvbGU9Im1haW4iPgogICAgICAKICAKCiAgICAgIAoKCgo8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uLXR3by10aGlyZHMiPgogICAgPHNwYW4gY2xhc3M9ImdvdnVrLWNhcHRpb24tbCI+TGluY29sbnNoaXJlIFBhcnRuZXJzaGlwIE5IUyBGb3VuZGF0aW9uIFRydXN0PC9zcGFuPgogICAgPGgxIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLWwiPk9uZS10by1vbmUgaW50ZXJuZXQtZW5hYmxlZCBDQlQgKGhpZ2ggaW50ZW5zaXR5IGFuZCBsb3cgaW50ZW5zaXR5KTwvaDE+CiAgICA8c3BhbiBkYXRhLWxvdD0iZGlnaXRhbC1vdXRjb21lcyI+PC9zcGFuPgogIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9ImdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJjb2x1bW4tb25lLXdob2xlIj4KICAgIAoKPGRpdiBjbGFzcz0ic3RhdGlzdGljLWNvbnRhaW5lciIgaWQ9ImluY29tcGxldGUtYXBwbGljYXRpb25zIj4KICAgIDxoMyBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5JbmNvbXBsZXRlIGFwcGxpY2F0aW9uczwvaDM+CiAgICA8ZGl2IGNsYXNzPSJiaWctc3RhdGlzdGljIj4zPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJzdGF0aXN0aWMtbmFtZSI+SW5jb21wbGV0ZSBhcHBsaWNhdGlvbnM8L2Rpdj4KICAgIAogICAgICA8ZGl2IGNsYXNzPSJzdGF0aXN0aWMtZGVzY3JpcHRpb24iPjIgU01FLCAxIGxhcmdlPC9kaXY+CiAgICAKICA8L2Rpdj4KPGRpdiBjbGFzcz0ic3RhdGlzdGljLWNvbnRhaW5lciIgaWQ9ImNvbXBsZXRlZC1hcHBsaWNhdGlvbnMiPgogICAgPGgzIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPkNvbXBsZXRlZCBhcHBsaWNhdGlvbnM8L2gzPgogICAgPGRpdiBjbGFzcz0iYmlnLXN0YXRpc3RpYyI+MjwvZGl2PgogICAgPGRpdiBjbGFzcz0ic3RhdGlzdGljLW5hbWUiPkNvbXBsZXRlZCBhcHBsaWNhdGlvbnM8L2Rpdj4KICAgIAogICAgICA8ZGl2IGNsYXNzPSJzdGF0aXN0aWMtZGVzY3JpcHRpb24iPjIgU01FLCAwIGxhcmdlPC9kaXY+CiAgICAKICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uLW9uZS13aG9sZSI+CiAgICAKCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIEltcG9ydGFudCBkYXRlcwogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPlB1Ymxpc2hlZDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPldlZG5lc2RheSAxMSBEZWNlbWJlciAyMDE5PC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5EZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9uczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPldlZG5lc2RheSAxOCBEZWNlbWJlciAyMDE5IGF0IDExOjU5cG0gR01UPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5DbG9zaW5nIGRhdGUgZm9yIGFwcGxpY2F0aW9uczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPldlZG5lc2RheSAyNSBEZWNlbWJlciAyMDE5IGF0IDExOjU5cG0gR01UPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogICAgPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtMSI+CiAgICAgIAogICAgICBPdmVydmlldwogIDwvaDI+CiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgT3ZlcnZpZXcKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPlN1bW1hcnkgb2YgdGhlIHdvcms8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlByb3Bvc2FscyB0byBwcm92aWRlIG9uZS10by1vbmUgaW50ZXJuZXQtZW5hYmxlZCBDQlQgKGhpZ2ggaW50ZW5zaXR5IGFuZCBsb3cgaW50ZW5zaXR5KSB0byB0aG9zZSBleHBlcmllbmNpbmcgY29tbW9uIG1lbnRhbCBoZWFsdGggcHJvYmxlbXMsIHN1Y2ggYXMgYW54aWV0eSBhbmQgZGVwcmVzc2lvbiwgb25saW5lIGJ5IEJBQkNQIGFjY3JlZGl0ZWQgdGhlcmFwaXN0cyBmb2xsb3dpbmcgTklDRSBndWlkZWxpbmVzLjxicj5BcHBvaW50bWVudHMgd2lsbCBiZSByZXF1aXJlZCBvbiB3ZWVrZGF5cy93ZWVrZW5kcyBhbmQgaW5jbHVkZSBlYXJseSBhbmQgbGF0ZSBhcHBvaW50bWVudHMuIFRoaXMgc2hvdWxkIGJlIGFjY2Vzc2libGUgdmlhIHdlYiBicm93c2VyPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+TGF0ZXN0IHN0YXJ0IGRhdGU8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk1vbmRheSA2IEphbnVhcnkgMjAyMDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkV4cGVjdGVkIGNvbnRyYWN0IGxlbmd0aDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VHdvIHllYXJzPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+TG9jYXRpb248L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+RWFzdCBNaWRsYW5kczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPk9yZ2FuaXNhdGlvbiB0aGUgd29yayBpcyBmb3I8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkxpbmNvbG5zaGlyZSBQYXJ0bmVyc2hpcCBOSFMgRm91bmRhdGlvbiBUcnVzdDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkJ1ZGdldCByYW5nZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+UHJvamVjdCBmdW5kaW5nIHdpbGwgYmUgZGlzY3Vzc2VkIGFmdGVyIGF3YXJkLiAgVGhlIHNlcnZpY2UgY3VycmVudGx5IHJlcXVpcmVzIDIwMCBMb3cgSW50ZW5zaXR5IHRyZWF0bWVudHMgdG8gYmVnaW4gaW4gSmFudWFyeSAyMDIwLiAgRnVydGhlciBmdW5kaW5nIG1heSBiZSBtYWRlIGF2YWlsYWJsZSBhcyByZXF1aXJlZC48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTIiPgogICAgICAKICAgICAgQWJvdXQgdGhlIHdvcmsKICA8L2gyPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIEFib3V0IHRoZSB3b3JrCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5XaHkgdGhlIHdvcmsgaXMgYmVpbmcgZG9uZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+Q0JUIGlzIGFuIG9ubGluZSwgdHlwZWQtdGhlcmFweSBtb2RhbGl0eSBwcm92aWRpbmcgIGFjY2Vzc2libGUgQ0JUIGZvciBwYXRpZW50cyB3aG8gbWF5IGVuY291bnRlciBkaWZmaWN1bHRpZXMgaW4gYWNjZXNzaW5nIHRyYWRpdGlvbmFsIHNlcnZpY2VzLCAgIEVtYmVkZGluZyBpbnRlcm5ldCBlbmFibGVkIENCVCB3aXRoaW4gZXhpc3Rpbmcgc2VydmljZSBzdHJ1Y3R1cmVzIGNhbiBzaWduaWZpY2FudGx5IGJvb3N0IGJvdGggYWNjZXNzIGFuZCBjYXBhY2l0eS48YnI+PGJyPlRoZSByZXF1aXJlbWVudCBpcyBmb3IgYW4gJiMzNDtvZmYgdGhlIHNoZWxmJiMzNDsgZXhpc3RpbmcsIHByb3ZlbiBzb2x1dGlvbi48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Qcm9ibGVtIHRvIGJlIHNvbHZlZDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+QWNyb3NzIHRoZSBMaW5jb2xuc2hpcmUgUGFydG5lcnNoaXAgTkhTIEZvdW5kYXRpb24gVHJ1c3Qgc2VydmljZSwgdGhlcmUgYXJlIGNvbnNpZGVyYWJsZSBwcmVzc3VyZXMgdG8gZGVsaXZlciBhcHByb3ByaWF0ZSBjYXJlIHRvIHBhdGllbnRzIGluIHRoZSBjb250ZXh0IG9mIGluY3JlYXNpbmcgbmF0aW9uYWwgSUFQVCBhY2Nlc3MgdGFyZ2V0cyBhbmQgbWFpbnRhaW5pbmcgdGhlIHN0YW5kYXJkcyBmb3Igd2FpdGluZyB0aW1lcyBhbmQgcmVjb3ZlcnkuIFRoZXNlIHByZXNzdXJlcyBpbmNsdWRlOjxicj7igKIJdGhlcmFwaXN0IGNhcGFjaXR5IGFuZCBhdmFpbGFiaWxpdHksPGJyPuKAoglwYXRpZW50IGRlbWFuZCBhY3Jvc3Mgd2hvbGUgb2YgdGhlIExpbmNvbG5zaGlyZSBDb3VudHk8YnI+4oCiCWRlbWFuZHMgZm9yIHNlcnZpY2UgYWNjZXNzIG91dHNpZGUgY29yZSBjbGluaWNhbCBob3Vycy48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5XaG8gdGhlIHVzZXJzIGFyZSBhbmQgd2hhdCB0aGV5IG5lZWQgdG8gZG88L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkNCVCBpcyBhbiBvbmxpbmUsIHR5cGVkLXRoZXJhcHkgc2VydmljZSBwcm92aWRpbmcgZWFzaWx5IGFjY2Vzc2libGUgZXZpZGVuY2VkLWJhc2VkIENCVCBmb3IgdGhvc2Ugd2hvIG1heSBlbmNvdW50ZXIgYSByYW5nZSBvZiBiYXJyaWVycyB0byBhY2Nlc3NpbmcgdHJhZGl0aW9uYWwgc2VydmljZXMsIGZvciBleGFtcGxlIGR1ZSB0byBnZW9ncmFwaHksIHBvdmVydHkgb2YgdGltZSwgcGh5c2ljYWwgZGlmZmljdWx0aWVzIG9yIHBlcnNvbmFsIGJvdW5kYXJpZXMuIEVtYmVkZGluZyBpLmUuIENCVCB3aXRoaW4gZXhpc3Rpbmcgc2VydmljZSBzdHJ1Y3R1cmVzIGNhbiBzaWduaWZpY2FudGx5IGJvb3N0IGJvdGggYWNjZXNzIGFuZCBjYXBhY2l0eS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5FYXJseSBtYXJrZXQgZW5nYWdlbWVudDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VGhlIFRydXN0IGhhcyBiZWVuIGVuZ2FnaW5nIHdpdGggdGhlIG1hcmtldCBvdmVyIGEgbnVtYmVyIG9mIHllYXJzIHRvIGRldmVsb3AgYW5kIHJlZmluZSBhIHNlcnZpY2Ugb2ZmZXIgc3VpdGFibGUgZm9yIHRoZSBuZWVkcyBvZiBMaW5jb2xuc2hpcmUgcmVzaWRlbnRzLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFueSB3b3JrIHRoYXTigJlzIGFscmVhZHkgYmVlbiBkb25lPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5UaGUgc2VydmljZSBoYXMgYSB0cmFjayByZWNvcmQgb2YgdXNpbmcgYW4gaW50ZXJuZXQgZW5hYmxlZCBDQlQgcHJvdmlkZXIgaW4gdGhlIHBhc3QuIFRoaXMgcHJvdmlkZXIgaGFzIGJlZW4gdXNlZCBmb3IgYSBudW1iZXIgb2YgeWVhcnMgd29ya2luZyB3aXRoIHRoZSBUcnVzdCB0byByZWZpbmUgdGhlIHNlcnZpY2Ugb2ZmZXIuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RXhpc3RpbmcgdGVhbTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+c3RlcHMyY2hhbmdlIGlzIGFuIElBUFQgc2VydmljZSB3aGljaCBkZWxpdmVycyBldmlkZW5jZS1iYXNlZCwgTklDRSBhcHByb3ZlZCwgcHN5Y2hvbG9naWNhbCBpbnRlcnZlbnRpb25zIHRvIHBhdGllbnRzIHN1ZmZlcmluZyBmcm9tIGNvbW1vbiBtZW50YWwgaGVhbHRoIGRpZmZpY3VsdGllcywgc3VjaCBhcyBhbnhpZXR5IG9yIGRlcHJlc3Npb24uIFN0ZXBzMmNoYW5nZSBpcyB0aGUgc29sZSBJQVBUIHByb3ZpZGVyIGZvciBMaW5jb2xuc2hpcmUuPGJyPlRoZSBzZXJ2aWNlIHByb3ZpZGVycyBjb3Vuc2VsbGluZywgQ0JULCBMb3cgSW50ZW5zaXR5IGludGVydmVudGlvbnMsIEVNRFIgYW5kIGEgbnVtYmVyIG9mIG90aGVyIG5vbi1DQlQgbW9kYWxpdGllcy4gVGhlIHNlcnZpY2UgcHJvdmlkZXMgc2hvcnQtdGVybSBpbnRlcnZlbnRpb25zIGFuZCBtYW5hZ2VzIGEgaGlnaCB2b2x1bWUgb2YgcmVmZXJyYWxzLiBUaGUgc2VydmljZSBpcyBjdXJyZW50bHkgZXhwYW5kaW5nIGFnYWluc3QgbmF0aW9uYWxseSBtYW5kYXRlZCB0cmFqZWN0b3JpZXMuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+Q3VycmVudCBwaGFzZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5Ob3QgYXBwbGljYWJsZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogICAgPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtMyI+CiAgICAgIAogICAgICBXb3JrIHNldHVwCiAgPC9oMj4KICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBXb3JrIHNldHVwCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5BZGRyZXNzIHdoZXJlIHRoZSB3b3JrIHdpbGwgdGFrZSBwbGFjZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VGhlIHN1cHBsaWVyIHdpbGwgd29yayByZW1vdGVseSB1c2luZyB0aGVpciBkaWdpdGFsIHNvbHV0aW9uLiBUaGUgVHJ1c3Qgd2lsbCByZXF1aXJlIHJlZ3VsYXIgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSBidXllci4gIFRyZWF0bWVudHMgd2lsbCBiZSBkZWxpdmVyZWQgcmVtb3RlbHkgYWNyb3NzIExpbmNvbG5zaGlyZS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Xb3JraW5nIGFycmFuZ2VtZW50czwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VGhlIHByb3ZpZGVyIHNoYWxsIGRlbGl2ZXIgQ0JUIG92ZXIgdGhlIGludGVybmV0LCBlbmFibGluZyB0aGUgcGF0aWVudCB0byAgc2VlIHRoZWlyIHRoZXJhcGlzdCBmcm9tIHdoZXJldmVyIHRoZXkgY2hvb3NlLiBPbmxpbmUgQ0JUIGlzIGRlbGl2ZXJlZCBzZWN1cmVseSB0aHJvdWdoIGFuIG9ubGluZSB0aGVyYXB5IHBsYXRmb3JtLiBBdCB0aGUgdGltZSBvZiBhcHBvaW50bWVudCwgcGF0aWVudHMgc2ltcGx5IGxvZyBpbiBhbmQgc3BlYWsgdG8gdGhlaXIgdGhlcmFwaXN0IHRocm91Z2ggdHlwaW5nLiBUeXBlZCBjb252ZXJzYXRpb24gcmVtb3ZlcyB0aGUgcHJlc3N1cmUgb2YgaGF2aW5nIGEgZmFjZS10by1mYWNlIGNvbnZlcnNhdGlvbiwgYW5kIGNhbiBhbGxvdyBleHByZXNzaW9uIG9mIHRydWUgaW5uZXIgZmVlbGluZ3MuIFNlc3Npb25zIHVzdWFsbHkgdGFrZSBwbGFjZSBvbmNlIGEgd2VlayBhbmQgbGFzdCB1cCB0byBvbmUgaG91ci48YnI+VGhlIHN1cHBsaWVyIHdpbGwgd29yayByZW1vdGVseSB0byBhY2hpZXZlIHRoZSBzZXJ2aWNlIGRlbGl2ZXJ5LiBNb250aGx5IGNvbnRyYWN0IG1lZXRpbmdzIHdpbGwgcmV2aWV3IEtQSSYjMzk7cyBhbmQgYWRoZXJlbmNlIHRvIHRoZSBjb250cmFjdC48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5TZWN1cml0eSBjbGVhcmFuY2U8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkNSQiwgQWRoZXJlbmNlIHRvIElHIGFuZCBHRFBSLCBDb25maWRlbnRpYWxpdHk8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTQiPgogICAgICAKICAgICAgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgogIDwvaDI+CiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+QWRkaXRpb25hbCB0ZXJtcyBhbmQgY29uZGl0aW9uczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTUiPgogICAgICAKICAgICAgU2tpbGxzIGFuZCBleHBlcmllbmNlCiAgPC9oMj4KICAgICAKICAgICAgICA8cD48cCBjbGFzcz0ic3VtbWFyeS1pdGVtLWRlc2NyaXB0aW9uIj4KICAgIEJ1eWVycyB3aWxsIHVzZSB0aGUgZXNzZW50aWFsIGFuZCBuaWNlLXRvLWhhdmUgc2tpbGxzIGFuZCBleHBlcmllbmNlIHRvIGhlbHAgdGhlbSBldmFsdWF0ZSBzdXBwbGllcnPigJkgdGVjaG5pY2FsIGNvbXBldGVuY2UuCiAgPC9wPjwvcD4KICAgICAKICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBTa2lsbHMgYW5kIGV4cGVyaWVuY2UKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkVzc2VudGlhbCBza2lsbHMgYW5kIGV4cGVyaWVuY2U8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+PHVsPgogICAgCiAgICAgIDxsaT5Qcm92ZW4gZXhwZXJpZW5jZSBvZiBwcm92aWRpbmcgaW50ZXJuZXQgZW5hYmxlZCBDQlQ8L2xpPgogICAgCiAgICAgIDxsaT5FdmlkZW5jZSBpbm5vdmF0aW9uIGNobmdpbmcgcHJvZHVjdHMgdG8gbWVldCB0aGUgbmVlZHMgb2Ygc2VydmljZSB1c2Vycy48L2xpPgogICAgCiAgICAgIDxsaT5FeHBlcmllbmNlIG9mIHdvcmtpbmcgd2l0aCBOSFMgcHJvdmlkZXJzPC9saT4KICAgIAogIDwvdWw+CiAgPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+TmljZS10by1oYXZlIHNraWxscyBhbmQgZXhwZXJpZW5jZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogICAgPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtNiI+CiAgICAgIAogICAgICBIb3cgc3VwcGxpZXJzIHdpbGwgYmUgZXZhbHVhdGVkCiAgPC9oMj4KICAgICAKICAgICAgICA8cD5BbGwgc3VwcGxpZXJzIHdpbGwgYmUgYXNrZWQgdG8gcHJvdmlkZSBhIHdyaXR0ZW4gcHJvcG9zYWwuPC9wPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIEhvdyBzdXBwbGllcnMgd2lsbCBiZSBldmFsdWF0ZWQKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkhvdyBtYW55IHN1cHBsaWVycyB0byBldmFsdWF0ZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+Mzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPlByb3Bvc2FsIGNyaXRlcmlhPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjx1bD4KICAgIAogICAgICA8bGk+SG93IHRoZSBhcHByb2FjaCBvciBzb2x1dGlvbiBtZWV0cyB1c2VyIG5lZWRzPC9saT4KICAgIAogICAgICA8bGk+VmFsdWUgZm9yIG1vbmV5PC9saT4KICAgIAogICAgICA8bGk+RXN0aW1hdGVkIHRpbWVmcmFtZXMgZm9yIHRoZSB3b3JrPC9saT4KICAgIAogIDwvdWw+CiAgPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+Q3VsdHVyYWwgZml0IGNyaXRlcmlhPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjx1bD4KICAgIAogICAgICA8bGk+V29yayBhcyBhIHRlYW0gd2l0aCBvdXIgb3JnYW5pc2F0aW9uIGFuZCBvdGhlciBzdXBwbGllcnM8L2xpPgogICAgCiAgICAgIDxsaT5UYWtlIHJlc3BvbnNpYmlsaXR5IGZvciB0aGVpciB3b3JrPC9saT4KICAgIAogICAgICA8bGk+QmUgdHJhbnNwYXJlbnQgYW5kIGNvbGxhYm9yYXRpdmUgd2hlbiBtYWtpbmcgZGVjaXNpb25zPC9saT4KICAgIAogIDwvdWw+CiAgPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+UGF5bWVudCBhcHByb2FjaDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5GaXhlZCBwcmljZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFkZGl0aW9uYWwgYXNzZXNzbWVudCBtZXRob2RzPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjx1bD4KICAgIAogICAgICA8bGk+V29yayBoaXN0b3J5PC9saT4KICAgIAogICAgICA8bGk+UmVmZXJlbmNlPC9saT4KICAgIAogIDwvdWw+CiAgPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RXZhbHVhdGlvbiB3ZWlnaHRpbmc8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPgogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9Im11bHRpcXVlc3Rpb24iPgogICAgICAgICAgPHA+VGVjaG5pY2FsIGNvbXBldGVuY2U8L3A+CiAgICAgICAgICA8ZGl2PjQwJTwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJtdWx0aXF1ZXN0aW9uIj4KICAgICAgICAgIDxwPkN1bHR1cmFsIGZpdDwvcD4KICAgICAgICAgIDxkaXY+MjAlPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIAogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9Im11bHRpcXVlc3Rpb24iPgogICAgICAgICAgPHA+UHJpY2U8L3A+CiAgICAgICAgICA8ZGl2PjQwJTwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJjb2x1bW4tb25lLXdob2xlIj4KICAgIAoKCgo8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0iY2xhcmlmaWNhdGlvbi1xdWVzdGlvbnMiPgogICAgICAKICAgICAgUXVlc3Rpb25zIGFza2VkIGJ5IHN1cHBsaWVycwogIDwvaDI+CgogICAgPHAgY2xhc3M9InN1bW1hcnktaXRlbS1uby1jb250ZW50Ij4KICAgICAgTm8gcXVlc3Rpb25zIGhhdmUgYmVlbiBhbnN3ZXJlZCB5ZXQKICAgIDwvcD4KICAKCgogIFRoZSBkZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9ucyBhYm91dCB0aGlzIG9wcG9ydHVuaXR5IHdhcyBXZWRuZXNkYXkgMTggRGVjZW1iZXIgMjAxOS4KCiAgPC9kaXY+CjwvZGl2PgoKCiAgPGJyLz48IS0tIDwtIHJlbW92ZSBvbmNlIGdyaWQgYW5kIGJvZHkgZWxlbWVudHMgaGF2ZSBiZWVuIGNvbnZlcnRlZCB0byBnb3Z1ayBmcm9udGVuZCAtLT4KICA8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2x1bW4tdHdvLXRoaXJkcyI+CiAgICAgIDxmb3JtIGFjdGlvbj0iL3N1cHBsaWVycy9vcHBvcnR1bml0aWVzLzExMzk4L3Jlc3BvbnNlcy9zdGFydCIgbWV0aG9kPSJnZXQiPgogICAgICAgIAogIAogICAgCiAgCgo8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImdvdnVrLWJ1dHRvbiI+CiAgQXBwbHkgZm9yIHRoaXMgb3Bwb3J0dW5pdHkKPC9idXR0b24+CiAgICAgIDwvZm9ybT4KICAgIDwvZGl2PgogIDwvZGl2PgoKCgogICAgPC9tYWluPgogIDwvZGl2PgoKCiAgICA8Zm9vdGVyIGNsYXNzPSJncm91cCBqcy1mb290ZXIiIGlkPSJmb290ZXIiIHJvbGU9ImNvbnRlbnRpbmZvIj4KCiAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci13cmFwcGVyIj4KICAgICAgICAKICA8ZGl2IGNsYXNzPSJmb290ZXItY2F0ZWdvcmllcyI+CiAgPGRpdiBjbGFzcz0iZm9vdGVyLWFib3V0Ij4KICAgIDxoMj4KICAgICAgQWJvdXQgdGhlIERpZ2l0YWwgTWFya2V0cGxhY2UKICAgIDwvaDI+CiAgICA8dWw+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIvaGVscCI+Q29udGFjdDwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW1hcmtldHBsYWNlLWJ1eWVycy1ndWlkZSI+U2VydmljZXMgeW91IGNhbiBidXk8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1tYXJrZXRwbGFjZS1zdXBwbGllcnMtZ3VpZGUiPlNlcnZpY2VzIHlvdSBjYW4gc2VsbDwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9nb3Zlcm5tZW50L29yZ2FuaXNhdGlvbnMvY3Jvd24tY29tbWVyY2lhbC1zZXJ2aWNlIj5BYm91dCBDcm93biBDb21tZXJjaWFsIFNlcnZpY2U8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2dvdmVybm1lbnQtZGlnaXRhbC1zZXJ2aWNlIj5BYm91dCBHb3Zlcm5tZW50IERpZ2l0YWwgU2VydmljZTwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Ii9nLWNsb3VkL3N1cHBsaWVycyI+Ry1DbG91ZCBzdXBwbGllciBB4oCTWjwvYT4KICAgICAgPC9saT4KICAgIDwvdWw+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0iZm9vdGVyLWd1aWRhbmNlIj4KICAgIDxoMj4KICAgICAgICBHdWlkYW5jZSBmb3IgdXNpbmcgRGlnaXRhbCBNYXJrZXRwbGFjZQogICAgPC9oMj4KICAgIDx1bD4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9nLWNsb3VkLXN1cHBsaWVycy1ndWlkZSI+QXBwbHlpbmcgdG8gc2VsbCBvbiB0aGUgRy1DbG91ZCBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtc3VwcGxpZXJzLWd1aWRlIj5BcHBseWluZyB0byBzZWxsIG9uIHRoZSBET1MgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2hvdy10by1zZWxsLXlvdXItZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtc2VydmljZXMiPlJlc3BvbmRpbmcgdG8gYnV5ZXIgcmVxdWlyZW1lbnRzIG9uIHRoZSBET1MgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2ctY2xvdWQtYnV5ZXJzLWd1aWRlIj5CdXlpbmcgb24gdGhlIEctQ2xvdWQgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzLWJ1eWVycy1ndWlkZSI+QnV5aW5nIG9uIHRoZSBET1MgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL3RoZS1jcm93bi1ob3N0aW5nLWRhdGEtY2VudHJlcy1mcmFtZXdvcmstb24tdGhlLWRpZ2l0YWwtbWFya2V0cGxhY2UiPkJ1eWluZyBvbiB0aGUgQ3Jvd24gSG9zdGluZyBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICA8L3VsPgogIDwvZGl2PgogIDxoci8+CjwvZGl2PgoKCiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLW1ldGEiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLW1ldGEtaW5uZXIiPgogICAgICAgICAgICAKICA8aDIgY2xhc3M9InZpc3VhbGx5aGlkZGVuIj4KICBTdXBwb3J0IGxpbmtzCjwvaDI+Cgo8dWw+CiAgPGxpPjxhIGhyZWY9Ii90ZXJtcy1hbmQtY29uZGl0aW9ucyIgY2xhc3M9InRlcm1zLWFuZC1jb25kaXRpb25zIj5UZXJtcyBhbmQgY29uZGl0aW9uczwvYT48L2xpPgogIDxsaT48YSBocmVmPSIvY29va2llcyI+Q29va2llczwvYT48L2xpPgogIDxsaT48YSBocmVmPSIvcHJpdmFjeS1ub3RpY2UiPlByaXZhY3kgbm90aWNlPC9hPjwvbGk+CjwvdWw+Cgo8cD4KICBCdWlsdCBieSB0aGUgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9nb3Zlcm5tZW50LWRpZ2l0YWwtc2VydmljZSI+R292ZXJubWVudCBEaWdpdGFsIFNlcnZpY2U8L2E+CjwvcD4KCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvcGVuLWdvdmVybm1lbnQtbGljZW5jZSI+CiAgICAgICAgICAgICAgPHAgY2xhc3M9ImxvZ28iPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm5hdGlvbmFsYXJjaGl2ZXMuZ292LnVrL2RvYy9vcGVuLWdvdmVybm1lbnQtbGljZW5jZS92ZXJzaW9uLzMvIiByZWw9ImxpY2Vuc2UiPk9wZW4gR292ZXJubWVudCBMaWNlbmNlPC9hPjwvcD4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxwPkFsbCBjb250ZW50IGlzIGF2YWlsYWJsZSB1bmRlciB0aGUgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmF0aW9uYWxhcmNoaXZlcy5nb3YudWsvZG9jL29wZW4tZ292ZXJubWVudC1saWNlbmNlL3ZlcnNpb24vMy8iIHJlbD0ibGljZW5zZSI+T3BlbiBHb3Zlcm5tZW50IExpY2VuY2UgdjMuMDwvYT4sIGV4Y2VwdCB3aGVyZSBvdGhlcndpc2Ugc3RhdGVkPC9wPgogICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvcHlyaWdodCI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubmF0aW9uYWxhcmNoaXZlcy5nb3YudWsvaW5mb3JtYXRpb24tbWFuYWdlbWVudC9yZS11c2luZy1wdWJsaWMtc2VjdG9yLWluZm9ybWF0aW9uL2NvcHlyaWdodC1hbmQtcmUtdXNlL2Nyb3duLWNvcHlyaWdodC8iPiZjb3B5OyBDcm93biBjb3B5cmlnaHQ8L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Zvb3Rlcj4KCiAgICA8ZGl2IGlkPSJnbG9iYWwtYXBwLWVycm9yIiBjbGFzcz0iYXBwLWVycm9yIGhpZGRlbiI+PC9kaXY+CgogICAgPHNjcmlwdCBzcmM9Ii9zdGF0aWMvamF2YXNjcmlwdHMvZ292dWstdGVtcGxhdGUuanM/MC4xOS4yIj48L3NjcmlwdD4KCiAgICAKICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc3RhdGljL2phdmFzY3JpcHRzL2FwcGxpY2F0aW9uLmpzP2NlYjAwMTM2YjAxNGEzOGJlNzk4YWQ0YWE2ZTc3YjM3Ij48L3NjcmlwdD4KICAKCgogICAgCiAgICA8c2NyaXB0PmlmICh0eXBlb2Ygd2luZG93LkdPVlVLID09PSAndW5kZWZpbmVkJykgZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZS5yZXBsYWNlKCdqcy1lbmFibGVkJywgJycpOzwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPg==
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:02 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11073
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2og.FUj7SIPCcBb3NSHqeePFlCoi2h4
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '53182'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:02 GMT
      Dm-Request-Id:
      - 406c936d1b76f271
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:02 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2og.FUj7SIPCcBb3NSHqeePFlCoi2h4;
        Expires=Tue, 24-Dec-2019 15:48:02 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 406c936d1b76f271
      X-B3-Traceid:
      - 406c936d1b76f271
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 9bcbc3f6-198b-4db6-7fe1-84e8a3d5c4be
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 bb501579906725a97059c817430425cf.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - 3S-moRX2pRvCDkvulyOeJy8Yh4ttFjgbrU5nLFSIVy2OA9OmfX3VIg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPCEtLVtpZiBsdCBJRSA5XT48aHRtbCBjbGFzcz0ibHRlLWllOCIgbGFuZz0iZW4iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIGd0IElFIDhdPjwhLS0+PGh0bWwgbGFuZz0iZW4iPjwhLS08IVtlbmRpZl0tLT4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPgogICAgPHRpdGxlPgogIEhlYWx0aCBFZHVjYXRpb24gRW5nbGFuZCBUcmFpbmluZyAmYW1wOyBSZWNydWl0bWVudCBIdWIgQWxwaGEgLSBEaWdpdGFsIE1hcmtldHBsYWNlCjwvdGl0bGU+CgogICAgPCEtLVtpZiBndCBJRSA4XT48IS0tPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUuY3NzPzAuMTkuMiIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhLS08IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgSUUgNl0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS1pZTYuY3NzPzAuMTkuMiIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBJRSA3XT48bGluayBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2dvdnVrLXRlbXBsYXRlLWllNy5jc3M/MC4xOS4yIiBtZWRpYT0ic2NyZWVuIiByZWw9InN0eWxlc2hlZXQiIC8+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIElFIDhdPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUtaWU4LmNzcz8wLjE5LjIiIG1lZGlhPSJzY3JlZW4iIHJlbD0ic3R5bGVzaGVldCIgLz48IVtlbmRpZl0tLT4KICAgIDxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUtcHJpbnQuY3NzPzAuMTkuMiIgbWVkaWE9InByaW50IiByZWw9InN0eWxlc2hlZXQiIC8+CgogICAgPCEtLVtpZiBJRSA4XT48bGluayBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2ZvbnRzLWllOC5jc3M/MC4xOS4yIiBtZWRpYT0iYWxsIiByZWw9InN0eWxlc2hlZXQiIC8+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIGd0ZSBJRSA5XT48IS0tPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZm9udHMuY3NzPzAuMTkuMiIgbWVkaWE9ImFsbCIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhLS08IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgbHQgSUUgOV0+PHNjcmlwdCBzcmM9Ii9zdGF0aWMvamF2YXNjcmlwdHMvaWUuanM/MC4xOS4yIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KCiAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2Zhdmljb24uaWNvPzAuMTkuMiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPgogICAgPGxpbmsgcmVsPSJtYXNrLWljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdi51a19sb2dvdHlwZV9jcm93bi5zdmc/MC4xOS4yIiBjb2xvcj0iIzBiMGMwYyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSIxNTJ4MTUyIiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTE1MngxNTIucG5nPzAuMTkuMiI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSIxMjB4MTIwIiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTEyMHgxMjAucG5nPzAuMTkuMiI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSI3Nng3NiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvYXBwbGUtdG91Y2gtaWNvbi03Nng3Ni5wbmc/MC4xOS4yIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvYXBwbGUtdG91Y2gtaWNvbi02MHg2MC5wbmc/MC4xOS4yIj4KCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSIvc3RhdGljL2ltYWdlcy9vcGVuZ3JhcGgtaW1hZ2UucG5nPzAuMTkuMiI+CgogICAgCiAgCgoKCgoKCgogIDxtZXRhIG5hbWU9ImdhX2N1c3RvbURpbWVuc2lvbiIgZGF0YS1pZD0iMTIiIGRhdGEtdmFsdWU9IlVzZXIgcmVzZWFyY2ggYmFubmVyIj4KCgoKCgogIDwhLS1baWYgZ3QgSUUgOF0+PCEtLT4KICA8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBtZWRpYT0ic2NyZWVuIiBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2FwcGxpY2F0aW9uLmNzcz8wMmMyM2E4YzVmOGUyZGVjYjkwMmY0YzZiYjQ2ODE2MCIgLz4KPCEtLTwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDddPgogIDxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIG1lZGlhPSJzY3JlZW4iIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvYXBwbGljYXRpb24taWU3LmNzcz9mYmQ1OTRmYmQxOWQ4YzQ0ZjdmYzQ1Mzk2OGI4YzgzMCIgLz4KPCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOF0+CiAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgbWVkaWE9InNjcmVlbiIgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9hcHBsaWNhdGlvbi1pZTguY3NzPzY1ZDNhNGZhOGRiODI3ZTc0MzBlNDNhODdlZjBjZTNjIiAvPgo8IVtlbmRpZl0tLT4KICAKICAgIDxtZXRhIG5hbWU9Imdvb2dsZS1zaXRlLXZlcmlmaWNhdGlvbiIgY29udGVudD0iVEtHU0dabmZIcHgxLWxLT3RoSTE3QU50d2s3ZnozRjRTYnI3N0kwcHBPMCIgLz4KCgogIDwvaGVhZD4KCiAgPGJvZHkgY2xhc3M9IiI+CiAgICA8c2NyaXB0PmRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gKChkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSkgPyBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSArICcganMtZW5hYmxlZCcgOiAnanMtZW5hYmxlZCcpOzwvc2NyaXB0PgoKICAgIAoKICAgIDxkaXYgaWQ9InNraXBsaW5rLWNvbnRhaW5lciI+CiAgICAgIDxkaXY+CiAgICAgICAgPGEgaHJlZj0iI2NvbnRlbnQiIGNsYXNzPSJza2lwbGluayI+U2tpcCB0byBtYWluIGNvbnRlbnQ8L2E+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBpZD0iZ2xvYmFsLWNvb2tpZS1tZXNzYWdlIj4KICAgICAgCiAgICAgICAgCiAgPHA+R09WLlVLIHVzZXMgY29va2llcyB0byBtYWtlIHRoZSBzaXRlIHNpbXBsZXIuIDxhIGhyZWY9Ii9jb29raWVzIj5GaW5kIG91dCBtb3JlIGFib3V0IGNvb2tpZXM8L2E+PC9wPgoKCiAgICAgIAogICAgPC9kaXY+CgogICAgCiAgICA8aGVhZGVyIHJvbGU9ImJhbm5lciIgaWQ9Imdsb2JhbC1oZWFkZXIiIGNsYXNzPSJ3aXRoLXByb3Bvc2l0aW9uIj4KICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1nbG9iYWwiPgogICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLWxvZ28iPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsiIHRpdGxlPSJHbyB0byB0aGUgR09WLlVLIGhvbWVwYWdlIiBpZD0ibG9nbyIgY2xhc3M9ImNvbnRlbnQiPgogICAgICAgICAgICAgIDxpbWcgc3JjPSIvc3RhdGljL2ltYWdlcy9nb3YudWtfbG9nb3R5cGVfY3Jvd25faW52ZXJ0X3RyYW5zLnBuZz8wLjE5LjIiIHdpZHRoPSIzNiIgaGVpZ2h0PSIzMiIgYWx0PSIiPiBHT1YuVUsKICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICAKICA8ZGl2IGNsYXNzPSJoZWFkZXItdGl0bGUiPgogICAgPGEgaHJlZj0iLyI+RGlnaXRhbCBNYXJrZXRwbGFjZTwvYT4KICAgIDxzdHJvbmcgY2xhc3M9InBoYXNlLXRhZyI+QkVUQTwvc3Ryb25nPgo8L2Rpdj4KCiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgPGRpdiBjbGFzcz0iaGVhZGVyLXByb3Bvc2l0aW9uIj4KICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgIDxhIGhyZWY9IiNwcm9wb3NpdGlvbi1saW5rcyIgY2xhc3M9ImpzLWhlYWRlci10b2dnbGUgbWVudSI+TWVudTwvYT4KICAgIDxuYXYgaWQ9InByb3Bvc2l0aW9uLW1lbnUiPgogICAgICA8dWwgaWQ9InByb3Bvc2l0aW9uLWxpbmtzIj4KICAgICAgICA8bGk+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvYnV5aW5nLWFuZC1zZWxsaW5nLW9uLXRoZS1kaWdpdGFsLW1hcmtldHBsYWNlIj5HdWlkYW5jZTwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Ii9oZWxwIj5IZWxwPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Ii91c2VyL2xvZ2luIj5Mb2cgaW48L2E+CiAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgPC91bD4KICAgIDwvbmF2PgogIDwvZGl2Pgo8L2Rpdj4KCiAgICAgIDwvZGl2PgogICAgPC9oZWFkZXI+CiAgICAKCiAgICAKICAKICAKICAKCiAgCiAgICA8ZGl2IGNsYXNzPSJ1c2VyLXJlc2VhcmNoLWJhbm5lciI+CiAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICA8cD4KICAgICAgPHN0cm9uZyBjbGFzcz0iYmFubmVyLWhlYWRpbmciPkhlbHAgdXMgaW1wcm92ZSB0aGUgRGlnaXRhbCBNYXJrZXRwbGFjZTwvc3Ryb25nPgogICAgICA8YSAKICAgICAgICBocmVmPSIjIiAKICAgICAgICBjbGFzcz0idXNlci1yZXNlYXJjaC1iYW5uZXItY2xvc2UtYnRuIgogICAgICAgIGRhdGEtYW5hbHl0aWNzPSJ0cmFja0V2ZW50IgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWNhdGVnb3J5PSJ1c2VyLXJlc2VhcmNoIgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iQ2xvc2UgYmFubmVyIgogICAgICA+Q2xvc2U8L2E+CiAgICA8L3A+CiAgICA8cD4KICAgICAgPGEgCiAgICAgICAgaHJlZj0iL3VzZXIvbm90aWZpY2F0aW9ucy91c2VyLXJlc2VhcmNoIgogICAgICAgIGRhdGEtYW5hbHl0aWNzPSJ0cmFja0V2ZW50IgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWNhdGVnb3J5PSJ1c2VyLXJlc2VhcmNoIgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iVmlldyBzaWduIHVwIHRvIHVzZXIgcmVzZWFyY2ggc2NyZWVuIgogICAgICA+U2lnbiB1cCB0byBiZSBhIHBvdGVudGlhbCB1c2VyIHJlc2VhcmNoIHBhcnRpY2lwYW50PC9hPgogICAgPC9wPgogIDwvZGl2Pgo8L2Rpdj4KICAKCgogICAgPGRpdiBpZD0iZ2xvYmFsLWhlYWRlci1iYXIiPjwvZGl2PgoKICAgIAogIAogIDxkaXYgaWQ9IndyYXBwZXIiPgogICAgCiAgICAgIAo8ZGl2IGNsYXNzPSJnb3Z1ay1icmVhZGNydW1icyI+CiAgPG9sIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGlzdCI+CiAgCiAgICAKICAgIDxsaSBjbGFzcz0iZ292dWstYnJlYWRjcnVtYnNfX2xpc3QtaXRlbSI+CiAgICAgIDxhIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGluayIgaHJlZj0iLyI+RGlnaXRhbCBNYXJrZXRwbGFjZTwvYT4KICAgIDwvbGk+CiAgICAKICAKICAgIAogICAgPGxpIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGlzdC1pdGVtIj4KICAgICAgPGEgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcyI+U3VwcGxpZXIgb3Bwb3J0dW5pdGllczwvYT4KICAgIDwvbGk+CiAgICAKICAKICA8L29sPgo8L2Rpdj4KCiAgICAKICAgIDxtYWluIGlkPSJjb250ZW50IiByb2xlPSJtYWluIj4KICAgICAgCiAgCgogICAgICAKCgoKPGRpdiBjbGFzcz0iZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImNvbHVtbi10d28tdGhpcmRzIj4KICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1jYXB0aW9uLWwiPkhlYWx0aCBFZHVjYXRpb24gRW5nbGFuZDwvc3Bhbj4KICAgIDxoMSBjbGFzcz0iZ292dWstaGVhZGluZy1sIj5IZWFsdGggRWR1Y2F0aW9uIEVuZ2xhbmQgVHJhaW5pbmcgJmFtcDsgUmVjcnVpdG1lbnQgSHViIEFscGhhPC9oMT4KICAgIDxzcGFuIGRhdGEtbG90PSJkaWdpdGFsLW91dGNvbWVzIj48L3NwYW4+CiAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0iZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImNvbHVtbi1vbmUtd2hvbGUiPgogICAgCgo8ZGl2IGNsYXNzPSJzdGF0aXN0aWMtY29udGFpbmVyIiBpZD0iaW5jb21wbGV0ZS1hcHBsaWNhdGlvbnMiPgogICAgPGgzIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPkluY29tcGxldGUgYXBwbGljYXRpb25zPC9oMz4KICAgIDxkaXYgY2xhc3M9ImJpZy1zdGF0aXN0aWMiPjE0PC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJzdGF0aXN0aWMtbmFtZSI+SW5jb21wbGV0ZSBhcHBsaWNhdGlvbnM8L2Rpdj4KICAgIAogICAgICA8ZGl2IGNsYXNzPSJzdGF0aXN0aWMtZGVzY3JpcHRpb24iPjExIFNNRSwgMyBsYXJnZTwvZGl2PgogICAgCiAgPC9kaXY+CjxkaXYgY2xhc3M9InN0YXRpc3RpYy1jb250YWluZXIiIGlkPSJjb21wbGV0ZWQtYXBwbGljYXRpb25zIj4KICAgIDxoMyBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5Db21wbGV0ZWQgYXBwbGljYXRpb25zPC9oMz4KICAgIDxkaXYgY2xhc3M9ImJpZy1zdGF0aXN0aWMiPjEwPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJzdGF0aXN0aWMtbmFtZSI+Q29tcGxldGVkIGFwcGxpY2F0aW9uczwvZGl2PgogICAgCiAgICAgIDxkaXYgY2xhc3M9InN0YXRpc3RpYy1kZXNjcmlwdGlvbiI+OCBTTUUsIDIgbGFyZ2U8L2Rpdj4KICAgIAogIDwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9ImdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJjb2x1bW4tb25lLXdob2xlIj4KICAgIAoKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgSW1wb3J0YW50IGRhdGVzCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+UHVibGlzaGVkPC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+V2VkbmVzZGF5IDExIERlY2VtYmVyIDIwMTk8L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkRlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zPC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+V2VkbmVzZGF5IDE4IERlY2VtYmVyIDIwMTkgYXQgMTE6NTlwbSBHTVQ8L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkNsb3NpbmcgZGF0ZSBmb3IgYXBwbGljYXRpb25zPC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+V2VkbmVzZGF5IDI1IERlY2VtYmVyIDIwMTkgYXQgMTE6NTlwbSBHTVQ8L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0xIj4KICAgICAgCiAgICAgIE92ZXJ2aWV3CiAgPC9oMj4KICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBPdmVydmlldwogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+U3VtbWFyeSBvZiB0aGUgd29yazwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+SEVFIG5lZWRzIGEgc3VwcGxpZXIgdG8gd29yayB3aXRoIHRoZW0gdG8gdW5pZnkgMjAwKyBjdXJyZW50IHdlYnNpdGVzIGludG8gYW4gaW50ZWdyYXRlZCBkaWdpdGFsIHNlcnZpY2Ugc3VwcG9ydGluZyB0cmFpbmVlIGhlYWx0aCBwcm9mZXNzaW9uYWxzLiBUaGlzIGNvbnRyYWN0IGlzIHRvIGRlbGl2ZXIgYW4gQWxwaGEgcGhhc2Ugb2YgdGhlIHByb2plY3QgZm9jdXNlZCBvbiBhIFRyYWluaW5nICZhbXA7IFJlY3J1aXRtZW50IEh1YiBmb3IgbWVkaWNhbCBlZHVjYXRpb24gIGFuZCBhIGNvbGxhYm9yYXRpdmUgZG9jdW1lbnQgbGlicmFyeS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5MYXRlc3Qgc3RhcnQgZGF0ZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+TW9uZGF5IDMgRmVicnVhcnkgMjAyMDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkV4cGVjdGVkIGNvbnRyYWN0IGxlbmd0aDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+NiBtb250aHM8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Mb2NhdGlvbjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5ObyBzcGVjaWZpYyBsb2NhdGlvbiwgZWcgdGhleSBjYW4gd29yayByZW1vdGVseTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPk9yZ2FuaXNhdGlvbiB0aGUgd29yayBpcyBmb3I8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkhlYWx0aCBFZHVjYXRpb24gRW5nbGFuZDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkJ1ZGdldCByYW5nZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+wqMxNTAsMDAwIC0gwqMyMDAsMDAwPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0yIj4KICAgICAgCiAgICAgIEFib3V0IHRoZSB3b3JrCiAgPC9oMj4KICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBBYm91dCB0aGUgd29yawogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+V2h5IHRoZSB3b3JrIGlzIGJlaW5nIGRvbmU8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlRoZSBJbnRlcmltIE5IUyBQZW9wbGUgUGxhbiBzZXRzIG91dCB0aGUgaW1wb3J0YW5jZSBvZiBncm93aW5nIGFuZCByZXRhaW5pbmcgdGhlIGhlYWx0aCB3b3JrZm9yY2UsIGFuZCBIZWFsdGggRWR1Y2F0aW9uIEVuZ2xhbmTigJlzIGNydWNpYWwgcm9sZSBpbiB0aGlzIGVuZGVhdm91ci4gVG8gcmVjcnVpdCBhbmQgcmV0YWluIGhlYWx0aCBwcm9mZXNzaW9uYWwgdHJhaW5lZXMgd2l0aGluIHRoZSBOSFMgYW5kIHN1cHBvcnQgdGhlbSB0aHJvdWdoIHRvIGZ1bGwgcXVhbGlmaWNhdGlvbiwgSGVhbHRoIEVkdWNhdGlvbiBFbmdsYW5kIG5lZWRzIHRvIHByb3ZpZGUgYSBjb25zaXN0ZW50LCBjb21wcmVoZW5zaXZlIGFuZCB1c2VyLWNlbnRyZWQgZGlnaXRhbCBzZXJ2aWNlIHRoYXQgZW5hYmxlcyB0cmFpbmVlcyBhY3Jvc3MgRW5nbGFuZCB0byBuYXZpZ2F0ZSB0aGVpciB0cmFpbmluZyBqb3VybmV5cy48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Qcm9ibGVtIHRvIGJlIHNvbHZlZDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+4oCiCVRvIHJhdGlvbmFsaXNlIHRoZSBleGlzdGluZyBmcmFnbWVudGVkIHdlYiBlc3RhdGUgaW50byBhbiBpbnRlZ3JhdGVkIE5hdGlvbmFsIFdlc2JpdGUgUGxhdGZvcm0uPGJyPjxicj7igKIJVGhlIHJlZHVjZSB0aGUgbnVtYmVyIG9mIGRpc3BhcmF0ZSB3ZWJzaXRlcyDigJxvd25lZOKAnSBieSBIRUUsIHRoZXJlYnkgcmVkdWNpbmcgYXNzb2NpYXRlZCB0ZWNobmljYWwgYW5kIHJlcHV0YXRpb25hbCByaXNrLCBhbmQgcmVkdWNpbmcgYXNzb2NpYXRlZCBkdXBsaWNhdGlvbiBvZiBlZmZvcnQgYW5kIHJlc291cmNlcy48YnI+PGJyPuKAoglUbyBlc3RhYmxpc2ggY29uc2lzdGVudCBzZWN1cml0eSwgbG9vayBhbmQgZmVlbCwgbGFuZ3VhZ2UgYW5kIGJyYW5kaW5nIGFjcm9zcyBhbGwgSEVFIHdlYnNpdGVzIHRoYXQgc2VydmUgbWVkaWNhbCB0cmFpbmVlcy48YnI+PGJyPuKAoglUbyBlbmFibGUgY3VyYXRpb24gb2YgZGF0YSBhbmQgY29udGVudCBhdCBib3RoIG5hdGlvbmFsIGFuZCBsb2NhbCBsZXZlbHMuPGJyPjxicj7igKIJVG8gYmVnaW4gdGhpcyBwcm9jZXNzIHdpdGggYW4gQWxwaGEgZXhwbG9yaW5nIHRoZSBtaW5pbXVtIHZpYWJsZSBwcm9kdWN0IGZvciBhIFRyYWluaW5nICZhbXA7IFJlY3J1aXRtZW50IEh1YiBmb3IgbWVkaWNhbCBlZHVjYXRpb24sIGFuZCBhIGNvbGxhYm9yYXRpdmUgZG9jdW1lbnQgbGlicmFyeSBmb3IgYWRvcHRpb24gYWNyb3NzIGEgbmV0d29yayBvZiBjb21tdW5pdHkgaHVicy48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5XaG8gdGhlIHVzZXJzIGFyZSBhbmQgd2hhdCB0aGV5IG5lZWQgdG8gZG88L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlRyYWluZWVzIGFuZCBwcm9zcGVjdGl2ZSB0cmFpbmVlczo8YnI+PGJyPuKAogkgd2FudCB0byBzZWFyY2ggZm9yIGFuZCBmaW5kIGNsZWFyIGluZm9ybWF0aW9uIGFib3V0IHNwZWNpYWx0eSB0cmFpbmluZyBvcHBvcnR1bml0aWVzLiA8YnI+PGJyPuKAogl3YW50IHRvIHNlZSBvcGVuIHRyYWluaW5nIHZhY2FuY2llcyBhdCBuYXRpb25hbCBhbmQgcmVnaW9uYWwgbGV2ZWwuIFRoZXkgd2FudCB0byBrbm93IHdoaWNoIHJlZ2lvbnMgcmVjcnVpdCBwZXIgc3BlY2lhbHR5LCBhbmQgdG8gZmluZCBpbmZvcm1hdGlvbiB0byBwbGFuIGZ1dHVyZSBhcHBsaWNhdGlvbnMsIGV2ZW4gaWYgdGhlcmUgYXJlIGN1cnJlbnRseSBubyBvcGVuIHZhY2FuY2llcy48YnI+PGJyPuKAogl3YW50IG1vcmUgY29uc2lzdGVudCB3ZWJzaXRlcyBsYXlvdXRzLjxicj48YnI+4oCiCXdhbnQgY2xlYXIgZGl2aXNpb25zIGJldHdlZW4gd2hhdCBhcHBsaWVzIG5hdGlvbmFsbHkgYW5kIGxvY2FsbHkuPGJyPjxicj7igKIJd2FudCB0byBjb21wYXJlIEZvdW5kYXRpb24gUHJvZ3JhbW1lcyBhdCBuYXRpb25hbCBsZXZlbCBhbmQgcmVnaW9uYWwgbGV2ZWwsIHRvIGRlY2lkZSBob3cgdG8gcmFuayB0aGVpciBwcmVmZXJlbmNlcyBvZiB3aGVyZSB0byB0cmFpbi4gPGJyPjxicj5OYXRpb25hbCBIRUUgUHJvdmlkZXJzLCBUcmFpbmVycyBhbmQgQ29udGVudCBNYW5hZ2Vyczo8YnI+PGJyPuKAogl3YW50IHRvIGluZm9ybSB0cmFpbmVlcyBvZiB0aGUgcmlnaHQgaW5mb3JtYXRpb24gZm9yIHRoZWlyIHRyYWluaW5nIHN0YWdlIGFuZCBzcGVjaWFsdHkuPGJyPjxicj7igKIJd2FudCB0byBwcm92aWRlIHRyYWluZWVzIHdpdGggbmF0aW9uYWxseSByZWxldmFudCBpbmZvcm1hdGlvbiwgYWR2aWNlIGFuZCBzdXBwb3J0Ljxicj48YnI+4oCiCVdhbnQgdG8gY28tY3JlYXRlLCBzdG9yZSBhbmQgZmluZCBkb2N1bWVudHMuPGJyPjxicj5SZWdpb25hbCBhbmQgTG9jYWwgSEVFIFByb3ZpZGVycywgVHJhaW5lcnMgYW5kIENvbnRlbnQgTWFuYWdlcnM6PGJyPjxicj7igKIJd2FudCB0byBiZSBlbmFibGVkIHRvIHdyaXRlIGluIGFuIGF1dGhlbnRpYywgbG9jYWwgdm9pY2Ugc28gdGhhdCB0cmFpbmVlcyBmZWVsIGxpa2UgdGhleSYjMzk7bGwgYmUgd29ya2luZyB3aXRoIHJlYWwgcGVvcGxlLiA8YnI+PGJyPuKAogl3YW50IHRvIGJlIGFibGUgdG8gbWFuYWdlIHRoZWlyIHNlY3Rpb24gb2YgdGhlIHdlYnNpdGUgaW4gYSB3YXkgdGhhdCBiZXN0IGNvbW11bmljYXRlcyB0byB0cmFpbmVlcyBpbmZvcm1hdGlvbiwgb3Bwb3J0dW5pdGllcyBhbmQgc3VwcG9ydCBzcGVjaWZpYyB0byB0aGF0IHByb2dyYW1tZSBvciByZWdpb24uPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RWFybHkgbWFya2V0IGVuZ2FnZW1lbnQ8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPldlIGhhdmUgZW5nYWdlZCB3aXRoIGEgcmFuZ2Ugb2Ygb3JnYW5pc2F0aW9ucyAtIGluY2x1ZGluZyBCdXllcnMgYW5kIFN1cHBsaWVycyAtIHRvIGJldHRlciB1bmRlcnN0YW5kIHRoZSBwcm9jZXNzIGFuZCBlc3RhYmxpc2ggYSByZWFsaXN0aWMgYnVkZ2V0Ljwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFueSB3b3JrIHRoYXTigJlzIGFscmVhZHkgYmVlbiBkb25lPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5Gb3IgZGlzY292ZXJ5LCB0aHJlZSByb3VuZHMgb2YgdXNlciByZXNlYXJjaCBoYXZlIGJlZW4gY29tcGxldGVkIHdpdGggbXVsdGlwbGUgc3Rha2Vob2xkZXIgZ3JvdXBzLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkV4aXN0aW5nIHRlYW08L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlRoZSBleGlzdGluZyB0ZWFtIGNvbnNpc3RzIG9mIHRoZSBTZW5pb3IgRGlnaXRhbCBDb21tdW5pY2F0aW9ucyBNYW5hZ2VyLCBTZXJ2aWNlIE93bmVyLCBhbmQgQnVzaW5lc3MgUmVsYXRpb25zaGlwIE1hbmFnZXIuIFRoZSBTZXJ2aWNlIE93bmVyIHdpbGwgYmUgdGhlIHByaW1hcnkgcG9pbnQgb2YgY29udGFjdCBmb3IgdGhlIHN1cHBsaWVyLiBUaGUgQnVzaW5lc3MgUmVsYXRpb25zaGlwIE1hbmFnZXIgd2lsbCB3b3JrIHdpdGggdGhlIHN1cHBsaWVyIHRvIHJlY3J1aXQgdXNlcnMgYW5kIHN0YWtlaG9sZGVycyBmb3IgcmVzZWFyY2ggYW5kIGZlZWRiYWNrLiBUaGUgU2VuaW9yIERpZ2l0YWwgQ29tbXVuaWNhdGlvbnMgTWFuYWdlciB3aWxsIGJlIGF2YWlsYWJsZSB0byBwcm92aWRlIHN0cmF0ZWdpYyBvdmVyc2lnaHQgYW5kIGd1aWRhbmNlLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkN1cnJlbnQgcGhhc2U8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+RGlzY292ZXJ5PC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0zIj4KICAgICAgCiAgICAgIFdvcmsgc2V0dXAKICA8L2gyPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIFdvcmsgc2V0dXAKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFkZHJlc3Mgd2hlcmUgdGhlIHdvcmsgd2lsbCB0YWtlIHBsYWNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5UaGUgQnV5ZXImIzM5O3MgdGVhbSBpcyBsb2NhdGVkIGluIEJpcm1pbmdoYW0sIFdlc3QgTWlkbGFuZHMsIHNvIHRoZSBzdXBwbGllciBpcyBleHBlY3RlZCB0byBiZSBhYmxlIHRvIGF0dGVuZCBtZWV0aW5ncyBhbmQgd29ya3Nob3BzIGluIEJpcm1pbmdoYW0uIFRoZSBzdXBwbGllciB3aWxsIGFsc28gYmUgZXhwZWN0ZWQgdG8gcnVuIHdvcmtzaG9wcyB3aXRoIHVzZXJzIHNjYXR0ZXJlZCBhY3Jvc3MgdGhlIGNvdW50cnkuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+V29ya2luZyBhcnJhbmdlbWVudHM8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlN1cHBsaWVycyBhcmUgcmVxdWVzdGVkIHRvIHdvcmsgZnJvbSB0aGVpciBvd24gbG9jYXRpb24sIHdpdGggcmVndWxhciB2aXNpdHMgdG8gSEVF4oCZcyBvZmZpY2VzIGluIEJpcm1pbmdoYW0sIGFuZCB0byBob3N0IHZpc2l0cyBmcm9tIHRoZSBIRUUgdGVhbSBhdCB0aGVpciBzaXRlLiBUaGV5IG1heSBhbHNvIGJlIHJlcXVpcmVkIHRvIGF0dGVuZCBtZWV0aW5ncyBhbmQgd29ya3Nob3BzIHdpdGggc3Rha2Vob2xkZXIgYW5kIHVzZXIgZ3JvdXBzIHNjYXR0ZXJlZCBhcm91bmQgdGhlIGNvdW50cnkuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+U2VjdXJpdHkgY2xlYXJhbmNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5OL0E8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTQiPgogICAgICAKICAgICAgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgogIDwvaDI+CiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+QWRkaXRpb25hbCB0ZXJtcyBhbmQgY29uZGl0aW9uczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+U3RhbmRhcmQgQ29udHJhY3QgdG8gYmUgdXNlZDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogICAgPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtNSI+CiAgICAgIAogICAgICBTa2lsbHMgYW5kIGV4cGVyaWVuY2UKICA8L2gyPgogICAgIAogICAgICAgIDxwPjxwIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZGVzY3JpcHRpb24iPgogICAgQnV5ZXJzIHdpbGwgdXNlIHRoZSBlc3NlbnRpYWwgYW5kIG5pY2UtdG8taGF2ZSBza2lsbHMgYW5kIGV4cGVyaWVuY2UgdG8gaGVscCB0aGVtIGV2YWx1YXRlIHN1cHBsaWVyc+KAmSB0ZWNobmljYWwgY29tcGV0ZW5jZS4KICA8L3A+PC9wPgogICAgIAogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIFNraWxscyBhbmQgZXhwZXJpZW5jZQogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RXNzZW50aWFsIHNraWxscyBhbmQgZXhwZXJpZW5jZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj48dWw+CiAgICAKICAgICAgPGxpPkhhdmUgc2tpbGxzIGFuZCBleHBlcmllbmNlIGluIHRoZSBmb2xsb3dpbmc6IEphdmEvSmF2YVNjcmlwdC8gQmxvb21yZWFjaCBiclhNIChwcmV2aW91c2x5IEhpcHBvIENNUykgcGxhdGZvcm0gL0dpdEh1Yi48L2xpPgogICAgCiAgICAgIDxsaT5CZSBhYmxlIHRvIHVzZSByZWxldmFudCB0ZWNobm9sb2dpZXMgaW4gY29udGV4dCBvZiBhbiBBZ2lsZSBkZXZlbG9wbWVudCBwcm9ncmFtbWUsIHVzaW5nIFNjcnVtIG9yIEthbmJhbiBvciBib3RoLjwvbGk+CiAgICAKICAgICAgPGxpPkRlbW9uc3RyYXRlIGFiaWxpdHkgdG8gc3VjY2Vzc2Z1bGx5IHJ1biBjb21wbGV4IGRpZ2l0YWwgcHJvamVjdHMgdGhyb3VnaCB0aGVpciBsaWZlIGN5Y2xlIGluY2x1ZGluZyBEaXNjb3ZlcnksIEFscGhhLCBCZXRhLCBMaXZlIGFuZCBSZXRpcmVtZW50LjwvbGk+CiAgICAKICAgICAgPGxpPkhhdmUgZXhjZWxsZW50IHVuZGVyc3RhbmRpbmcgYW5kIGV4cGVyaWVuY2Ugb2YgQVBJLWJhc2VkIGludGVncmF0aW9uIHdpdGggbXVsdGlwbGUgc3lzdGVtcy48L2xpPgogICAgCiAgICAgIDxsaT5EZW1vbnN0cmF0ZSBleGNlbGxlbnQgaW5mb3JtYXRpb24gYXJjaGl0ZWN0dXJlIHNraWxscy48L2xpPgogICAgCiAgICAgIDxsaT5EZW1vbnN0cmF0ZSBhYmlsaXR5IHRvIHVzZSBpbnRlbGxpZ2VudCBwZXJzb25hbGlzYXRpb24gdG8gYmV0dGVyIG1lZXQgdXNlciBuZWVkcy48L2xpPgogICAgCiAgICAgIDxsaT5VbmRlcnN0YW5kIGFuZCBiZSBjb21taXR0ZWQgdG8gaGVscGluZyB0aGUgcHJvamVjdCBtZWV0IHRoZSBHRFMgRGlnaXRhbCBTZXJ2aWNlIFN0YW5kYXJkLjwvbGk+CiAgICAKICAgICAgPGxpPlVuZGVyc3RhbmQgYW5kIGJlIGNvbW1pdHRlZCB0byB0aGUgY29uZmlkZW50aWFsaXR5LCBkYXRhIHByb3RlY3Rpb24sIGFuZCBkYXRhIGFuZCBzeXN0ZW0gc2VjdXJpdHkgc3RhbmRhcmRzIGluIHVzZSB3aXRoaW4gZ292ZXJubWVudCBhbmQgdGhlIE5IUy48L2xpPgogICAgCiAgICAgIDxsaT5Qcm92aWRlIGV2aWRlbmNlIG9mIGEgc3Ryb25nIGNhcGFiaWxpdHkgdG8gZGVsaXZlciB1c2VyIGV4cGVyaWVuY2UgZGVzaWduLCBpZGVhbGx5IGFsaWduZWQgdG8gR0RTIHByaW5jaXBsZXM8L2xpPgogICAgCiAgICAgIDxsaT5Qcm92aWRlIGV2aWRlbmNlIG9mIGV4cGVydGlzZSBpbiBhY2Nlc3NpYmlsaXR5LCBzcGVjaWZpY2FsbHkgV0NBRyBjb21wbGlhbmNlPC9saT4KICAgIAogICAgICA8bGk+UHJvdmlkZSBldmlkZW5jZSBvZiBjYXBhYmlsaXRpZXMgdG8gZW5nYWdlIHdpdGggdXNlcnMgdmlhIHF1YW50aXRhdGl2ZSBhbmQgcXVhbGl0YXRpdmUgdXNlciByZXNlYXJjaCBhbmQgdGVzdGluZyB0aHJvdWdob3V0IHRoZSBkZXZlbG9wbWVudCBwcm9jZXNzLCBpbmNsdWRpbmcgcnVubmluZyB1c2VyIHJlc2VhcmNoIHdvcmtzaG9wcy48L2xpPgogICAgCiAgICAgIDxsaT5EZW1vbnN0cmF0ZSB0aGV5IGhhdmUgcmlzayBtYW5hZ2VtZW50IHByb2Nlc3NlcyB0aGF0IHByb3ZpZGUgaW5mb3JtYXRpb24gc3VpdGFibGUgZm9yIEhFRSB0byBpbmNvcnBvcmF0ZS9idWlsZCBvbiBmb3IgcHJvZHVjdGlvbiBvZiBwcm9qZWN0IGFuZCBwcm9ncmFtbWUgbWFuYWdlbWVudCBwcm9kdWN0cyBpbmNsdWRpbmcgcmlzayByZWdpc3RlcnMuPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhdGUgZXZpZGVuY2Ugb2YgZmluYW5jaWFsIG1hbmFnZW1lbnQgcHJvY2Vzc2VzIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gc3VpdGFibGUgZm9yIEhFRSB0byBtb25pdG9yL2NvbnRyb2wgcHJvamVjdCBjb3N0cywgaW5jb3Jwb3JhdGUsIGJ1aWxkIG9uIHRvIHByb2R1Y2UgcHJvamVjdC9wcm9ncmFtbWUgbWFuYWdlbWVudCBwcm9kdWN0cy8gZmluYW5jaWFsIHJlcG9ydHMuPC9saT4KICAgIAogICAgICA8bGk+SGF2ZSBmYWNpbGl0aWVzIHRvIGhvc3QgSEVFIHRlYW0gbWVtYmVycyBmb3IgbWVldGluZ3MsIHdvcmtzaG9wcyBhbmQgb2NjYXNpb25hbCBjb2xsYWJvcmF0aXZlIHdvcmtpbmcgYXQgc3VwcGxpZXIgc2l0ZS48L2xpPgogICAgCiAgICAgIDxsaT5EZW1vbnN0cmF0ZSB0aGV5IGhhdmUgZXhwZXJpZW5jZSBpbiB1c2luZyBtb2Rlcm4gQ0kgLyBDRCBtZXRob2RzIGFzIHBhcnQgb2YgYW4gaW50ZWdyYXRlZCBEZXZPcHMgcHJvY2VzcywgdXRpbGlzaW5nIHRoZSBDbG91ZC48L2xpPgogICAgCiAgICAgIDxsaT5EZW1vbnN0cmF0ZSBleHBlcmllbmNlIG9mIGJ1aWxkaW5nIGFuZCB1c2VyIHRlc3RpbmcgcHJvdG90eXBlcyBkdXJpbmcgdGhlIEFscGhhIHBoYXNlLjwvbGk+CiAgICAKICAgICAgPGxpPkRlbW9uc3RyYXRlIGV4cGVydGlzZSBpbiBtYW5hZ2luZyB0aGUgY29tcGxldGUgQWxwaGEgcHJvY2Vzcy48L2xpPgogICAgCiAgICAgIDxsaT5TaG93IHdpbGxpbmduZXNzIGFuZCBhYmlsaXR5IHRvIGRlbGl2ZXIgdHJhaW5pbmcgYW5kIGVuZ2FnZW1lbnQgYWN0aXZpdGllcyB3aXRoIHJlbGV2YW50IEhFRSBzdGFmZiBhbmQgc3Rha2Vob2xkZXJzLjwvbGk+CiAgICAKICA8L3VsPgogIDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPk5pY2UtdG8taGF2ZSBza2lsbHMgYW5kIGV4cGVyaWVuY2U8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+PHVsPgogICAgCiAgICAgIDxsaT5EZW1vbnN0cmF0ZSBleHBlcmllbmNlIG9mIGhlYWx0aCBzZWN0b3IgZGlnaXRhbCBzZXJ2aWNlIHByb3Zpc2lvbjwvbGk+CiAgICAKICAgICAgPGxpPlNob3cgZXZpZGVuY2Ugb2Ygc3VjY2Vzc2Z1bGx5IGNvbXBsZXRpbmcgR0RTIGFzc2Vzc21lbnRzLjwvbGk+CiAgICAKICA8L3VsPgogIDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogICAgPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtNiI+CiAgICAgIAogICAgICBIb3cgc3VwcGxpZXJzIHdpbGwgYmUgZXZhbHVhdGVkCiAgPC9oMj4KICAgICAKICAgICAgICA8cD5BbGwgc3VwcGxpZXJzIHdpbGwgYmUgYXNrZWQgdG8gcHJvdmlkZSBhIHdyaXR0ZW4gcHJvcG9zYWwuPC9wPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIEhvdyBzdXBwbGllcnMgd2lsbCBiZSBldmFsdWF0ZWQKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkhvdyBtYW55IHN1cHBsaWVycyB0byBldmFsdWF0ZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+NTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPlByb3Bvc2FsIGNyaXRlcmlhPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjx1bD4KICAgIAogICAgICA8bGk+VGVjaG5pY2FsIHNvbHV0aW9uLiBTb2x1dGlvbiBtdXN0IGJlIHJlYWxpc3RpYywgdXRpbGlzZSBjb3JlIHRlY2hub2xvZ2llcyBsaXN0ZWQgKG9yIHRoZWlyIGVxdWl2YWxlbnRzKSBhbmQgbm90IGludHJvZHVjZSByaXNrLCB0ZWNobmljYWwgZGVidCwgbGVhZCB0byBkaXZlcmdlbmNlIGZyb20gYWdyZWVkIEhFRSBzdGFuZGFyZHMgYW5kIHRlY2huaWNhbCByb2FkbWFwcy48L2xpPgogICAgCiAgICAgIDxsaT5BcHByb2FjaCBhbmQgbWV0aG9kb2xvZ3kuIFRoZXNlIG11c3QgYmUgY29tcGF0aWJsZSB3aXRoIEhFReKAmXMgY29tbWl0bWVudCB0byBBZ2lsZSwgdXNlci1jZW50cmVkIGFuZCBkYXRhLWRyaXZlbiBkZXNpZ24gYXMgZXhwcmVzc2VkIGluIHRoZSBHRFMgRGlnaXRhbCBTZXJ2aWNlIFN0YW5kYXJkLjwvbGk+CiAgICAKICAgICAgPGxpPk1lZXRpbmcgdXNlciBuZWVkcy4gVGhlIHByb3Bvc2FsIG11c3Qgc2hvdyBhIHJlYWxpc3RpYyBhcHByb2FjaCB0byBkZXZlbG9waW5nIHNvbHV0aW9ucyB1c2luZyBhbiBleGlzdGluZyBiYWNrbG9nLCBjYXB0dXJpbmcsIHByaW9yaXRpc2luZyBuZXcgcmVxdWlyZW1lbnRzIGFuZCBzdG9yaWVzIGFzIHdvcmsgcHJvZ3Jlc3Nlcy48L2xpPgogICAgCiAgICAgIDxsaT5NZWV0aW5nIEhFReKAmXMgcG9saWN5IG9yIGdvYWwuIFByb3Bvc2FsIHNob3VsZCBiZSBkcmF3biB1cCBpbiB0aGUgY29udGV4dCBvZiByZWxldmFudCBOSFMgYW5kIEhFRSBzdHJhdGVnaWVzLCBzdWNoIGFzIHRoZSBJbnRlcmltIFBlb3BsZSBQbGFuLjwvbGk+CiAgICAKICAgICAgPGxpPkVzdGltYXRlZCB0aW1lZnJhbWVzIGZvciB0aGUgd29yay4gVGhlIHByb3Bvc2FsIHdpbGwgYmUgZXZhbHVhdGVkIHRvIGRldGVybWluZSBpZiB0aGUgd29yayBhbmQgdGhlIGFwcHJvYWNoIGNhbiByZWFsaXN0aWNhbGx5IGRlbGl2ZXIgdGhlIEFscGhhIHdpdGhpbiB0aGUgdGltZSBhdmFpbGFibGUuPC9saT4KICAgIAogICAgICA8bGk+Umlza3MgYW5kIGRlcGVuZGVuY2llcy4gVGhlIHByb3Bvc2FsIHdpbGwgYmUgZXZhbHVhdGVkIHRvIGRldGVybWluZSBob3cgdGhlIHN1cHBsaWVyIGhhcyBpZGVudGlmaWVkIHJpc2tzIGFuZCBkZXBlbmRlbmNpZXMgYW5kIG9mZmVyZWQgYXBwcm9hY2hlcyB0byBtYW5hZ2UgdGhlbS48L2xpPgogICAgCiAgICAgIDxsaT5UZWFtIHN0cnVjdHVyZSBtdXN0IHN1cHBvcnQgdGhlIGZ1bGwgcmFuZ2Ugb2YgYWN0aXZpdGllcyBuZWVkZWQgdG8gZnVsZmlsIHRoZSBwcm9qZWN04oCZcyBvYmplY3RpdmVzIGFuZCBiZSBhYmxlIHRvIHVuZGVydGFrZSB0cmFpbmluZyBhbmQgZW5nYWdlbWVudCBhY3Rpdml0aWVzIHdpdGggcmVsZXZhbnQgSEVFIHN0YWZmIGFuZCBzdGFrZWhvbGRlcnMuPC9saT4KICAgIAogICAgICA8bGk+VmFsdWUgZm9yIG1vbmV5LiBUaGUgcHJvcG9zYWwgbXVzdCByZXByZXNlbnQgZ29vZCB2YWx1ZSBmb3IgbW9uZXkgd2hlbiBjb21wYXJlZCB3aXRoIHNpbWlsYXIgb25lcyBib3RoIHdpdGhpbiBhbmQgb3V0c2lkZSBIRUUgYW5kIGFjcm9zcyBkaWZmZXJlbnQgc2VjdG9ycy48L2xpPgogICAgCiAgPC91bD4KICA8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5DdWx0dXJhbCBmaXQgY3JpdGVyaWE8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+PHVsPgogICAgCiAgICAgIDxsaT5Xb3JrIGFzIGEgdGVhbSB3aXRoIEhFRSBhbmQgb3RoZXIgc3VwcGxpZXJzLiBXZSB3aWxsIHNlZWsgZXZpZGVuY2UgZm9yIGFuIGluY2x1c2l2ZSBhcHByb2FjaCBhbmQgYSB3aWxsaW5nbmVzcyB0byBjby1vcGVyYXRlL2NvbGxhYm9yYXRlLCB3aXRoIHByYWN0aWNhbCBtZWNoYW5pc21zIHN1Z2dlc3RlZCB0byBhY2hpZXZlIHRoaXMuPC9saT4KICAgIAogICAgICA8bGk+QmUgdHJhbnNwYXJlbnQvY29sbGFib3JhdGl2ZSB3aGVuIG1ha2luZyBkZWNpc2lvbnMuIENvdmVyIHRoZSBkZWNpc2lvbi1tYWtpbmcgcHJvY2Vzcywgc2V0IG91dCB0aGUgcm9sZSBvZiB0aGUga2V5IHRlYW0gbWVtYmVycyBhbmQgdGhlIG1lY2hhbmlzbXMgYnkgd2hpY2ggdGhlIHByb2Nlc3NlcyB3aWxsIGJlIGFkb3B0ZWQgKEFnaWxlIGNlcmVtb25pZXMvcmVwb3J0cy9ldGMuKTwvbGk+CiAgICAKICAgICAgPGxpPlRoZSBwcm9wb3NhbCBtdXN0IHNob3cgYSByZWFsaXN0aWMgYXBwcm9hY2ggdG8gZGV2ZWxvcGluZyBzb2x1dGlvbnMgdG8gbWVldCB1c2VyIG5lZWRzLCB1c2luZyBhbiBleGlzdGluZyBiYWNrbG9nLCBjYXB0dXJpbmcsIHByaW9yaXRpc2luZyBuZXcgcmVxdWlyZW1lbnRzIGFuZCBzdG9yaWVzIGFzIHdvcmsgcHJvZ3Jlc3Nlcy48L2xpPgogICAgCiAgICAgIDxsaT5UYWtlIHJlc3BvbnNpYmlsaXR5IGZvciB0aGVpciB3b3JrLiBXZSB3b3VsZCBleHBlY3QgdGhlIHN1cHBsaWVy4oCZcyBwcm9wb3NhbCB0byBzaG93IGV2aWRlbmNlIG9mIHByb2Nlc3MgZm9yIHNldHRpbmcgcXVhbGl0eSBzdGFuZGFyZHMgZm9yIHRoZWlyIG93biB3b3JrLjwvbGk+CiAgICAKICAgICAgPGxpPlByb3ZpZGUgZXhhbXBsZXMgb2YgaG93IHRoZXkgd291bGQgZGV2aXNlIHRlc3RzIGFuZCBpbmZvcm1hdGlvbiBvbiBob3cgdGhleSB3b3VsZCBpbXBsZW1lbnQgY2hlY2tzIGFuZCByZXZpZXdzIG9mIHRoZWlyIG91dHB1dC48L2xpPgogICAgCiAgICAgIDxsaT5TaGFyZSBrbm93bGVkZ2UgYW5kIGV4cGVyaWVuY2Ugd2l0aCBvdGhlciB0ZWFtIG1lbWJlcnMgYW5kIEhFRS4gUHJvcG9zYWwgc2hvdWxkIHNob3cgaG93IGluZm9ybWF0aW9uIGFuZCBrbm93bGVkZ2UgaXMgY2FwdHVyZWQsIHNoYXJlZCBhbmQgaW50ZXJwcmV0ZWQsIGluIHRlcm1zIG9mIGRheS10by1kYXkgYWN0aXZpdHkgYW5kIGxvbmdlci10ZXJtIHJlcG9ydGluZy48L2xpPgogICAgCiAgICAgIDxsaT5IZWxwaW5nIHRvIHJldmlldyB0aGUgYWxpZ25tZW50IG9mIGRlbGl2ZXJhYmxlcyB3aXRoIGdvYWxzIGFuZCB0byBjaGFsbGVuZ2Ugb25lcyB0aGF0IGFyZSBwb3RlbnRpYWxseSB1bm5lY2Vzc2FyeSBvciBub3QgYWNoaWV2aW5nIHRoZSBwcm9qZWN0IG9yIHNwcmludCBvYmplY3RpdmVzLjwvbGk+CiAgICAKICAgICAgPGxpPkJlIGNvbWZvcnRhYmxlIHN0YW5kaW5nIHVwIGZvciB0aGVpciBkaXNjaXBsaW5lLiBUaGUgc3VwcGxpZXIgc2hvdWxkIGJlIGFibGUgdG8gZ2l2ZSBleGFtcGxlcyBvZiBob3cgdGhleSBoYXZlIGp1c3RpZmllZCBhbmQgcHJvdmVuIHRoZSB2YWx1ZSBvZiB0aGVpciBhcHByb2FjaCBpbiB0aGUgcGFzdC48L2xpPgogICAgCiAgICAgIDxsaT5Xb3JrIHdpdGggY2xpZW50cyB3aXRoIGxvdyB0ZWNobmljYWwgZXhwZXJ0aXNlLiBTdXBwbGllciBzaG91bGQgZXhwbGFpbiBob3cgdGhleSBicmlkZ2UgZ2FwcyBiZXR3ZWVuIHRlY2huaWNhbCBleHBlcnRpc2Ugb2YgdGhlaXIgdGVhbSBhbmQgdGhlIGtub3dsZWRnZSBvZiB0aGUgSEVFIHRlYW0gYW5kIHN0YWtlaG9sZGVycy48L2xpPgogICAgCiAgICAgIDxsaT5EZW1vbnN0cmF0ZSBhYmlsaXR5IHRvIGZhY2lsaXRhdGUgYm90aCBwYXJ0aWVzIHRvIGxlYXJuIGZyb20gZWFjaCBvdGhlciwgYW5kIGhvdyBmdWxsIGltcGxpY2F0aW9ucyBvZiBhbnkgc3BlY2lhbGlzZWQgdGVjaG5pY2FsIGRpc2N1c3Npb25zIGNhbiBiZSBjbGFyaWZpZWQgdG8ga2V5IHRlYW0gbWVtYmVycyBpbmNsdWRpbmcgU2VydmljZSBPd25lci48L2xpPgogICAgCiAgICAgIDxsaT5BbGlnbm1lbnQgd2l0aCBOSFMgYW5kIEhFRSB2YWx1ZXMuPC9saT4KICAgIAogICAgICA8bGk+SXQgd2lsbCBiZSB0aGUgc3VwcGxpZXImIzM5O3MgcmVzcG9uc2liaWxpdHkgdG8gZW5zdXJlIHRoYXQgYSBwbGF0Zm9ybSBwcm92aWRlciByZXByZXNlbnRhdGl2ZSBpcyBpbmNsdWRlZCBpbiB0aGUgcHJvamVjdCBraWNrLW9mZiBhY3Rpdml0aWVzLjwvbGk+CiAgICAKICAgICAgPGxpPkNhcGFjaXR5IHRvIHNjaGVkdWxlIHRoZSBBbHBoYSBhbG9uZyBzdGFnZ2VyZWQgdGltZWxpbmVzIHRvIGFsbG93IGZvciB0aGUgNi04IHdlZWtzIG5vdGljZSBjbGluaWNpYW5zIHJlcXVpcmUgdG8gYmUgYWJsZSB0byBhdHRlbmQgd29ya3Nob3BzLjwvbGk+CiAgICAKICA8L3VsPgogIDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPlBheW1lbnQgYXBwcm9hY2g8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+Q2FwcGVkIHRpbWUgYW5kIG1hdGVyaWFsczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFkZGl0aW9uYWwgYXNzZXNzbWVudCBtZXRob2RzPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjx1bD4KICAgIAogICAgICA8bGk+Q2FzZSBzdHVkeTwvbGk+CiAgICAKICAgICAgPGxpPldvcmsgaGlzdG9yeTwvbGk+CiAgICAKICAgICAgPGxpPlJlZmVyZW5jZTwvbGk+CiAgICAKICAgICAgPGxpPlByZXNlbnRhdGlvbjwvbGk+CiAgICAKICA8L3VsPgogIDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkV2YWx1YXRpb24gd2VpZ2h0aW5nPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJtdWx0aXF1ZXN0aW9uIj4KICAgICAgICAgIDxwPlRlY2huaWNhbCBjb21wZXRlbmNlPC9wPgogICAgICAgICAgPGRpdj41NSU8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibXVsdGlxdWVzdGlvbiI+CiAgICAgICAgICA8cD5DdWx0dXJhbCBmaXQ8L3A+CiAgICAgICAgICA8ZGl2PjIwJTwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJtdWx0aXF1ZXN0aW9uIj4KICAgICAgICAgIDxwPlByaWNlPC9wPgogICAgICAgICAgPGRpdj4yNSU8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uLW9uZS13aG9sZSI+CiAgICAKCgoKPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9ImNsYXJpZmljYXRpb24tcXVlc3Rpb25zIj4KICAgICAgCiAgICAgIFF1ZXN0aW9ucyBhc2tlZCBieSBzdXBwbGllcnMKICA8L2gyPgoKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgUXVlc3Rpb25zIGFza2VkIGJ5IHN1cHBsaWVycwogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+U3VwcGxpZXIgcXVlc3Rpb248L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5CdXllciBhbnN3ZXI8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj4xLjwvc3Bhbj4KICAgICAgWW91IGFzayB1cyB0by4uLjxicj4mIzM0O0RlbW9uc3RyYXRlIGV2aWRlbmNlIG9mIGZpbmFuY2lhbCBtYW5hZ2VtZW50IHByb2Nlc3NlcyB0byBwcm92aWRlIGluZm9ybWF0aW9uIHN1aXRhYmxlIGZvciBIRUUgdG8gbW9uaXRvci9jb250cm9sIHByb2plY3QgY29zdHMsIGluY29ycG9yYXRlLCBidWlsZCBvbiB0byBwcm9kdWNlJiMzNDs8YnI+SG93IGRvIHdlIGtub3cgd2hpY2ggcHJvY2Vzc2VzIGFyZSBzdWl0YWJsZSBmb3IgSEVFLCBpZiB3ZSBoYXZlIHlldCB0byB3b3JrIHdpdGggeW91ID88YnI+VGhhbmtzPC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VGhhbmsgeW91IGZvciB5b3VyIHF1ZXN0aW9uLiBQbGVhc2UgcHJvdmlkZSBpbmZvcm1hdGlvbiBvZiB0aGUgZmluYW5jaWFsIG1hbmFnZW1lbnQgcHJvY2Vzc2VzIHlvdXIgb3JnYW5pc2F0aW9uIHVzZXMgdG8gbW9uaXRvciBwcm9qZWN0IGNvc3RzLiBUaGlzIG1heSBpbmNsdWRlIGluZm9ybWF0aW9uIG9uIHdoZXRoZXIgdGhlc2UgcHJvY2Vzc2VzIGFyZSBzdGFuZGFyZGlzZWQgb3Igd2hldGhlciBwcm9jZXNzZXMgdmFyeSBhY2NvcmRpbmcgdG8gY2xpZW50IG5lZWRzLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+PHNwYW4gYXJpYS1sYWJlbD0icXVlc3Rpb24iPjIuPC9zcGFuPgogICAgICAxKSBUaGlzIHByb2plY3QgaXMgZm9yIGRldmVsb3BpbmcgYSBuZXcgc3lzdGVtIG9yIHN1cHBvcnQgY3VycmVudCBvbmU/PGJyPjIpIFdoYXQgYW1vdW50IG9mIHNlcGFyYXRlIGFwcGxpY2F0aW9ucy9zaXRlcyBuZWVkIHRvIGJlIHN1cHBvcnRlZC9kZXZlbG9wZWQ/PGJyPjMpIEhvdyBtdWNoIGlzIHRoZSB0b3RhbCBhbW91bnQgb2YgcGFnZXMvc2NyZWVucywgdGFibGVzL2xpbmVzIG9mIGRhdGEgaW4gdGhlIGRhdGFiYXNlcywgbGluZXMgb2YgY29kZSAoaWYgZXhpc3Rpbmcgc3lzdGVtcyk/PGJyPjQpIFdoYXQgbGFuZ3VhZ2Ugd2FzIHVzZWQgZm9yIHRoZSBjdXJyZW50IHN5c3RlbT88YnI+NSkgV2hhdCBjYXBhY2l0eSAobnVtYmVyIG9mIHNpbXVsdGFuZW91cyB1c2VycywgcmVxdWVzdHMsIG5ldyBkb2N1bWVudHMgcGVyIHVuaXQgdGltZSwgZXRjLikgc2hvdWxkIHRoZSBzeXN0ZW0gc3VwcG9ydD88YnI+NikgSWYgbmV3IHN5c3RlbSByZXF1aXJlZCB3aGljaCBpcyBhcHByb3ggYW1vdW50IG9mIGZ1bmN0aW9uYWxpdHk/PGJyPjcpIElzIGRpc2NvdmVyeSBjb21wbGV0ZWQ/IENvdWxkIHlvdSBwbGVhc2Ugc2hhcmUgZGlzY292ZXJ5IHJlcG9ydD88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj4xKSBUaGUgcHJvamVjdCBpcyB0byBkZXZlbG9wIGEgbmV3IHN5c3RlbS48YnI+MikgVGhlIEFscGhhIHdpbGwgZXhwbG9yZSBwb3RlbnRpYWwgYXBwbGljYXRpb25zL3NpdGVzIHRvIGJlIGRldmVsb3BlZCwgYWRkcmVzc2luZyB0aGUgdXNlciBuZWVkcyBvdXRsaW5lZCBpbiB0aGUgIHJlcXVpcmVtZW50cyBsaXN0ZWQuPGJyPjMpIFRoaXMgcHJvamVjdCBpcyB0byBydW4gYW4gQWxwaGEgZm9yIGEgbmV3IHN5c3RlbS48YnI+NCkgVGhpcyBwcm9qZWN0IGlzIHRvIHJ1biBhbiBBbHBoYSBmb3IgYSBuZXcgc3lzdGVtLjxicj41KSBXZSBrbm93IHRoZSBpZGVudGlmaWVkIHBsYXRmb3JtIGNhbiBzdXBwb3J0IHJlcXVpcmVkIGNhcGFjaXR5LiA8YnI+NikgV2Uga25vdyB0aGUgaWRlbnRpZmllZCBwbGF0Zm9ybSBjYW4gc3VwcG9ydCB0aGUgZnVuY3Rpb25hbGl0eSByZXF1aXJlZC4gPGJyPjcpIERpc2NvdmVyeSBpcyBjb21wbGV0ZWQuIFdlIGRvIG5vdCB3YW50IHRvIHNoYXJlIHRoZSBkaXNjb3ZlcnkgcmVwb3J0IHdpdGggdW5yZXN0cmljdGVkIGFjY2Vzcywgc28gd2Ugd2lsbCBzaGFyZSB0aGF0IHJlcG9ydCB3aXRoIHN1cHBsaWVycyB3aG8gYXJlIHNob3J0bGlzdGVkLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+PHNwYW4gYXJpYS1sYWJlbD0icXVlc3Rpb24iPjMuPC9zcGFuPgogICAgICBJcyB0aGVyZSBhbiBpbmN1bWJlbnQgc3VwcGxpZXI/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VGhlcmUgaXMgbm90IGFuIGluY3VtYmVudCBzdXBwbGllci48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj40Ljwvc3Bhbj4KICAgICAgSGkg4oCTIGNhbiB5b3UgbGV0IHVzIGtub3cgaWYgeW91IGhhdmUgd29ya2VkIHdpdGggYW4gYWdlbmN5IGR1cmluZyB5b3VyIGRpc2NvdmVyeSBwZXJpb2QsIChpZSwgaXMgdGhlcmUgYW4gaW5jdW1iZW50IHN1cHBsaWVyIGhlcmUpPyBUaGFua3MuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+QW4gYWdlbmN5IHdhcyB1c2VkIGZvciB0aGUgZmlyc3Qgcm91bmQgb2YgZGlzY292ZXJ5IHJlc2VhcmNoIGNvbmR1Y3RlZCBpbiAyMDE2LCBidXQgdGhleSBhcmUgbm8gbG9uZ2VyIGludm9sdmVkLiBTdWJzZXF1ZW50IHJvdW5kcyBvZiBkaXNjb3ZlcnkgcmVzZWFyY2ggd2VyZSBjb25kdWN0ZWQgaW50ZXJuYWxseS4gVGhlcmUgaXMgbm90IGFuIGluY3VtYmVudCBzdXBwbGllci48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj41Ljwvc3Bhbj4KICAgICAgV2hhdCBhcmUgdGhlIE5IUyBhbmQgSEVFIHZhbHVlcz88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5QbGVhc2UgZm9sbG93IHRoZSBiZWxvdyBsaW5rIGZvciBpbmZvcm1hdGlvbiByZWdhcmRpbmcgdGhlIE5IUyBhbmQgSEVFIHZhbHVlczo8YnI+PGEgaHJlZj0iaHR0cHM6Ly9oZWUubmhzLnVrL2Fib3V0L291ci12YWx1ZXMvbmhzLWNvbnN0aXR1dGlvbmFsLXZhbHVlcy1odWItMCIgY2xhc3M9ImJyZWFrLWxpbmsiIHJlbD0iZXh0ZXJuYWwiPmh0dHBzOi8vaGVlLm5ocy51ay9hYm91dC9vdXItdmFsdWVzL25ocy1jb25zdGl0dXRpb25hbC12YWx1ZXMtaHViLTA8L2E+PC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+Ni48L3NwYW4+CiAgICAgIElzIGl0IGNyaXRpY2FsIHRoYXQgc2VsZWN0ZWQgcHJvdmlkZXIgaGFzIGV4cGVyaWVuY2Ugd2l0aCBCbG9vbXJlYWNoIGJyWE0gb3IgYXJlIHlvdSBvcGVuIHRvIGV4cGxvcmluZyB0aGUgcG9zc2liaWxpdHkgb2Ygc2ltaWxhciBDTVMgcGxhdGZvcm1zPzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlRoZSBwbGF0Zm9ybSBoYXMgYWxyZWFkeSBiZWVuIGlkZW50aWZpZWQsIHRoZXJlZm9yZSB3ZSBhcmUgbG9va2luZyBmb3IgYSBzdXBwbGllciB3aXRoIGV4cGVyaWVuY2Ugb2YgQmxvb21yZWFjaCBiclhNLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+PHNwYW4gYXJpYS1sYWJlbD0icXVlc3Rpb24iPjcuPC9zcGFuPgogICAgICBBcyBBbHBoYSBuZWVkcyB0byBiZSBkZWxpdmVyZWQgaW4gYSA4LTEwIHdlZWsgdGltZWZyYW1lIGNhbiB3ZSBhc3N1bWUgdGhhdCBkaWFyaWVzIG9mIGtleSBwZW9wbGUgdG8gYXR0ZW5kIHdvcmtzaG9wcyBoYXZlIGJlZW4gYmxvY2tlZC4gV291bGQgaXQgYmUgcG9zc2libGUgdG8gcmFpc2UgY2hhbmdlIHJlcXVlc3RzIGlmIHRoZXJlIGFyZSBhbnkgZGVsYXlzIGluIHNjaGVkdWxpbmcgdGhlIHdvcmtzaG9wcyBkdWUgdG8gdGhlIG5vbi1hdmFpbGFiaWxpdHkgb2Yga2V5IHBlb3BsZS4gVGhhbmtzPC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+V2Ugd291bGQgYWdyZWUgdGhlIHNjaGVkdWxlIHdpdGggdGhlIFN1cHBsaWVyIGFzIHBhcnQgb2YgdGhlIGtpY2stb2ZmIHNlc3Npb25zLiBCZWNhdXNlIGNsaW5pY2lhbnMgcmVxdWlyZSA2LTggd2Vla3Mgbm90aWNlIHRvIGF0dGVuZCB3b3Jrc2hvcHMsIHRoZSB3aG9sZSBBbHBoYSBwZXJpb2QgaXMgbGlrZWx5IHRvIG5lZWQgdG8gcnVuIGJleW9uZCAxMCB3ZWVrcy4gSG93ZXZlciwgZWZmb3J0IHNob3VsZCBiZSBjb3ZlcmVkIGJ5IDEwIHdlZWtzIHdvcmtpbmcgZGF5cy4gVGhlIGNvbnRyYWN0IGxlbmd0aCByZWZsZWN0cyB0aGlzIG5lZWQgZm9yIHNvbWUgZmxleGliaWxpdHkuIENsaW5pY2lhbnMgYXJlIG5vdCB0aGUgb25seSBncm91cCBvZiB1c2Vycy9zdGFrZWhvbGRlcnMgLSBvdGhlciBncm91cHMgbWF5IHJlcXVpcmUgbGVzcyBub3RpY2UuIFN1Y2ggYXZhaWxhYmlsaXR5IGlzc3VlcyB3aWxsIGluZmx1ZW5jZSBkZWNpc2lvbnMgbWFkZSBiZXR3ZWVuIHRoZSBCdXllciBhbmQgU3VwcGxpZXIgcmVnYXJkaW5nIHdvcmtzaG9wIHNjaGVkdWxlL29yZGVyLCBhbmQgcmVzZWFyY2ggbW9kZSAoZWcgZmFjZS10by1mYWNlIG9yIHJlbW90ZS9vbmxpbmUpLiBXZSB3b3VsZCBsaWtlIHRvIGF2b2lkIGNoYW5nZSByZXF1ZXN0cy48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj44Ljwvc3Bhbj4KICAgICAgUmVnYXJkaW5nIEhpcHBvIENNUy4gSXMgdGhpcyB0aGUgQ01TIHRoYXQgbXVzdCBiZSB1c2VkLCBvciBpcyB0aGVyZSBzY29wZSB0byBzdWdnZXN0IGFuIGFsdGVybmF0aXZlIENNUz88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5UaGUgcGxhdGZvcm0sIGluY2x1ZGluZyB0aGUgQ01TLCBoYXMgYWxyZWFkeSBiZWVuIGlkZW50aWZpZWQuIFRoaXMgaXMgdGhlIENNUyB0aGF0IHdlIHJlcXVpcmUgU3VwcGxpZXJzIHRvIHdvcmsgd2l0aC48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj45Ljwvc3Bhbj4KICAgICAgUGxlYXNlIGNhbiB5b3Ugc2hhcmUgYSBwcm9jdXJlbWVudCB0aW1ldGFibGUgb3V0bGluaW5nIHN0ZXBzICh3aGljaCB3b3VsZCB0eXBpY2FsbHkgaW5jbHVkZSBldmlkZW5jZSByZXNwb25zZSBldmFsdWF0aW9uLCBzaG9ydGxpc3Rpbmcgb2Ygc3VwcGxpZXJzIGZvciBuZXh0IHN0YWdlLCBwcmVwYXJhdGlvbiBvZiBzdXBwbGllciBwcm9wb3NhbHMsIGV2YWx1YXRpb24gb2Ygc3VwcGxpZXIgcHJvcG9zYWxzLCBhbm5vdW5jZW1lbnQgb2Ygc3VjY2Vzc2Z1bCBzdXBwbGllciwgY29udHJhY3QgY29tcGxldGlvbiwgY29udHJhY3Qgc2lnbmF0dXJlcywgY29tbWVuY2Ugd29yayksIGJlYXJpbmcgaW4gbWluZCB0aGUgZGF0ZXMgcHVibGlzaGVkIG9uIHRoZSBjb250cmFjdCBub3RpY2U6IGV2aWRlbmNlIHN1Ym1pc3Npb24gb24gMjV0aCBEZWNlbWJlciBhbmQgY29tbWVuY2luZyB3b3JrIG9uIDNyZCBGZWJydWFyeT88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5XZSByZXF1aXJlIHN1cHBsaWVycyB0byBoYXZlIGF2YWlsYWJpbGl0eSBmcm9tIDAzIEZlYnJ1YXJ5LCBhbmQgd2UgYWltIHRvIHN0YXJ0IHdvcmsgd2VlayBjb21tZW5jaW5nIDAzIEZlYnJ1YXJ5LiAgVGhlIHByb3Zpc2lvbmFsIHByb2N1cmVtZW50IHNjaGVkdWxlIGlzIG91dGxpbmVkIGJlbG93LiBUaGUgc2NoZWR1bGUgY291bGQgY2hhbmdlIHNsaWdodGx5IC0gZS5nLiB0byBhY2NvbW1vZGF0ZSBzdXBwbGllciBhdmFpbGFiaWxpdHkgdG8gZ2l2ZSBwcmVzZW50YXRpb25zOiA8YnI+PGJyPjI1IERlY2VtYmVyIDIwMTk6IFN1Ym1pc3Npb24gZGVhZGxpbmUgPGJyPjxicj4zMCBEZWMgMjAxOSDigJMgOCBKYW4gMjAyMDogU2hvcnRsaXN0aW5nIG9mIHN1cHBsaWVycyA8YnI+PGJyPjggSmFuIOKAkyAxNyBKYW46IFByZXBhcmF0aW9uIG9mIHN1cHBsaWVyIHByb3Bvc2FscyA8YnI+PGJyPjIwIOKAkyAyNCBKYW46IEV2YWx1YXRpb24gb2Ygc3VwcGxpZXIgcHJvcG9zYWxzIDxicj48YnI+MjcgSmFuOiBBbm5vdW5jZW1lbnQgb2Ygc3VjY2Vzc2Z1bCBzdXBwbGllciA8YnI+PGJyPldlZWsgY29tbWVuY2luZyAyNyBKYW46IENvbnRyYWN0IGNvbXBsZXRpb24gPGJyPjxicj4wMyBGZWI6IGNvbnRyYWN0IHNpZ25hdHVyZXMgPGJyPjxicj5XZWVrIGNvbW1lbmNpbmcgMDMgRmViOiBzdGFydCB3b3JrPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+MTAuPC9zcGFuPgogICAgICBUbyB3aGF0IGV4dGVudCAoaWYgYXQgYWxsKSB3aWxsIHRoZSBkZWxpdmVyeSBvZiB0aGlzIGVuZ2FnZW1lbnQgYmUgYWxpZ25lZCB0byB0aGUgU2VydmljZSBNYW51YWwgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL3NlcnZpY2UtbWFudWFsIiBjbGFzcz0iYnJlYWstbGluayIgcmVsPSJleHRlcm5hbCI+aHR0cHM6Ly93d3cuZ292LnVrL3NlcnZpY2UtbWFudWFsPC9hPiBhbmQgYXNzb2NpYXRlZCBHRFMgYXNzZXNzbWVudHM/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VGhpcyB3aWxsIGJlIGFsaWduZWQgdG8gdGhlIFNlcnZpY2UgTWFudWFsIGFuZCB3ZSBleHBlY3QgdGhlIHN1cHBsaWVyIHRvIHRha2UgdXMgdGhyb3VnaCB0aGUgR0RTIEFscGhhIEFzc2Vzc21lbnQuPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+MTEuPC9zcGFuPgogICAgICBGb3IgdGhlIGZpcnN0IGV2YWx1YXRpb24gcm91bmQgKGV2aWRlbmNlKSwgd2hhdCB3b3VsZCB5b3UgZXhwZWN0IHRvIHNlZSBmcm9tIGFuIGFuc3dlciBmb3IgaXQgdG8gYmUgZGVlbWVkICYjMzk7ZXhjZWVkaW5nJiMzOTsgYW5kIHNjb3JlIDMgbWFya3M/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+V2Ugd291bGQgZXhwZWN0IGFuc3dlcnMgdGhhdCBzY29yZSAzIG1hcmtzIHRvOjxicj4tCVNwZWNpZmljYWxseSBhZGRyZXNzIHRoZSBleGFjdCByZXF1aXJlbWVudDxicj4tCUJlIGNvbXByZWhlbnNpdmU8YnI+LQlJbmNsdWRlIGFuIGV4YW1wbGU8L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj4xMi48L3NwYW4+CiAgICAgIFdpbGwgeW91IGJlIGFibGUgdG8gb3JnYW5pc2UgYWNjZXNzIHRvIHN0YWtlaG9sZGVycyB0aHJvdWdob3V0IHRoZSBwcm9qZWN0Pzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlllcy4gT3VyIEJ1c2luZXNzIFJlbGF0aW9uc2hpcCBNYW5hZ2VyIHdpbGwgd29yayB3aXRoIHRoZSBzdXBwbGllciB0byBvcmdhbmlzZSBhY2Nlc3MgdG8gc3Rha2Vob2xkZXJzIHRocm91Z2hvdXQgdGhlIHByb2plY3QuPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+MTMuPC9zcGFuPgogICAgICBIYXMgd29yayBoYXMgYmVlbiBmdWxseSBkZWZpbmVkLCBib3VuZGVkIGFuZCBwcmlvcml0aXNlZD88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5BcyBmYXIgYXMgdGhpcyBpcyBwb3NzaWJsZSBmb3IgYW4gQWxwaGEuPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+MTQuPC9zcGFuPgogICAgICBBcmUgeW91IGFibGUgdG8gcmVjcnVpdCBhbmQgcHJvdmlkZSBhY2Nlc3MgdG8gdXNlcnMgZm9yIHRoZSBwdXJwb3NlIG9mIHVzZXIgcmVzZWFyY2g/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+WWVzLiBPdXIgQnVzaW5lc3MgUmVsYXRpb25zaGlwIE1hbmFnZXIgd2lsbCB3b3JrIHdpdGggdGhlIHN1cHBsaWVyIHRvIHByb3ZpZGUgYWNjZXNzIHRvIHVzZXJzLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+PHNwYW4gYXJpYS1sYWJlbD0icXVlc3Rpb24iPjE1Ljwvc3Bhbj4KICAgICAgV2lsbCB5b3VyIFByb2R1Y3QgT3duZXIgYmUgYWxsb2NhdGVkIGZ1bGwgdGltZSB0byB0aGlzIHByb2plY3Q/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+Qm90aCBvdXIgU2VydmljZSBPd25lciBhbmQgb3VyIEJ1c2luZXNzIFJlbGF0aW9uc2hpcCBNYW5hZ2VyIGFyZSBhbGxvY2F0ZWQgZnVsbCB0aW1lIHRvIHRoaXMgcHJvamVjdC48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj4xNi48L3NwYW4+CiAgICAgIFdoYXQgcm9sZXMgYXJlIHlvdSBleHBlY3Rpbmcgc3VwcGxpZXJzIHRvIHByb3ZpZGU/IEluIGFkZGl0aW9uLCBhcmUgeW91IGV4cGVjdGluZyBhbGwgcm9sZXMgdG8gaGF2ZSB0aGUgYWJpbGl0eSB0byBiZSBmdWxsIHRpbWU/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+V2UgYXJlIGV4cGVjdGluZyBzdXBwbGllcnMgdG8gcHJvdmlkZSBhbGwgcm9sZXMgbmVjZXNzYXJ5IGZvciBhbiBBbHBoYSwgYXBhcnQgZnJvbSB0aGUgU2VydmljZSBPd25lciBhbmQgdGhlIEJ1c2luZXNzIFJlbGF0aW9uc2hpcCBNYW5hZ2VyIHdobyB3aWxsIGJlIHByb3ZpZGVkIGJ5IHRoZSBCdXllci4gV2UgZXhwZWN0IHRoZSBzdXBwbGllciB0byBlc3RpbWF0ZSBob3cgbWFueSBkYXlzIGVhY2ggcm9sZSB3b3VsZCBuZWVkIHRvIGNvbnRyaWJ1dGUgdG8gdGhlIHByb2plY3QuPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+MTcuPC9zcGFuPgogICAgICBRNSBEZW1vbnN0cmF0ZSBleGNlbGxlbnQgaW5mb3JtYXRpb24gYXJjaGl0ZWN0dXJlIHNraWxsczogd2hhdCBjcml0ZXJpYSB3aWxsIHlvdSB1c2UgdG8gZ2l2ZSBmdWxsIG1hcmtzIGZvciBFeGNlbGxlbmNlPzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPldlIHdvdWxkIGV4cGVjdCBhbnN3ZXJzIHRvIG91dGxpbmUgZXhwZXJpZW5jZSBhbmQgZ2l2ZSBhdCBsZWFzdCBvbmUgZXhhbXBsZSB0aGF0IGlsbHVzdHJhdGVzIHRoZSBTdXBwbGllciYjMzk7cyBhcHByb2FjaCB0byBJbmZvcm1hdGlvbiBBcmNoaXRlY3R1cmUgKElBKSwgY29tcGxleGl0eSBhbmQgc2NhbGUgb2YgZGF0YSBhbmQgaW5mb3JtYXRpb24gd29ya2VkIHdpdGgsIGFuZCBob3cgdGhlIElBIHByb2Nlc3MgdW5kZXJ0YWtlbiBpbXBhY3RlZCB1c2Vyc+KAmSBleHBlcmllbmNlLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+PHNwYW4gYXJpYS1sYWJlbD0icXVlc3Rpb24iPjE4Ljwvc3Bhbj4KICAgICAgUTMgcmVmZXJzIHRvIOKAnExpZmUgY3ljbGUgaW5jbHVkaW5nIERpc2NvdmVyeSwgQWxwaGEsIEJldGEsIExpdmUgYW5kIFJldGlyZW1lbnTigJ0uIElzIGl0IHBlcm1pc3NpYmxlIHRvIHVzZSBtb3JlIHRoYW4gb25lIGV4YW1wbGUgdG8gaWxsdXN0cmF0ZSBvdXIgY2FwYWJpbGl0eSBhY3Jvc3MgdGhlIGZ1bGwgbGlmZWN5Y2xlPzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlllcywgaXQgaXMgcGVybWlzc2libGUgdG8gdXNlIG1vcmUgdGhhbiBvbmUgZXhhbXBsZSB0byBpbGx1c3RyYXRlIGNhcGFiaWxpdHkgYWNyb3NzIHRoZSBmdWxsIGxpZmVjeWNsZS48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj4xOS48L3NwYW4+CiAgICAgIENhbiB5b3UgcHJvdmlkZSBzb21lIGluZm9ybWF0aW9uIG9uIGhvdyB5b3UgcHJvcG9zZSB0byB1c2UgQmxvb21yZWFjaD8gV2lsbCB0aGlzIGJlIGRlcGxveWVkIGFzIGEgaGVhZGxlc3MgQ01TIG9yIGFzIGEgdHJhZGl0aW9uYWwgcGFnZSByZW5kZXJpbmcgcHVibGlzaGluZyBwbGF0Zm9ybT88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5XZSBleHBlY3QgdGhlIEFscGhhIHRvIGV4cGxvcmUgdGhlIGJlc3Qgd2F5IHRvIHVzZSBCbG9vbXJlYWNoLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+PHNwYW4gYXJpYS1sYWJlbD0icXVlc3Rpb24iPjIwLjwvc3Bhbj4KICAgICAgVGhlIHByb2plY3QgaXMgcG9zdGVkIGFzIGFuIEFscGhhLiBJcyBIRUUgZm9sbG93aW5nIHRoZSBBbHBoYSBkZWZpbml0aW9uL2FwcHJvYWNoIG91dGxpbmVkIGluIHRoZSBHRFMgU2VydmljZSBNYW51YWw/IElmIHlvdSBhcmUgd2h5IGlzIHRoZSBjaG9pY2Ugb2YgQ01TIGZpeGVkPyBJcyB0aGlzIHRvIGFsaWduIHdpdGggd2lkZXIgdGVjaG5pY2FsIGNvbnNpZGVyYXRpb25zL3N0YW5kYXJkcz8gRG8gSEVFIGFscmVhZHkgdXNlIEJsb29tcmVhY2g/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+WWVzIEhFRSBpcyBmb2xsb3dpbmcgdGhlIEFscGhhIGFwcHJvYWNoIG91dGxpbmVkIGluIHRoZSBHRFMgU2VydmljZSBNYW51YWwuIFRoZSBjaG9pY2Ugb2YgQ01TIGlzIGZpeGVkIGF0IHRoZSBtb21lbnQgZHVlIHRvIGJyb2FkZXIgY29uc2lkZXJhdGlvbnMuIElmIHRoZSBvdXRjb21lIG9mIHRoZSBBbHBoYSBzaG93cyB0aGF0IHRoZSBDTVMgY2Fubm90IG1lZXQgdXNlciBuZWVkcyB0aGVuIGF0IHRoYXQgc3RhZ2UgdGhlIGNob2ljZSBvZiBDTVMgd291bGQgYmUgcmUtZXZhbHVhdGVkLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+PHNwYW4gYXJpYS1sYWJlbD0icXVlc3Rpb24iPjIxLjwvc3Bhbj4KICAgICAgRG8geW91IGhhdmUgYW55IHByZWZlcmVuY2UgYmV0d2VlbiBwdWJsaWMgc2VjdG9yIG9yIHByaXZhdGUgc2VjdG9yIGV4YW1wbGVzPyBPciB3aWxsIGJvdGggYmUgdHJlYXRlZCBlcXVhbGx5IGFzIGxvbmcgYXMgdGhleSBhcmUgcmVsZXZhbnQgdG8gdGhlIHF1ZXN0aW9uPzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlJlc3BvbnNlcyB3aWxsIGJlIG1hcmtlZCBhY2NvcmRpbmcgdG8gaG93IHdlbGwgdGhleSBtZWV0IHRoZSByZXF1aXJlbWVudCwgcmVnYXJkbGVzcyBvZiBzZWN0b3IuIEhvd2V2ZXIsIHdlIGFkdmlzZSBzdXBwbGllcnMgdG8gY29uc2lkZXIgdGhlIG5pY2UgdG8gaGF2ZSByZXF1aXJlbWVudHMgaW4gdGhlaXIgcmVzcG9uc2VzLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+PHNwYW4gYXJpYS1sYWJlbD0icXVlc3Rpb24iPjIyLjwvc3Bhbj4KICAgICAgV2lsbCB0aGUgc2NvcmVzIGZyb20gdGhlIGV2aWRlbmNpbmcgcm91bmQgYmUgdGFrZW4gdGhyb3VnaCB0byBmaW5hbCBldmFsdWF0aW9uPyBPciB3aWxsIHRoZXkgb25seSBiZSB1c2VkIGZvciB0aGUgcHVycG9zZXMgb2Ygc2hvcnRsaXN0aW5nIHN1cHBsaWVycz88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5TY29yZXMgZnJvbSB0aGUgZXZpZGVuY2luZyByb3VuZCB3aWxsIGJlIHVzZWQgZm9yIHNob3J0bGlzdGluZy48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj4yMy48L3NwYW4+CiAgICAgIEluIG9yZGVyIHRvIGNvbXBhcmUgc3VwcGxpZXJzIGxpa2UgZm9yIGxpa2UsIGhvdyB3aWxsIHByaWNlIGJlIGV2YWx1YXRlZDogd2lsbCB5b3UgYmUgZXZhbHVhdGluZyBieSB0aGUgdG90YWwgcHJpY2UsIHJhdGUgY2FyZCBvciBib3RoPyBIb3cgZG8geW91IGVuc3VyZSB0aGF0IHlvdSBhcmUgY29tcGxldGluZyBhIGdlbnVpbmUgdmFsdWUgZm9yIG1vbmV5IGNvbXBhcmlzb24gcmF0aGVyIHRoYW4ganVzdCBhIHJhdGUgY2FyZCBjb21wYXJpc29uPzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPldlIHdpbGwgZm9sbG93IHRoZSBEaWdpdGFsIE1hcmtldHBsYWNlIGd1aWRlbGluZXMgd2hpY2ggYXJlIGFzIGZvbGxvd3M6IDxicj48YnI+4oCcQ2FsY3VsYXRlIGEgdG90YWwgc2NvcmUgZm9yIGVhY2ggc3VwcGxpZXIgYnkgbXVsdGlwbHlpbmcgdGhlIGRheSByYXRlcyBmb3IgdGhlIGluZGl2aWR1YWxzIHdob+KAmWxsIGJlIGRvaW5nIHRoZSB3b3JrIGJ5IHRoZSBudW1iZXIgb2YgZGF5cyB0aGUgc3VwcGxpZXIgc2FpZCBlYWNoIHJvbGUgd291bGQgYmUgbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSB3b3JrLuKAnSA8YnI+PGJyPkFueSBhZGRpdGlvbmFsIGNvc3RzIGFuZCByZWxhdGVkIGluZm9ybWF0aW9uIHNwZWNpZmllZCBieSBTdXBwbGllcnMgd2lsbCBhbHNvIGJlIHRha2VuIGludG8gY29uc2lkZXJhdGlvbi48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj4yNC48L3NwYW4+CiAgICAgIFdoYXQgV0NBRyBjb21wbGlhbmNlIGlzIHRoZSByZXF1aXJlZD8gV0NBRyAyLjAgb3IgMi4xPyBBbmQgYXQgd2hhdCBsZXZlbCBBLCBBQSBvciBBQUEgbGV2ZWw/IFBsZWFzZSBjbGFyaWZ5Ljwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPldDQUcgMi4xIEFBIGFjY2Vzc2liaWxpdHkgY29tcGxpYW5jZSBpcyByZXF1aXJlZC48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCgogIFRoZSBkZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9ucyBhYm91dCB0aGlzIG9wcG9ydHVuaXR5IHdhcyBXZWRuZXNkYXkgMTggRGVjZW1iZXIgMjAxOS4KCiAgPC9kaXY+CjwvZGl2PgoKCiAgPGJyLz48IS0tIDwtIHJlbW92ZSBvbmNlIGdyaWQgYW5kIGJvZHkgZWxlbWVudHMgaGF2ZSBiZWVuIGNvbnZlcnRlZCB0byBnb3Z1ayBmcm9udGVuZCAtLT4KICA8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2x1bW4tdHdvLXRoaXJkcyI+CiAgICAgIDxmb3JtIGFjdGlvbj0iL3N1cHBsaWVycy9vcHBvcnR1bml0aWVzLzExMDczL3Jlc3BvbnNlcy9zdGFydCIgbWV0aG9kPSJnZXQiPgogICAgICAgIAogIAogICAgCiAgCgo8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImdvdnVrLWJ1dHRvbiI+CiAgQXBwbHkgZm9yIHRoaXMgb3Bwb3J0dW5pdHkKPC9idXR0b24+CiAgICAgIDwvZm9ybT4KICAgIDwvZGl2PgogIDwvZGl2PgoKCgogICAgPC9tYWluPgogIDwvZGl2PgoKCiAgICA8Zm9vdGVyIGNsYXNzPSJncm91cCBqcy1mb290ZXIiIGlkPSJmb290ZXIiIHJvbGU9ImNvbnRlbnRpbmZvIj4KCiAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci13cmFwcGVyIj4KICAgICAgICAKICA8ZGl2IGNsYXNzPSJmb290ZXItY2F0ZWdvcmllcyI+CiAgPGRpdiBjbGFzcz0iZm9vdGVyLWFib3V0Ij4KICAgIDxoMj4KICAgICAgQWJvdXQgdGhlIERpZ2l0YWwgTWFya2V0cGxhY2UKICAgIDwvaDI+CiAgICA8dWw+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIvaGVscCI+Q29udGFjdDwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW1hcmtldHBsYWNlLWJ1eWVycy1ndWlkZSI+U2VydmljZXMgeW91IGNhbiBidXk8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1tYXJrZXRwbGFjZS1zdXBwbGllcnMtZ3VpZGUiPlNlcnZpY2VzIHlvdSBjYW4gc2VsbDwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9nb3Zlcm5tZW50L29yZ2FuaXNhdGlvbnMvY3Jvd24tY29tbWVyY2lhbC1zZXJ2aWNlIj5BYm91dCBDcm93biBDb21tZXJjaWFsIFNlcnZpY2U8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2dvdmVybm1lbnQtZGlnaXRhbC1zZXJ2aWNlIj5BYm91dCBHb3Zlcm5tZW50IERpZ2l0YWwgU2VydmljZTwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Ii9nLWNsb3VkL3N1cHBsaWVycyI+Ry1DbG91ZCBzdXBwbGllciBB4oCTWjwvYT4KICAgICAgPC9saT4KICAgIDwvdWw+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0iZm9vdGVyLWd1aWRhbmNlIj4KICAgIDxoMj4KICAgICAgICBHdWlkYW5jZSBmb3IgdXNpbmcgRGlnaXRhbCBNYXJrZXRwbGFjZQogICAgPC9oMj4KICAgIDx1bD4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9nLWNsb3VkLXN1cHBsaWVycy1ndWlkZSI+QXBwbHlpbmcgdG8gc2VsbCBvbiB0aGUgRy1DbG91ZCBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtc3VwcGxpZXJzLWd1aWRlIj5BcHBseWluZyB0byBzZWxsIG9uIHRoZSBET1MgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2hvdy10by1zZWxsLXlvdXItZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtc2VydmljZXMiPlJlc3BvbmRpbmcgdG8gYnV5ZXIgcmVxdWlyZW1lbnRzIG9uIHRoZSBET1MgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2ctY2xvdWQtYnV5ZXJzLWd1aWRlIj5CdXlpbmcgb24gdGhlIEctQ2xvdWQgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzLWJ1eWVycy1ndWlkZSI+QnV5aW5nIG9uIHRoZSBET1MgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL3RoZS1jcm93bi1ob3N0aW5nLWRhdGEtY2VudHJlcy1mcmFtZXdvcmstb24tdGhlLWRpZ2l0YWwtbWFya2V0cGxhY2UiPkJ1eWluZyBvbiB0aGUgQ3Jvd24gSG9zdGluZyBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICA8L3VsPgogIDwvZGl2PgogIDxoci8+CjwvZGl2PgoKCiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLW1ldGEiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLW1ldGEtaW5uZXIiPgogICAgICAgICAgICAKICA8aDIgY2xhc3M9InZpc3VhbGx5aGlkZGVuIj4KICBTdXBwb3J0IGxpbmtzCjwvaDI+Cgo8dWw+CiAgPGxpPjxhIGhyZWY9Ii90ZXJtcy1hbmQtY29uZGl0aW9ucyIgY2xhc3M9InRlcm1zLWFuZC1jb25kaXRpb25zIj5UZXJtcyBhbmQgY29uZGl0aW9uczwvYT48L2xpPgogIDxsaT48YSBocmVmPSIvY29va2llcyI+Q29va2llczwvYT48L2xpPgogIDxsaT48YSBocmVmPSIvcHJpdmFjeS1ub3RpY2UiPlByaXZhY3kgbm90aWNlPC9hPjwvbGk+CjwvdWw+Cgo8cD4KICBCdWlsdCBieSB0aGUgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9nb3Zlcm5tZW50LWRpZ2l0YWwtc2VydmljZSI+R292ZXJubWVudCBEaWdpdGFsIFNlcnZpY2U8L2E+CjwvcD4KCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvcGVuLWdvdmVybm1lbnQtbGljZW5jZSI+CiAgICAgICAgICAgICAgPHAgY2xhc3M9ImxvZ28iPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm5hdGlvbmFsYXJjaGl2ZXMuZ292LnVrL2RvYy9vcGVuLWdvdmVybm1lbnQtbGljZW5jZS92ZXJzaW9uLzMvIiByZWw9ImxpY2Vuc2UiPk9wZW4gR292ZXJubWVudCBMaWNlbmNlPC9hPjwvcD4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxwPkFsbCBjb250ZW50IGlzIGF2YWlsYWJsZSB1bmRlciB0aGUgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmF0aW9uYWxhcmNoaXZlcy5nb3YudWsvZG9jL29wZW4tZ292ZXJubWVudC1saWNlbmNlL3ZlcnNpb24vMy8iIHJlbD0ibGljZW5zZSI+T3BlbiBHb3Zlcm5tZW50IExpY2VuY2UgdjMuMDwvYT4sIGV4Y2VwdCB3aGVyZSBvdGhlcndpc2Ugc3RhdGVkPC9wPgogICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvcHlyaWdodCI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubmF0aW9uYWxhcmNoaXZlcy5nb3YudWsvaW5mb3JtYXRpb24tbWFuYWdlbWVudC9yZS11c2luZy1wdWJsaWMtc2VjdG9yLWluZm9ybWF0aW9uL2NvcHlyaWdodC1hbmQtcmUtdXNlL2Nyb3duLWNvcHlyaWdodC8iPiZjb3B5OyBDcm93biBjb3B5cmlnaHQ8L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Zvb3Rlcj4KCiAgICA8ZGl2IGlkPSJnbG9iYWwtYXBwLWVycm9yIiBjbGFzcz0iYXBwLWVycm9yIGhpZGRlbiI+PC9kaXY+CgogICAgPHNjcmlwdCBzcmM9Ii9zdGF0aWMvamF2YXNjcmlwdHMvZ292dWstdGVtcGxhdGUuanM/MC4xOS4yIj48L3NjcmlwdD4KCiAgICAKICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc3RhdGljL2phdmFzY3JpcHRzL2FwcGxpY2F0aW9uLmpzP2NlYjAwMTM2YjAxNGEzOGJlNzk4YWQ0YWE2ZTc3YjM3Ij48L3NjcmlwdD4KICAKCgogICAgCiAgICA8c2NyaXB0PmlmICh0eXBlb2Ygd2luZG93LkdPVlVLID09PSAndW5kZWZpbmVkJykgZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZS5yZXBsYWNlKCdqcy1lbmFibGVkJywgJycpOzwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPg==
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:02 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11353
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2og.FUj7SIPCcBb3NSHqeePFlCoi2h4
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '40965'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:03 GMT
      Dm-Request-Id:
      - 2d33fa3e85333bc0
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:03 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2ow.RBNRf-g6tbeyj_Bo-rUrABom2yo;
        Expires=Tue, 24-Dec-2019 15:48:03 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 2d33fa3e85333bc0
      X-B3-Traceid:
      - 2d33fa3e85333bc0
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b1509a64-f7d5-4b78-7053-0706d119eaaf
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 89033043c124289b2dedc4a7c50bd2e1.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - APfuk7W1afi84dn_OZuOAbPWbd5Ikvm1U3yqz1iCneEvHTn_ToVeOg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:02 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11357
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2ow.RBNRf-g6tbeyj_Bo-rUrABom2yo
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '33309'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:03 GMT
      Dm-Request-Id:
      - a72866996f967e79
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:03 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2ow.RBNRf-g6tbeyj_Bo-rUrABom2yo;
        Expires=Tue, 24-Dec-2019 15:48:03 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - a72866996f967e79
      X-B3-Traceid:
      - a72866996f967e79
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 8b0d8749-e5bb-48ba-67a5-7c1194ebc5dd
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 e9264a80086c9204ba271fc4403dab51.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - x7K1d2sdMadYRvABaP122na7wVgIkB_L7ylg0u1IF8v6K21Xx19Icw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:03 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11368
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2ow.RBNRf-g6tbeyj_Bo-rUrABom2yo
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '33417'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:03 GMT
      Dm-Request-Id:
      - fc15cbcc0b9c2caf
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:03 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2ow.RBNRf-g6tbeyj_Bo-rUrABom2yo;
        Expires=Tue, 24-Dec-2019 15:48:03 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - fc15cbcc0b9c2caf
      X-B3-Traceid:
      - fc15cbcc0b9c2caf
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 2aa63a43-0119-4c70-4832-da8678d2a3b2
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 a654b4b54d3322bdcbd8b65f511761c1.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - Wf64ZU-lTzr9Uweri4wDJGIkP0L2cP9qzoEK1CI4ZI6RXAuK1eizEg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:03 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11374
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2ow.RBNRf-g6tbeyj_Bo-rUrABom2yo
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '33241'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:04 GMT
      Dm-Request-Id:
      - 28ccfb6d5937115a
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:04 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2pA.zUtGPO8fNGF0diOg5kcmOf9qGbc;
        Expires=Tue, 24-Dec-2019 15:48:04 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 28ccfb6d5937115a
      X-B3-Traceid:
      - 28ccfb6d5937115a
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 6fd55158-9dbb-41d2-7b44-317c690784ec
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 8d36edc1ce736c158ddedbd7365e2a8e.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - fwipl6VfoYeDtXkXid07ozH3R6jP7ulB5RPH6iZRgO2hwoRaOCy1iA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:03 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11380
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2pA.zUtGPO8fNGF0diOg5kcmOf9qGbc
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '33073'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:04 GMT
      Dm-Request-Id:
      - b45bdcae788b7114
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:04 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2pA.zUtGPO8fNGF0diOg5kcmOf9qGbc;
        Expires=Tue, 24-Dec-2019 15:48:04 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - b45bdcae788b7114
      X-B3-Traceid:
      - b45bdcae788b7114
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - efc9c178-bdf4-471f-5acd-8889a015e288
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 89033043c124289b2dedc4a7c50bd2e1.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - MLjbxux-yhMhdcrT0zlXkaZrb80bJpLv5Nv30rflp3M5JfT-FfCW2A==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:04 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11388
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2pA.zUtGPO8fNGF0diOg5kcmOf9qGbc
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '32185'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:04 GMT
      Dm-Request-Id:
      - 2932e4b37dc39c75
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:04 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2pA.zUtGPO8fNGF0diOg5kcmOf9qGbc;
        Expires=Tue, 24-Dec-2019 15:48:04 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 2932e4b37dc39c75
      X-B3-Traceid:
      - 2932e4b37dc39c75
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 3f183c15-9958-41ad-60de-44c163f03c00
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 e9264a80086c9204ba271fc4403dab51.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - N8F-M9s_Aw3EH1ulRl_XmbixI_GzZUz0N8_DhoPIiFtKukitAbH-vw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:04 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11390
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84
        Safari/537.36
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2pA.zUtGPO8fNGF0diOg5kcmOf9qGbc
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '40954'
      Connection:
      - keep-alive
      Date:
      - Tue, 24 Dec 2019 14:48:04 GMT
      Dm-Request-Id:
      - 7c759c41dd54b26a
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 23-Dec-2020 14:48:04 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.EOO2pA.zUtGPO8fNGF0diOg5kcmOf9qGbc;
        Expires=Tue, 24-Dec-2019 15:48:04 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 7c759c41dd54b26a
      X-B3-Traceid:
      - 7c759c41dd54b26a
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 3632d676-df62-4cb7-4387-c6589624c42c
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 7e6302699a89f60ff8e9259d2dea52ba.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C1
      X-Amz-Cf-Id:
      - sPDnaezkH8xT9grJi-8kQh6zsLQhNXW6CvazMKf8lRLYZrhoRwUEjA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 24 Dec 2019 14:48:04 GMT
recorded_with: VCR 5.0.0
